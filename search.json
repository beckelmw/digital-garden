[{"title":"Digital Garden","text":"---\ntitle: Digital Garden\nurl: /\n---\n\nThis is my [digital garden](https://maggieappleton.com/garden-history). It's a place to cultivate and share ideas about things I am interested in, learning about, or want to remember. You can add to it as well via a [pull request](https://github.com/beckelmw/digital-garden).\n\n## Areas\n\n*   [Code](/code)\n*   [Flying](/flying)\n*   [Hiking](/hikes)\n*   [Recipes](/recipes)\n","url":"/"},{"title":"Creating a digital garden with Github, Markdown and a Cloudflare Worker","text":"---\ntitle: Creating a digital garden with Github, Markdown and a Cloudflare Worker\ncreated: 2022-01-21\ncategory: code\nstatus: seedling\nurl: /code/creating-a-digital-garden-with-github-markdown-and-cloudflare-workers\n---\n\n> Rather than presenting a set of polished articles, displayed in reverse chronological order, these sites act more like free form, work-in-progress wikis. - https://maggieappleton.com/garden-history.\n\nSo, here it is. How I started my digital garden using Github, Markdown and a Cloudflare worker.\n\n## Reasoning\n\n*   Markdown\n    *   Easy to write and transport anywhere in the future\n    *   [Github flavored markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax) is even better\n*   [Github](https://github.com)\n    *   Content doesn't live on my machine\n    *   Versioned via git\n    *   Existing API which 304s when content hasn't changed\n    *   Can edit content from an iPad\n    *   Another developer could contribute or correct my mistakes via a pull request\n*   [Cloudflare worker](https://developers.cloudflare.com/workers/)\n    *   Easy setup\n    *   Served from the edge\n    *   Based on web standards\n    *   Inexpensive\n\n## Setting up a Cloudflare worker\n\n### ESBuild\n\nThis is my build.js file for the worker using [ESBuild's programmatic api](https://esbuild.github.io/getting-started/):\n\n```\nimport * as esbuild from \"esbuild\";\n\nconst mode = process.env.NODE_ENV?.toLowerCase() ?? \"development\";\n\nconsole.log(`[Worker] Running esbuild in ${mode} mode`);\n\nesbuild.build({\n  entryPoints: [\"./src/index.js\"],\n  bundle: true,\n  sourcemap: true,\n  format: \"esm\",\n  conditions: [\"worker\"], // https://esbuild.github.io/api/#how-conditions-work\n  minify: mode === \"production\",\n  define: {\n    \"process.env.NODE_ENV\": `\"${mode}\"`,\n  },\n  outfile: \"dist/index.mjs\", // .mjs is important for Cloudflare\n});\n\n```\n\n### Miniflare\n\n[Miniflare](https://miniflare.dev/) allows you to work with Cloudflare workers locally. Within package.json miniflare is started with some [KV settings](https://miniflare.dev/storage/kv) and a command to run the build script above. It will also watch for code changes.\n\n    \"scripts\": {\n        \"dev\": \"concurrently \\\"npm:dev:*\\\"\",\n        \"dev:worker\": \"miniflare --kv CONTENT --kv-persist --build-command \\\"node ./build.js\\\" --watch --debug\"\n    }\n\n#### Environment variables\n\nMiniflare will pickup the variables you define in a [.env](https://miniflare.dev/core/variables-secrets) file automatically. When you deploy your worker to Cloudflare you will need to set the environment variables your worker expects using their [wrangler cli](https://developers.cloudflare.com/workers/cli-wrangler/commands#put) tool.\n\n### Getting content from the Github API\n\nYou can use the [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API from within a Cloudflare worker. The fetch call looks like this:\n\n    const headers = new Headers({\n        authorization: `token ${env.GITHUB_TOKEN}`,\n        accept: \"application/vnd.github.v3+json\",\n        \"User-Agent\": \"beckelman.org\", // GITHUB will send 403 without UserAgent\n    });\n\n    if (cachedItem?.etag) {\n        headers.append(\"If-None-Match\", cachedItem.etag);\n    }\n\n    const res = await fetch(`https://api.github.com/repos/${env.GITHUB_OWNER}/${env.GITHUB_REPO}/contents${path}`, {\n        headers,\n    });\n\n#### Caching fetched content with Workers KV\n\nWhen you make a request for content from the Github API it will return a [304 Not Modified](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304) status code if the content hasn't changed. You tell it what content you have via an [etag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) in a [If-None-Match](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) header in your request. The nice thing about [304s is they don't count against your API quota](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#conditional-requests).\n\nThe flow is:\n\n*   Check [Workers KV](https://developers.cloudflare.com/workers/learning/how-kv-works) for cached content\n*   If cached content exists, then add If-None-Match header with etag stored with the cached content\n*   Make request\n*   Check response\n    *   If status code 304 then bail and return existing cached content\n    *   If status code 200 then cache new content with etag and then return content to user\n    *   If status code 404 then delete cached content and return 404 to the user\n    *   If there is an error return cached content\n\n### Processing markdown with Remark and generating HTML with Rehype\n\n    import { unified } from \"unified\";\n    import remarkParse from \"remark-parse\";\n    import remarkFrontmatter from \"remark-frontmatter\";\n    import remarkGfm from \"remark-gfm\";\n    import remarkRehype from \"remark-rehype\";\n    import rehypeRaw from \"rehype-raw\";\n    import rehypeStringify from \"rehype-stringify\";\n    import { visit } from \"unist-util-visit\";\n    import { load as yaml } from \"js-yaml\";\n\n    export default async (markdown) => {\n      let meta = {};\n      const { value: html } = await unified()\n        .use(remarkParse)\n        .use(remarkFrontmatter)\n        .use(() => {\n          return (ast, file) => {\n            file.data.meta = {};\n            visit(\n              ast,\n              (x) => x.type === \"yaml\",\n              (node, index, parent) => {\n                file.data.meta = { ...yaml(node.value) };\n              }\n            );\n          };\n        })\n        .use(remarkGfm)\n        .use(remarkRehype, { allowDangerousHtml: true })\n        .use(rehypeRaw) // What allows raw html to work\n        .use(rehypeStringify)\n        .process(markdown);\n\n      return { html, meta: file.data.meta };\n    };\n\n## TailwindCSS\n\nYou cannot currently setup your tailwind config as an ES Module. They have a [work around though where they will pickup the config](https://github.com/tailwindlabs/tailwindcss/pull/3181) when it ends with a `.cjs`. Here is my `tailwind.config.cjs` file:\n\n    module.exports = {\n      content: [\"./src/**/*.{html,js}\"],\n      theme: {\n        extend: {},\n      },\n      plugins: [require(\"@tailwindcss/typography\")],\n    };\n\nI am processing it concurrently along with miniflare using the script below and writing it a location where miniflare will serve it when requested from KV storage.\n\n    \"scripts\": {\n        \"dev\": \"concurrently \\\"npm:dev:*\\\"\",\n        \"dev:worker\": \"miniflare --kv CONTENT --kv-persist --build-command \\\"node ./build.js\\\" --watch --debug\",\n        \"dev:tailwind\": \"npx tailwindcss -c ./tailwind.config.cjs -i ./src/css/site.css -o .mf/kv/CONTENT/css/site.css --watch\"\n    }\n\n### Publishing updated CSS\n\nAfter a build, the css needs to be published to the workers KV store. The command below will upload the file.\n\n    wrangler kv:key put --binding=CONTENT css/site.css ./dist/site.css --path\n","url":"/code/creating-a-digital-garden-with-github-markdown-and-cloudflare-workers"},{"title":"Digital Gardening","text":"---\ntitle: Digital Gardening\ncreated: 2022-01-25\ncategory: code\nstatus: seedling\nurl: /code/digital-gardening\n---\n\n<div id=\"status\"></div>\n\n## Status of pages\n\n*   Seedling: Rough drafts and early ideas. May change significantly and are likely just a brain dump\n*   Budding: Work which has been cleaned up and clarified\n*   Evergreen: Complete but may change some over time\n\n> This freedom of course comes with great responsibility. Publishing imperfect and early ideas requires that we make the status of our notes clear to readers. You should include some indicator of how \"done\" they are, and how much effort you've invested in them.\n> https://maggieappleton.com/garden-history\n","url":"/code/digital-gardening"},{"title":"Mutating Unist AST","text":"---\ntitle: Mutating Unist AST\ncategory: code\nurl: /code/mutating-unist-ast\nstatus: seedling\n---\n\nGreat example https://css-tricks.com/how-to-modify-nodes-in-an-abstract-syntax-tree/\n\nThe code below will change a list of images into a grid of images.\n\n    import { selectAll } from \"unist-util-select\";\n    import { visit } from \"unist-util-visit\";\n\n    export default () => {\n      return (ast) => {\n        visit(\n          ast,\n          (x) => x.tagName === \"ul\",\n          (node) => {\n            const images = selectAll(\"element\", node).filter(\n              (y) => y.tagName === \"img\"\n            );\n            if (images.length) {\n              node.tagName = \"div\";\n              node.properties[\"class\"] =\n                \"grid grid-col-1 md:grid-col-3 lg:grid-cols-4\";\n              node.children = images;\n            }\n          }\n        );\n      };\n    };\n","url":"/code/mutating-unist-ast"},{"title":"Code","text":"---\ntitle: Code\nurl: /code\n---\n\n## How to\n\n*   [Creating a digital garden with Github, Markdown and Cloudflare Workers](creating-a-digital-garden-with-github-markdown-and-cloudflare-workers.md)\n\n## ScriptKit\n\n[ScriptKit](https://www.scriptkit.com/) is an open source kit to optimize developer workflow.\n\n> Script Kit makes it easy to create and run scripts that solve your daily problems. Create a new script from the prompt then your script opens in the editor of your choice. Write a few lines of JavaScript. Then run the script from the prompt.\n\n> Simply put, Script Kit helps you script away the friction of your day.\n\n*   [Plant a digital seeding](scriptkit-script-to-plant-a-digital-seedling.md)\n*   [Upload selected images to Cloudflare Images](scriptkit-script-to-upload-images-to-cloudflare-images.md)\n\n## Unified\n\n*   [Mutating unist AST](mutating-unist-ast.md)\n","url":"/code"},{"title":"ScriptKit script to plant a digital seedling","text":"---\ntitle: ScriptKit script to plant a digital seedling\ncreated: 2022-01-20\nstatus: budding\nurl: /code/scriptkit-script-to-plant-a-digital-seedling\n---\n\n    // Name: Plant seedling\n    // Description: Plant a seedling in your digital garden\n    // Author: Bill Beckelman\n\n    import \"@johnlindquist/kit\";\n\n    const GITHUB_TOKEN = await env(\"GITHUB_TOKEN\");\n    const GITHUB_OWNER = await env(\"GITHUB_OWNER\");\n    const GARDEN_REPO = await env(\"GARDEN_REPO\");\n    const filenamify = await npm(\"filenamify\");\n    const dateFns = await npm(\"date-fns\");\n\n    const title = await arg(\"What do you want to name this seedling?\");\n    const seedling = await textarea({ placeholder: \"Seedling to plant\" });\n    const area = await arg(\"What area of the garden?\", [\n      \"Code\",\n      \"Flying\",\n      \"Recipes\",\n      \"Hiking\",\n      \"Family\",\n    ]);\n\n    const filename = filenamify(`${title}.md`.toLowerCase().replace(/ /g, \"-\"));\n    const today = dateFns.format(new Date(), \"yyyy-MM-dd\");\n\n    const md = `---\n    title: ${title}\n    created: ${today}\n    category: ${area.toLowerCase()}\n    ---\n    ${seedling}\n    `;\n\n    const res = await fetch(\n      `https://api.github.com/repos/${GITHUB_OWNER}/${GARDEN_REPO}/contents/${area.toLowerCase()}/${filename}`,\n      {\n        method: \"PUT\",\n        headers: {\n          Authorization: `token ${GITHUB_TOKEN}`,\n          accept: \"application/vnd.github.v3+json\",\n        },\n        body: JSON.stringify({\n          // https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it\n          content: btoa(unescape(encodeURIComponent(md))),\n          message: `Added ${filename}`,\n        }),\n      }\n    );\n\n    if (!res.ok) {\n      const txt = await res.text();\n      show(txt);\n    }\n\n    const { content } = await res.json();\n\n    await $`open ${content.html_url}`;\n","url":"/code/scriptkit-script-to-plant-a-digital-seedling"},{"title":"ScriptKit script to upload images to Cloudflare Images","text":"---\ntitle: ScriptKit script to upload images to Cloudflare Images\ncreated: 2022-01-20\nstatus: budding\nurl: /code/scriptkit-script-to-upload-images-to-cloudflare-images\n---\n\n    import \"@johnlindquist/kit\";\n\n    const CLOUDFLARE_ACCOUNT_ID = await env(\"CLOUDFLARE_ACCOUNT_ID\");\n    const CLOUDFLARE_IMAGES_TOKEN = await env(\"CLOUDFLARE_IMAGES_TOKEN\");\n    const CLOUDFLARE_API_URL = `https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}`;\n    const formData = await npm(\"form-data\");\n\n    // Get the selected images\n    const files = await getSelectedFile();\n    const images = files.split(\"\\n\").map((filePath) => {\n      let extension = path.extname(filePath);\n      let originalFileName = path.basename(filePath);\n      return {\n        name: originalFileName,\n        path: filePath,\n        type: extension.replace(/^\\./, \"\"),\n      };\n    });\n\n    // Get the variants created for your cloudflare images\n    const variantsResponse = await fetch(\n      `${CLOUDFLARE_API_URL}/images/v1/variants`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${CLOUDFLARE_IMAGES_TOKEN}`,\n        },\n      }\n    );\n    const { result } = await variantsResponse.json();\n    const choices = Object.keys(result.variants).sort((a, b) => (a > b ? 1 : -1));\n    const variant = await arg(\"Which variant\", choices);\n\n    const uploads = [];\n    for (const { name, path, type } of images) {\n      if ([\"jpeg\", \"jpg\", \"png\", \"webp\", \"gif\"].indexOf(type) === -1) {\n        console.warn(`Invalid file. Should be an image file (jpg, png, webp, gif)`);\n        continue;\n      }\n\n      const file = await readFile(path);\n      const form = formData();\n      form.append(\"requireSignedURLs\", \"false\");\n      form.append(\"file\", file);\n\n      // Post the image to cloudflare\n      const res = await fetch(`${CLOUDFLARE_API_URL}/images/v1`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${CLOUDFLARE_IMAGES_TOKEN}`,\n        },\n        body: form,\n      });\n      const { result } = await res.json();\n      uploads.push({ result, name });\n    }\n\n    if (!uploads.length) {\n      exit(0);\n    }\n\n    // Get markdown for uploaded images\n    const markdown = uploads\n      .map(({ name, result }) => {\n        return `![${name}](${result.variants.find((x) =>\n          new RegExp(`${variant}$`).test(x)\n        )})`;\n      });\n\n    await copy(markdown.join('\\n'));\n    setHint(`Markdown copied to clipboard!`);\n    show(\n      `<main style=\"padding:8px\">\n        <h1>Markdown copied to clipboard!</h1>\n        ${markdown.map((i) => \"<div>\" + i + \"</div>\").join(\"\\n\")}\n      </main>`\n    );\n","url":"/code/scriptkit-script-to-upload-images-to-cloudflare-images"},{"title":"Flying","text":"---\ntitle: Flying\nurl: /flying\n---\n\nToday, I fly for fun. It takes a lot of study to stay current and proficient. Here are some of the resources I have found helpful to do so.\n\nA bit of background. Today I mostly fly a Beechcraft V35B Bonanza, which is a high performance/complex single-engine airplane.\n\n## Training providers\n\n*   [Pilot workshops](https://pilotworkshop.com/). They have quite a few different courses. I especially like their [IFR Mastery](https://pilotworkshop.com/products/ifr-mastery/) and [IFR The missing lesson](https://pilotworkshop.com/products/ifr-missing-lessons/) courses.\n*   [Sporty's all access training videos](https://generalaviationnews.com/2018/03/28/sportys-launches-all-access-membership/)\n\n## Aviation podcasts\n\n*   [Aviation news talk](https://aviationnewstalk.com/)\n*   [Podcasting on a plane](https://www.podcastingonaplane.com/)\n*   [Simple flight radio](http://www.simpleflight.net/)\n\n## YouTube channels\n\n*   [Martin Pauly](https://www.youtube.com/user/martinpauly)\n*   [Matt Guthmiller](https://www.youtube.com/channel/UC_YMUUbonlfzhah0HW4xGGg)\n\n## Associations\n\n*   [American Bonanza Society](https://www.bonanza.org/) (ABS) has some quality online training content as well as links to all the Bonanza pilot operating handbooks (POHs) and online forum. It is a yearly or lifetime membership, but well worth it for the online training content alone.\n\n## Training material\n\n*   [Lean of peak](/flying/lean-of-peak) operations\n","url":"/flying"},{"title":"Alamo Springs and Ridgeline Trail","text":"---\ntitle: Alamo Springs and Ridgeline Trail\ntype: Loop\ndistance: 15.4 miles\nelevationGain: 2762 ft\nfee: false\ndogs: true\ndifficulty: moderate\nurl: /hikes/alamo-springs-ridgeline\nlatitude:  32.475365\nlongitude: -111.091058\nlocation: Tucson, AZ\n---\n\nThis [loop trail](https://www.alltrails.com/trail/us/arizona/wild-mustang-to-wild-burro-to-ridgeline-to-alamo-springs) is part of the system behind the Tucson Ritz Carlton in the Tortolita Mountains.\n\nI did 13.8 miles of this 15.4 mile loop on a cool January morning. Found a crested sahuaro near the east end of the loop. I saw nine mountain bikers and zero hikers in the first 10 miles due to the early start. I finally saw some hikers coming the opposite direction on the loop once I was down in a more travelled part of the trail system.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_1640.jpg from 32.477603, -111.083769](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/19d0aba2-99b0-4138-c013-110211f7f700/330width)\n*   ![IMG\\_1642.jpg from 32.475844, -111.082747](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/58c47e1a-31f1-4cd9-1e46-a4015c245300/330width)\n*   ![IMG\\_1644.jpg from 32.479636, -111.072089](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2b84a616-d976-40d4-29f1-10d94ff03300/330width)\n*   ![IMG\\_1645.jpg from 32.481250, -111.070114](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1b4e5f74-1bc3-4ebe-711c-5c7412035400/330width)\n*   ![IMG\\_1646.jpg from 32.481256, -111.070114](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/fb189828-673b-4fdb-4de0-95557881fa00/330width)\n*   ![IMG\\_1649.jpg from 32.484669, -111.065047](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5e334dff-2bb3-4f1b-b449-dde0be37ca00/330width)\n*   ![IMG\\_1650.jpg from 32.484672, -111.065047](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/275196bf-3de9-426e-e8d1-5dd391f93400/330width)\n*   ![IMG\\_1652.jpg from 32.485531, -111.065064](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3ecf0d04-c69e-426d-3820-d3d2dcfba900/330width)\n*   ![IMG\\_1653.jpg from 32.488292, -111.065278](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/48d20f86-a970-46fb-e10b-b61e8cb05e00/330width)\n*   ![IMG\\_1654.jpg from 32.498019, -111.059447](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/dd939748-2465-4557-9251-48d606f39000/330width)\n*   ![IMG\\_1656.jpg from 32.496100, -111.052331](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/76438dfe-e7af-49a1-3117-8fea5755d500/330width)\n*   ![IMG\\_1658.jpg from 32.495906, -111.051917](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9e4f6e2e-ca8c-448c-4b65-2be3b56ac000/330width)\n*   ![IMG\\_1660.jpg from 32.495731, -111.043503](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/88a31c0c-5ca9-4b23-0256-589f48115600/330width)\n*   ![IMG\\_1661.jpg from 32.495728, -111.043503](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5505bd8a-bbb4-447e-61e5-9c96f5371c00/330width)\n*   ![IMG\\_1662.jpg from 32.495725, -111.043503](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/44ebe512-b1fc-4239-ad63-60c0074c5e00/330width)\n*   ![IMG\\_1665.jpg from 32.494914, -111.041100](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6cf8a9a7-bb16-4c7d-3ce1-e1f7540a0800/330width)\n*   ![IMG\\_1667.jpg from 32.496144, -111.038597](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/4e9354aa-366b-4c70-387e-d6b7ec470400/330width)\n*   ![IMG\\_1670.jpg from 32.507769, -111.040397](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f30a1aa8-6e5e-41ec-93ab-c406746dbe00/330width)\n*   ![IMG\\_1671.jpg from 32.507869, -111.041114](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9f4fadb0-4a80-4fd6-0213-77887e75df00/330width)\n*   ![IMG\\_1672.jpg from 32.507869, -111.041114](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/20f3b28f-d856-49c3-b29a-12cfa4504800/330width)\n*   ![IMG\\_1674.jpg from 32.507767, -111.041603](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/30048b3b-9653-44a2-80af-4ad127746a00/330width)\n*   ![IMG\\_1676.jpg from 32.507294, -111.049933](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/e5f10795-0bb1-485a-8de3-969d15615e00/330width)\n*   ![IMG\\_1678.jpg from 32.493042, -111.070153](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d88d77dc-59ff-4886-e293-3388d6620500/330width)\n*   ![IMG\\_1679.jpg from 32.492058, -111.070883](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9795201a-687e-44c6-fccb-423b7e3c4900/330width)\n*   ![IMG\\_1680.jpg from 32.489272, -111.071542](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9ced6ff0-59f9-4fb1-c26d-ae89743f4b00/330width)\n*   ![IMG\\_1683.jpg from 32.482236, -111.083594](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/81371bc0-a28f-4396-6ff3-da9fbb8b3000/330width)\n*   ![IMG\\_1684.jpg from 32.480706, -111.084694](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6a8a77be-ae51-4646-493c-b286e8e8be00/330width)\n*   ![IMG\\_1691.png](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cc7e4067-8161-4538-4bbb-fda2f0fec200/330width)\n","url":"/hikes/alamo-springs-ridgeline"},{"title":"Blackett's Ridge","text":"---\ntitle: Blackett's Ridge\ntype: Out and back\ndistance: 6 miles\nelevationGain: 1765 ft\nfee: true\ndogs: false\nfeeUrl: https://www.fs.usda.gov/recarea/coronado/recreation/recarea/?recid=80532\ndifficulty: hard\nurl: /hikes/blacketts-ridge\nlatitude: 32.309423\nlongitude: -110.822081\nlocation: Tucson, AZ\n---\n\nWe hiked [Blackett's Ridge](https://www.alltrails.com/trail/us/arizona/blacketts-ridge-trail) as a sunset hike with return via headlamp. We departed the main parking area for [Sabino Canyon](https://www.fs.usda.gov/recarea/coronado/recarea/?recid=80532) about an hour and fifteen minutes prior to sunset arriving just in time to view the sunset from the top.\n\nThis is a must do [hike](https://www.arizonahighways.com/explore/hiking/blacketts-ridge-trail) in the Tucson area during the winter. With ~1700 feet of elevation gain in three miles it can be quite strenuous and is considered a difficult hike per the guide books. I promise you it is worth the fantastic views of the Catalina mountains as well as the city of Tucson.\n\nNote: This is within a fee area of the [Coronado National Forest](https://www.fs.usda.gov/recarea/coronado/recarea/?recid=80532).\n\n<wb-map></wb-map>\n\n*   ![IMG\\_2443.PNG](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ab83f9c3-c701-4fa5-cfeb-a6f877994700/330width)\n*   ![IMG\\_2008.jpg from 32.324078, -110.796228](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d9511057-c4f5-4540-53a5-ad69b1abfc00/330width)\n*   ![IMG\\_2009.jpg from 32.324078, -110.796228](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/51c0eca0-d593-4b08-970a-17e8b3ec0700/330width)\n*   ![IMG\\_2010.jpg from 32.324078, -110.796228](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5778f5dc-ea49-4edf-fa4a-7a4306a09200/330width)\n*   ![IMG\\_2011.jpg from 32.324078, -110.796228](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d2e16369-9602-408b-6d3e-0f83310dad00/330width)\n*   ![IMG\\_2013.jpg from 32.324078, -110.796228](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/fa0f2c68-9fa9-43e8-1315-7ca83292af00/330width)\n*   ![IMG\\_2014.jpg from 32.324631, -110.793075](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d3596af7-515f-4f8c-5705-fd226b0c1c00/330width)\n*   ![IMG\\_2016.jpg from 32.324631, -110.793075](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a1be0718-1e98-4253-b367-3656fa633c00/330width)\n*   ![IMG\\_2017.jpg from 32.325283, -110.791458](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c25f1bf8-7a99-4b71-7d0c-9f138613c800/330width)\n*   ![IMG\\_2020.jpg from 32.325311, -110.791481](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/dacef11e-5ae7-435f-82dd-fdefd1ced900/330width)\n*   ![IMG\\_2022.jpg from 32.325275, -110.791664](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1be6c2bb-9f59-49fd-0085-3b902896b200/330width)\n*   ![IMG\\_2024.jpg from 32.325275, -110.791664](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/036a5034-e947-4709-224e-e92bf94a6800/330width)\n*   ![IMG\\_2025.jpg from 32.325275, -110.791664](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/00df5091-c9a6-48a6-5188-9329ea886500/330width)\n*   ![IMG\\_2027.jpg from 32.325275, -110.791664](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/4e7db857-f392-441c-5c24-188b688f6800/330width)\n*   ![IMG\\_2028.jpg from 32.325275, -110.791664](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/05cb2ad7-d0cd-40ef-ea0c-6e30124af700/330width)\n*   ![IMG\\_2030.jpg from 32.325325, -110.791511](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7b16c8a7-1fbd-44bd-ac56-70376869d400/330width)\n*   ![IMG\\_2034.JPG from 32.325303, -110.791467](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/76895535-086c-496c-d5c8-641ea5dc9500/330width)\n*   ![IMG\\_2053.JPG from 32.325281, -110.791389](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b5f140ee-434f-423f-a8bf-018ef61a4a00/330width)\n*   ![IMG\\_2064.jpg from 32.324919, -110.792000](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0cb7cd29-bef7-4bf5-c245-9f2cf99c2600/330width)\n*   ![IMG\\_2066.jpg from 32.324044, -110.796067](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c229639c-e5ae-4674-96b0-b8f7b5968c00/330width)\n*   ![IMG\\_2068.jpg from 32.321964, -110.801300](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6e190b3f-cc72-4c58-c013-7443c8bc1900/330width)\n*   ![IMG\\_2070.jpg from 32.321953, -110.801308](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/86bc8a33-c138-4330-1706-317693ae3900/330width)\n*   ![IMG\\_2080.JPG](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/8e876bc1-79ce-4362-5aa1-a481dde96700/330width)\n*   ![IMG\\_2106.JPG from 32.325325, -110.791511](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/8cf74243-d7cb-4f28-761b-7baf2861c800/330width)\n*   ![IMG\\_2442.PNG](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cc996e50-2dfa-4ac0-62ea-902997669a00/330width)\n","url":"/hikes/blacketts-ridge"},{"title":"Boynton Canyon","text":"---\ntitle: Boynton Canyon\ncreated: 2022-02-19\ncategory: hiking\ntype: Out and back\ndistance: 6.1 miles\nelevationGain: 810 ft\nfee: true\ndogs: true\ndifficulty: moderate\nurl: /hikes/boynton-canyon\nlatitude: 34.906395\nlongitude: -111.850473\nlocation: Sedona, AZ\n---\n\nThis is a popular [trail](https://www.alltrails.com/trail/us/arizona/boynton-canyon-trail) northwest of Sedona, AZ. During the winter months you may find parking limited at the trail head depending upon the time of day, but there is parking allowed along the road about ~2/10 of a mile away.\n\nFrom the same trail head you can also hike the [Boynton Vista trail](https://www.alltrails.com/trail/us/arizona/boyton-vortex-trail) which is only 1.1 miles.\n\nWe saw some interesting [web worms](https://en.wikipedia.org/wiki/Fall_webworm) (picture below).\n\nThe first part of the trail overlooks the [Enchantment Resort](https://www.enchantmentresort.com/).\n\n<wb-map></wb-map>\n\n*   ![IMG\\_3483.PNG](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6669bf72-4baf-4615-f583-159f24662000/330width)\n*   ![IMG\\_3409.jpeg from 34.910053, -111.849381](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/af3c45ba-0c1a-426b-85ad-56d1ed7c1300/330width)\n*   ![IMG\\_3411.jpeg from 34.911289, -111.849678](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c0f0000f-e782-46d1-053d-c8c5b4f56600/330width)\n*   ![IMG\\_3413.jpeg from 34.911494, -111.849617](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2b41f7c1-62f1-481e-8c12-7a80717ad000/330width)\n*   ![IMG\\_3414.jpeg from 34.914994, -111.850403](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/00402247-1cf1-4c35-5201-29143a801500/330width)\n*   ![IMG\\_3416.jpeg from 34.918153, -111.852944](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c879f9ed-8d44-4a6b-d048-9f87b71b1a00/330width)\n*   ![IMG\\_3417.jpeg from 34.918153, -111.852936](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f15a8957-c358-48be-a06c-319053977a00/330width)\n*   ![IMG\\_3419.jpeg from 34.927575, -111.864997](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/95c48bc0-e543-4e83-caa1-6556a0608a00/330width)\n*   ![IMG\\_3423.jpeg from 34.924053, -111.878136](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cae59375-edb5-4264-da8f-228457e8aa00/330width)\n*   ![IMG\\_3424.jpeg from 34.924044, -111.878136](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/270ded55-eb35-4923-f6c7-527ed5170f00/330width)\n*   ![IMG\\_3431.jpeg from 34.923875, -111.878311](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/60ccd1ad-1291-4ebd-ddbe-6db3a66db500/330width)\n*   ![IMG\\_3433.jpeg from 34.923675, -111.872528](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/78dbdf58-afd5-46d1-71d0-4c51d9afd600/330width)\n*   ![IMG\\_3436.jpeg from 34.913383, -111.850350](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/44675588-4af2-47bf-0c4a-37514bb3ee00/330width)\n*   ![IMG\\_3437.jpeg from 34.911828, -111.848183](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3f504071-4f92-4b92-b15e-43324db45100/330width)\n*   ![IMG\\_3438.jpeg from 34.911833, -111.848167](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1713366f-f9b2-41ad-494a-494667568200/330width)\n*   ![IMG\\_3439.jpeg from 34.911544, -111.848281](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/380cb700-c472-4ac6-a58b-2ac92a6a5f00/330width)\n*   ![IMG\\_3442.jpeg from 34.911561, -111.848206](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9e9385c1-5466-43fd-4fb4-6092cb92f700/330width)\n","url":"/hikes/boynton-canyon"},{"title":"Catalina State Park Loop","text":"---\ntitle: Catalina State Park Loop\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/catalina-state-park-loop\ntype: Loop\ndistance: 2.3 miles\nelevationGain: 173 ft\nfee: true\nfeeUrl: https://azstateparks.com/fee-schedule/\ndogs: true\ndifficulty: easy\nlatitude: 32.424678\nlongitude: -110.907366\nlocation: Tucson, AZ\n---\n\nThis loop at Catalina State Park is very popular and a great hike for smaller kids. There is often water, especially during wet years. This trail allows dogs and you will often see horses. It isn't as pretty since the Big Horn fire, but is still a great hike. There are often additional activities in the park on the weekends during the winter.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_5940.jpeg from 32.425925, -110.903122](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/414001e9-c7b9-4a66-689c-69a508cb1100/330width)\n*   ![IMG\\_5945.jpeg from 32.425647, -110.902161](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c938cb56-5a6e-4dcc-2123-432d3cc31500/330width)\n*   ![IMG\\_5947.jpeg from 32.425656, -110.902175](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/85dd1264-f479-414f-6ef5-a0670041f700/330width)\n*   ![IMG\\_5952.jpeg from 32.426900, -110.897544](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/4f98542b-82df-44d8-aa72-f1399167b800/330width)\n*   ![IMG\\_5958.jpeg from 32.428078, -110.896675](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a90df0d2-5fd5-43ca-e16a-beb16ebd0700/330width)\n*   ![IMG\\_5960.jpeg from 32.428008, -110.896653](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b96379d7-64ac-427a-a3e5-28d8c4383100/330width)\n*   ![IMG\\_5962.jpeg from 32.428006, -110.896644](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9392148e-7957-442e-833d-156e93593f00/330width)\n*   ![IMG\\_5968.jpeg from 32.429925, -110.894797](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/32a533cc-479e-4db7-6216-28ca758cd600/330width)\n*   ![IMG\\_5973.jpeg from 32.429808, -110.894692](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2de3e284-8246-4a9d-3fb2-9f526d2acb00/330width)\n*   ![IMG\\_5974.jpeg from 32.429808, -110.894692](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9b04c912-83e7-413c-5a9b-7e4011789400/330width)\n*   ![IMG\\_5979.jpeg from 32.430906, -110.896447](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7b28b3d1-e6c2-4a07-eee9-340fad8d0800/330width)\n*   ![IMG\\_5984.jpeg from 32.431381, -110.897064](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/66248943-1623-4da2-25a9-860b105cea00/330width)\n*   ![IMG\\_5986.jpeg from 32.431208, -110.901467](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/55ff22cd-7a29-4766-1a3c-508981dfed00/330width)\n*   ![IMG\\_5988.jpeg from 32.425378, -110.908281](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f143dab5-4e8f-4ea0-158f-ab78ff4f5e00/330width)\n*   ![IMG\\_5990.jpeg from 32.425378, -110.908281](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d43a7bec-ffe4-4570-e6dd-15e5b3172300/330width)\n","url":"/hikes/catalina-state-park-loop"},{"title":"Cave Creek Canyon","text":"---\ntitle: Cave Creek Canyon\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/cave-creek-canyon\ntype: Out and back\ndistance: 7.2 miles\nelevationGain: 2152 ft\nfee: false\ndogs: true\ndifficulty: moderate\nlatitude: 31.710101\nlongitude: -110.799501\nlocation: Sonoita, AZ\n---\n\nThis [trail](https://www.alltrails.com/trail/us/arizona/cave-creek-canyon-trail-149) has a lot of shade in the beginning while it is by the creek. This 1.5 to 2 mile section could be done year round. Once you reach the switchbacks and head towards the Florida saddle, I wouldn't recommend it in the summer unless you handle the heat well and have lots of water.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_9676.jpeg from 31.709161, -110.803467](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/79132c99-bf5e-4815-d6ad-3925da664b00/330width)\n*   ![IMG\\_2900.PNG](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/93643c6b-82dd-4f3a-4a93-95d3f9a9a700/330width)\n*   ![IMG\\_9621.jpeg from 31.709064, -110.801711](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/04b3d96d-cb2d-4684-d2ee-b088305f1800/330width)\n*   ![IMG\\_9624.jpeg from 31.711492, -110.810753](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/308c63fe-479f-4dc9-2b13-f2555700b400/330width)\n*   ![IMG\\_9628.jpeg from 31.711525, -110.811661](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0cfb3d73-e5be-4dca-75d7-c988513e1c00/330width)\n*   ![IMG\\_9630.jpeg from 31.714089, -110.825431](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3c44c6df-6a19-4924-560e-c9ad87a4b100/330width)\n*   ![IMG\\_9632.jpeg from 31.714103, -110.825456](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/479b6e2f-e3ea-4c45-dc1f-5aa4f15ba400/330width)\n*   ![IMG\\_9633.jpeg from 31.714206, -110.825622](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/72c3bcf2-7283-47fb-f9b0-7415a8bfca00/330width)\n*   ![IMG\\_9635.jpeg from 31.714664, -110.826417](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c58a7924-850c-4f7c-7206-1fdbec82b000/330width)\n*   ![IMG\\_9637.jpeg from 31.719344, -110.833258](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/98c1e06f-ee8b-4922-c6d1-b07b3f6b5400/330width)\n*   ![IMG\\_9646.jpeg from 31.722733, -110.838006](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cd0a0cb1-2687-482b-5e52-717b20a68300/330width)\n*   ![IMG\\_9649.jpeg from 31.723450, -110.839158](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7d06a6e3-ef89-4b52-5d02-157e557d1e00/330width)\n*   ![IMG\\_9675.jpeg from 31.722728, -110.836678](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/038187d8-983d-414d-5c8b-db80a6510e00/330width)\n","url":"/hikes/cave-creek-canyon"},{"title":"Devil's Bridge","text":"---\ntitle: Devil's Bridge\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/devils-bridge\ntype: Out and back\ndistance: 3.9 miles\nelevationGain: 521 ft\nfee: false\ndogs: true\ndifficulty: moderate\nlatitude: 34.887838\nlongitude: -111.822567\nlocation: Sedona, AZ\n---\n\nThis is a very popular out and back [trail](https://www.alltrails.com/trail/us/arizona/devils-bridge-trail) in the Sedona, AZ area. This is the largest natural bridge in the [Coconino National Forest](https://www.fs.usda.gov/coconino/). You will often need to park quite a ways from the actual trail head and will encounter numerous hikers even during the warmer months. The hike is easy except for the last ~2/10 of a mile to the bridge where it is moderate. The bridge itself is great for pictures and is much wider than the pictures make it look.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_3331.jpg from 34.901650, -111.811836](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b77ac167-1f2c-45f7-ad8b-a04f18fa9200/330width)\n*   ![IMG\\_3332.jpg from 34.901644, -111.811822](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/454c2f95-91bd-4284-dbbc-3ba851bc4200/330width)\n*   ![IMG\\_3337.jpg from 34.900219, -111.808517](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d9d38bfe-708e-4cd4-eb0a-9bbc4e285200/330width)\n*   ![IMG\\_3339.jpg from 34.898525, -111.808319](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9965fa68-14db-4470-69b4-977f85491300/330width)\n*   ![IMG\\_3342.jpg from 34.897964, -111.808297](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/56a102b1-18e8-4844-686d-32e65f98d700/330width)\n*   ![IMG\\_3343.jpg from 34.898025, -111.808594](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/268bd0aa-e9e5-4d71-2499-bebf52a19700/330width)\n*   ![IMG\\_3349.jpg from 34.897450, -111.807617](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/58263b58-2ae7-406c-c409-2981a0795a00/330width)\n*   ![IMG\\_3350.jpg from 34.897453, -111.807625](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6174b858-fec2-42ff-556f-27280098f100/330width)\n*   ![IMG\\_3481.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/bfee9672-f342-4706-1245-31cfc74c5000/330width)\n*   ![IMG\\_8961.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/bd522807-e3a2-4ed3-250b-8e51bb04ed00/330width)\n*   ![IMG\\_8962.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c537aee3-1f1b-4ed5-663a-2cbe7a0c6700/330width)\n*   ![IMG\\_8964.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/6c1a0f96-f767-4aa7-41b0-f2518f30bc00/330width)\n","url":"/hikes/devils-bridge"},{"title":"Madera Canyon","text":"---\ntitle: Madera Canyon\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/madera-canyon\ntype: Out and back\ndistance: 4.5 miles\nelevationGain: 1666 ft\nfee: true\nfeeUrl: https://www.fs.usda.gov/detail/coronado/passes-permits/recreation/?cid=fswdev7_018712\ndogs: true\ndifficulty: moderate\nlatitude: 31.726988\nlongitude: -110.880819\nlocation: Green Valley, AZ\n---\n\nI've hiked a few different trails here including the [Josephine saddle](https://www.alltrails.com/trail/us/arizona/josephine-saddle-madera-canyon-trail) and the [Vault mine loop](https://www.alltrails.com/trail/us/arizona/vault-mine-loop) trail. Depending upon the time of year/day of the week parking can be difficult as it is somewhat limited.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_2530.jpg from 31.709586, -110.875603](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/65d10c44-aeb3-4ecf-09d5-323819a34300/330width)\n*   ![IMG\\_2854.jpg from 31.706653, -110.869203](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/06b625ce-e202-46dc-6fb4-023445b8f700/330width)\n*   ![IMG\\_2855.jpg from 31.703247, -110.867692](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/27f0a32f-72f2-45fb-953b-37b9e5cba200/330width)\n*   ![IMG\\_2857.jpg from 31.702800, -110.867919](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a627c71c-fb8b-470c-19cb-e3bbcc773700/330width)\n*   ![IMG\\_2858.jpg from 31.699925, -110.866767](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a03429e0-d6d1-43dc-b75f-1b06b45b1300/330width)\n*   ![IMG\\_2864.jpg from 31.693867, -110.860925](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/32cf4101-c928-4dea-3417-d022ff8ea900/330width)\n*   ![IMG\\_2865.jpg from 31.693822, -110.860969](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/8c775392-c957-4f86-4e46-e03da7caad00/330width)\n*   ![IMG\\_2866.jpg from 31.693822, -110.860978](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5cffe829-97d4-4d0f-9d00-bf356143ef00/330width)\n*   ![IMG\\_2867.jpg from 31.693194, -110.861442](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/242a1f58-554d-430e-29d1-149fe195c700/330width)\n*   ![IMG\\_2872.jpg from 31.692372, -110.861778](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0fab08c1-2939-49b6-94b4-59d49d2e9a00/330width)\n*   ![IMG\\_2877.jpg from 31.692381, -110.861817](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c9bf025e-542a-4d6c-deb7-5ef03903a500/330width)\n*   ![IMG\\_2898.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/26a81e2c-a7f2-4f59-99b2-6551aeb66500/330width)\n*   ![IMG\\_7434.jpg from 31.707319, -110.875983](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7fa2215e-9d05-4b9e-4187-7ee8f10ffd00/330width)\n*   ![IMG\\_7437.jpg from 31.706469, -110.876311](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/fedcf395-ed52-476f-5b8d-b9f5fcf4b200/330width)\n*   ![IMG\\_7438.jpg from 31.702611, -110.876144](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/fbac60e0-30b8-4914-6430-7661c9117200/330width)\n*   ![IMG\\_7439.jpg from 31.699342, -110.876167](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2b02fa3d-d1cb-4c3d-e38b-f206bcd1f700/330width)\n*   ![IMG\\_7440.jpg from 31.698833, -110.874353](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/522bc03a-86ec-48bc-a54c-1fe5e11bcb00/330width)\n*   ![IMG\\_7442.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/17a50127-a92a-470a-4f04-4fcdea997100/330width)\n*   ![IMG\\_7445.jpg from 31.697289, -110.873672](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/72b212ca-ef30-4df9-1ae6-00f558998600/330width)\n*   ![IMG\\_7446.jpg from 31.697250, -110.873764](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3407f07d-e6bb-4665-d24c-3dd5ab316000/330width)\n*   ![IMG\\_7456.jpg from 31.697067, -110.874169](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1078e688-83b6-4a4f-ec16-db6864e42a00/330width)\n*   ![IMG\\_7458.jpg from 31.713183, -110.875122](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/8b8cf94c-ad42-475f-e327-5bb0cbd37000/330width)\n","url":"/hikes/madera-canyon"},{"title":"Montrose Pools","text":"---\ntitle: Montrose Pools\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/montrose-pools\ntype: Out and back\ndistance: ~2 miles\nelevationGain: 300 ft\nfee: true\ndogs: false\ndifficulty: easy\nlatitude: 32.425338\nlongitude: -110.908324\nlocation: Tucson, AZ\n---\n\nMontrose pools is accessible from Catalina State Park. We were lucky there was water to play in when we hiked this in April of 2020.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_7095.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/aa5bfa80-23a7-41cb-eeb6-77f794e85300/330width)\n*   ![IMG\\_7042.jpg from 32.425869, -110.900750](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/632c0409-b8a3-4d47-1907-21185f4f2600/330width)\n*   ![IMG\\_7053.jpg from 32.421661, -110.894272](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/696e6408-5c41-401a-4b5a-61bc8c06b800/330width)\n*   ![IMG\\_7058.jpg from 32.421628, -110.894311](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cc85ec5e-6da3-4078-8cac-4ab7a4908e00/330width)\n*   ![IMG\\_7062.jpg from 32.420850, -110.893989](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/e5f58dbe-95c5-41fb-8601-c88c6169af00/330width)\n*   ![IMG\\_7069.jpg from 32.421561, -110.892783](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f7fcb2c0-58f8-4536-3bc2-0ef1a2d84e00/330width)\n*   ![IMG\\_7071.jpg from 32.421964, -110.894211](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9dbba005-5968-4ca2-89bc-33db5e02c800/330width)\n*   ![IMG\\_7072.jpg from 32.421764, -110.894364](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/683d68ef-d274-431c-d775-a39645608e00/330width)\n*   ![IMG\\_7076.jpg from 32.421786, -110.894883](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b4b27c1f-1881-4865-0182-b6a25692c600/330width)\n*   ![IMG\\_7080.jpg from 32.422183, -110.895417](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a2345e77-f795-4660-50ef-eed9d84cbf00/330width)\n","url":"/hikes/montrose-pools"},{"title":"Pima Canyon","text":"---\ntitle: Pima Canyon\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/pima-canyon\ntype: Out and back\ndistance: 10.1 miles\nelevationGain: 3339 ft\nfee: false\ndogs: false\ndifficulty: moderate\nlatitude: 32.353415\nlongitude: -110.947756\nlocation: Tucson, AZ\n---\n\nI first hiked part of this 10.1 mile out and back trail during the Spring of 2020 prior to the Bighorn fire.\n\nThe highlight of this hike was seeing a [Gila Monster](https://animals.sandiegozoo.org/animals/gila-monster).\n\n<wb-map></wb-map>\n\n*   ![IMG\\_2445.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/76119832-d7a4-41ec-f419-ab8b6a4bdd00/330width)\n*   ![IMG\\_7349.jpg from 32.357575, -110.933808](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1aae0684-b2f6-4747-dbd4-2826d10e2700/330width)\n*   ![IMG\\_7357.jpg from 32.357461, -110.933747](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b81dca61-a886-420f-c382-d2a39f964b00/330width)\n*   ![IMG\\_7361.jpg from 32.357414, -110.933875](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2e6c7553-c090-40ab-e6de-14001b671500/330width)\n*   ![IMG\\_7363.jpg from 32.359050, -110.932647](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a79d2bc9-6f8c-40ab-fa6b-1ee76df28600/330width)\n*   ![IMG\\_7364.jpg from 32.359317, -110.931000](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3bbd97ab-e925-4da4-a7de-cb341a093800/330width)\n*   ![IMG\\_7367.jpg from 32.361725, -110.927217](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/dcd62466-7c7c-4bbe-976a-9274d35bae00/330width)\n*   ![IMG\\_7374.jpg from 32.363583, -110.918547](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5d67b3f0-1bd0-4e73-fb16-8e64fe1b6600/330width)\n*   ![IMG\\_7377.jpg from 32.363664, -110.918419](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/69a62579-7f4a-4cac-e453-3ef01e74eb00/330width)\n*   ![IMG\\_7380.jpg from 32.365567, -110.916572](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/abf886a6-8e94-4eb4-d273-d049507f6700/330width)\n*   ![IMG\\_7381.jpg from 32.356889, -110.936408](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/376b95cc-75f0-4ff6-6c8f-15f68cd9c700/330width)\n","url":"/hikes/pima-canyon"},{"title":"Hiking","text":"---\ntitle: Hiking\nurl: /hikes\n---\n\n<wb-map url=\"/hikes/hikes.geojson\"></wb-map>\n\n### Green Valley, AZ\n\n| Name                                     | Type         | Difficulty | Distance  | Elevation Gain | Fee | Dogs |\n| ---------------------------------------- | ------------ | ---------- | --------- | -------------- | --- | ---- |\n| [Madera Canyon](/hikes/madera-canyon.md) | Out and back | MODERATE   | 4.5 miles | 1666 ft        | Yes | Yes  |\n\n### Sedona, AZ\n\n| Name                                       | Type         | Difficulty | Distance  | Elevation Gain | Fee | Dogs |\n| ------------------------------------------ | ------------ | ---------- | --------- | -------------- | --- | ---- |\n| [Boynton Canyon](/hikes/boynton-canyon.md) | Out and back | MODERATE   | 6.1 miles | 810 ft         | Yes | Yes  |\n| [Devil's Bridge](/hikes/devils-bridge.md)  | Out and back | MODERATE   | 3.9 miles | 521 ft         | No  | Yes  |\n| [West Fork](/hikes/west-fork.md)           | Out and back | MODERATE   | 6.5 miles | 567 ft         | Yes | Yes  |\n\n### Sonoita, AZ\n\n| Name                                             | Type         | Difficulty | Distance  | Elevation Gain | Fee | Dogs |\n| ------------------------------------------------ | ------------ | ---------- | --------- | -------------- | --- | ---- |\n| [Cave Creek Canyon](/hikes/cave-creek-canyon.md) | Out and back | MODERATE   | 7.2 miles | 2152 ft        | No  | Yes  |\n\n### Tucson, AZ\n\n| Name                                                                   | Type         | Difficulty | Distance   | Elevation Gain | Fee | Dogs |\n| ---------------------------------------------------------------------- | ------------ | ---------- | ---------- | -------------- | --- | ---- |\n| [Alamo Springs and Ridgeline Trail](/hikes/alamo-springs-ridgeline.md) | Loop         | MODERATE   | 15.4 miles | 2762 ft        | No  | Yes  |\n| [Blackett's Ridge](/hikes/blacketts-ridge.md)                          | Out and back | HARD       | 6 miles    | 1765 ft        | Yes | No   |\n| [Catalina State Park Loop](/hikes/catalina-state-park-loop.md)         | Loop         | EASY       | 2.3 miles  | 173 ft         | Yes | Yes  |\n| [Montrose Pools](/hikes/montrose-pools.md)                             | Out and back | EASY       | ~2 miles   | 300 ft         | Yes | No   |\n| [Pima Canyon](/hikes/pima-canyon.md)                                   | Out and back | MODERATE   | 10.1 miles | 3339 ft        | No  | No   |\n| [Wasson Peak](/hikes/wasson-peak.md)                                   | Out and back | HARD       | 9.3 miles  | 2093 ft        | Yes | No   |\n","url":"/hikes"},{"title":"Wasson Peak","text":"---\ntitle: Wasson Peak\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/wasson-peak\ntype: Out and back\ndistance: 9.3 miles\nelevationGain: 2093 ft\nfee: true\nfeeUrl: https://www.nps.gov/sagu/planyourvisit/ways-to-pay-fees.htm\ndogs: false\ndifficulty: hard\nlatitude: 32.288814\nlongitude: -111.121357\nlocation: Tucson, AZ\n---\n\nThis was a beautiful [hike](https://www.alltrails.com/trail/us/arizona/wasson-peak-via-sweetwater-trail) with amazing views of the valleys around Tucson in all directions. I would recommend this hike for late October through the end of March only as there is little shade. This is definitely a start early and take lots of water hike.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_1485.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/eb8ba5db-2623-412c-eede-51a011ed8400/330width)\n*   ![IMG\\_0742.jpg from 32.286522, -111.123139](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/2fa323b8-550a-4533-8055-09a0af6c0e00/330width)\n*   ![IMG\\_0744.jpg from 32.283956, -111.124000](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/98316212-06d7-4172-e048-10ff8eee0400/330width)\n*   ![IMG\\_0747.jpg from 32.282453, -111.126503](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3f7a869e-01e7-4f79-5bf8-e2da1c259e00/330width)\n*   ![IMG\\_0748.jpg from 32.278422, -111.125367](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/63e6d800-850b-4605-143f-1335ed198800/330width)\n*   ![IMG\\_0749.jpg from 32.277247, -111.122764](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0be4e7d5-97bc-44f2-b0b9-af242bef3900/330width)\n*   ![IMG\\_0750.jpg from 32.274608, -111.123764](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c5087443-8e4c-4380-f1d8-601a2524ce00/330width)\n*   ![IMG\\_0752.jpg from 32.269178, -111.130797](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ceb70514-f6ca-4df5-e758-4dfa86d33600/330width)\n*   ![IMG\\_0753.jpg from 32.269181, -111.130814](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/31792381-3649-4e2c-adab-9cc598b58900/330width)\n*   ![IMG\\_0755.jpg from 32.268694, -111.134331](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/609de239-70b5-42bd-ddcb-777298d91300/330width)\n*   ![IMG\\_0757.jpg from 32.267281, -111.139617](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1235e88e-8224-46ac-e496-cb29f180a500/330width)\n*   ![IMG\\_0758.jpg from 32.266861, -111.140281](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3efb0b06-2655-44fb-8576-696beb690600/330width)\n*   ![IMG\\_0761.jpg from 32.265414, -111.142839](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/be35527a-69b0-44d8-fb1f-67e87a925200/330width)\n*   ![IMG\\_0763.jpg from 32.265414, -111.142839](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/75cde0fc-7e70-4da1-5717-8d25434b1d00/330width)\n*   ![IMG\\_0764.jpg from 32.265472, -111.143044](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/e033a86b-8e8d-45be-6c0e-420f5e776500/330width)\n*   ![IMG\\_0768.jpg from 32.268281, -111.145578](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cf254e91-2560-42ef-1cf3-66fc95bc6d00/330width)\n*   ![IMG\\_0770.jpg from 32.269333, -111.148072](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/d637aad1-36ef-4122-5547-b47ed4ad5f00/330width)\n*   ![IMG\\_0771.jpg from 32.269325, -111.148072](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b4b9b061-7259-4b35-18e9-93e4e01f1700/330width)\n*   ![IMG\\_0773.jpg from 32.269356, -111.148261](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/02f118df-6b38-4082-8d73-376591f3fb00/330width)\n*   ![IMG\\_0852.jpg from 32.269322, -111.148300](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ac2432fd-48af-4ac2-83d9-94b4e7273f00/330width)\n*   ![IMG\\_0853.jpg from 32.271389, -111.149833](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/fb2ea316-95a1-4301-2163-a115aa676e00/330width)\n*   ![IMG\\_0854.jpg from 32.271756, -111.149642](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f5a6bc76-3aac-4cfe-cf82-87577a61e400/330width)\n*   ![IMG\\_0856.jpg from 32.273006, -111.147317](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/8b16cffe-2ef9-46cc-2ab8-180c229f8800/330width)\n*   ![IMG\\_0858.jpg from 32.273492, -111.146386](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0257cf2c-effd-41b4-7ff0-ade007d5d400/330width)\n*   ![IMG\\_0859.jpg from 32.273486, -111.146386](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c1521640-671b-4187-a6e7-9695aa719900/330width)\n*   ![IMG\\_0860.jpg from 32.273486, -111.146386](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7ea5d941-aeb0-4192-b6a0-573c663a5c00/330width)\n*   ![IMG\\_0861.jpg from 32.273319, -111.146872](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/97d6ea8f-a7c0-4df8-148b-7086da8d3900/330width)\n*   ![IMG\\_0863.jpg from 32.273328, -111.146872](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/91f0466b-46d8-4305-e2a0-e7724ec60d00/330width)\n*   ![IMG\\_0870.jpg from 32.273000, -111.146933](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f507c89b-8054-4f4d-3819-2512baa7f900/330width)\n*   ![IMG\\_0871.jpg from 32.273000, -111.146933](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b5a4b047-f33c-473e-b5e8-9d8dd23e2400/330width)\n*   ![IMG\\_0872.jpg from 32.268097, -111.137681](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3f3626b5-fec3-4705-7814-969fb8a2c700/330width)\n*   ![IMG\\_0873.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a91dc5d3-7b1d-40c2-15e2-062774f41700/330width)\n*   ![IMG\\_1404.jpg from 32.282578, -111.125739](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9a29f3ba-a7ba-4c81-dccd-e7597a77b600/330width)\n*   ![IMG\\_1405.jpg from 32.268914, -111.132194](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/003681cf-355c-47ae-51f0-1ab7d9353600/330width)\n*   ![IMG\\_1406.jpg from 32.269169, -111.134225](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7f6a9e5e-f5bb-4da9-17c0-a69499a7ee00/330width)\n*   ![IMG\\_1407.jpg from 32.265489, -111.142967](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ee240705-22f6-442c-cdaf-9705807fa300/330width)\n*   ![IMG\\_1409.jpg from 32.265519, -111.142922](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/e1659032-ea25-407c-931b-e1bf3d6e0300/330width)\n*   ![IMG\\_1410.jpg from 32.269131, -111.148078](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/eed1c9c6-ac86-45a3-acaf-5c6c6e76fb00/330width)\n*   ![IMG\\_1411.jpg from 32.269133, -111.148072](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/cbd60dcb-235d-4b3e-4e00-8a7744d8ed00/330width)\n*   ![IMG\\_1412.jpg from 32.273303, -111.146903](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7419b85d-ccd8-4334-dd8c-972de6a69c00/330width)\n*   ![IMG\\_1413.jpg from 32.273300, -111.146903](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/84dd7b39-a4fa-4411-7af9-0f1d65f76900/330width)\n*   ![IMG\\_1414.jpg from 32.273300, -111.146903](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/e05748ce-206f-494d-2c78-2000ffbee000/330width)\n*   ![IMG\\_1415.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/679e3e56-3f3c-493e-0681-a33af28d3a00/330width)\n*   ![IMG\\_1466.jpg from 32.289097, -111.119575](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0c6169f0-660d-4042-4944-4150992f3700/330width)\n*   ![IMG\\_1468.jpg from 32.288750, -111.121261](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a2476185-2b1d-426d-7316-4e3c65087400/330width)\n*   ![IMG\\_1469.jpg from 32.288750, -111.122506](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/276987b5-96ed-4b97-2d9d-540179e3e600/330width)\n*   ![IMG\\_1473.jpg from 32.267394, -111.145417](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3d643702-04cf-42da-9313-9bac80771b00/330width)\n*   ![IMG\\_1475.jpg from 32.273486, -111.146400](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3045e897-4728-4c21-fe1d-28d5934ced00/330width)\n*   ![IMG\\_1476.jpg from 32.273492, -111.146408](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/63347acf-5cf8-41ad-d059-d2aa6359bb00/330width)\n*   ![IMG\\_1477.jpg from 32.273486, -111.146408](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0241a03c-6d5d-49e4-32a8-d90c8e2b5700/330width)\n*   ![IMG\\_1478.jpg from 32.273272, -111.147111](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ee078ce9-b833-4863-d182-5854072a9500/330width)\n*   ![IMG\\_1479.jpg from 32.273272, -111.147111](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/503ed43a-e2f9-4f00-a644-18dd364f2200/330width)\n*   ![IMG\\_1480.jpg from 32.273144, -111.146706](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/efaa1589-7bb8-4117-d34c-173fb3798300/330width)\n*   ![IMG\\_1482.jpg from 32.273144, -111.146706](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/3feedd6d-cb17-4472-cfbf-35913260d200/330width)\n*   ![IMG\\_1483.jpg from 32.288669, -111.122519](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/0ada40d8-8514-416f-4da5-3840da492d00/330width)\n","url":"/hikes/wasson-peak"},{"title":"West Fork","text":"---\ntitle: West Fork\ncreated: 2022-02-19\ncategory: hikes\nurl: /hikes/west-fork\ntype: Out and back\ndistance: 6.5 miles\nelevationGain: 567 ft\nfee: true\ndogs: true\ndifficulty: moderate\nlatitude: 34.995056\nlongitude: -111.737095\nlocation: Sedona, AZ\n---\n\nThis is a beautiful [trail](https://www.alltrails.com/trail/us/arizona/west-fork-trail) northeast of Sedona just off 89A in Oak Creek Canyon. The trail is very well shaded and could be hiked year round. You will cross the creek a total of 26 times (out and back). It would be a great hike for kids who want to play in the water during the warmer months.\n\n<wb-map></wb-map>\n\n*   ![IMG\\_3364.jpg from 34.991292, -111.735847](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/648ed397-5c03-4410-9de4-026ff995fc00/330width)\n*   ![IMG\\_3366.jpg from 34.990417, -111.741744](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/9af4dda6-e05e-419b-6e43-737ada939c00/330width)\n*   ![IMG\\_3367.jpg from 34.990658, -111.743836](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/a1c27f45-92d5-498e-661b-a1f74e28d900/330width)\n*   ![IMG\\_3370.jpg from 34.988297, -111.746192](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/349a53ea-067a-4dc7-c4a9-dd17fc658700/330width)\n*   ![IMG\\_3371.jpg from 34.988011, -111.746400](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/83bfdb86-e577-427e-b5a4-79c30f65c800/330width)\n*   ![IMG\\_3374.jpg from 34.996250, -111.749083](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1166a7f9-fa2a-4c2e-1bbb-ab98ad6bfc00/330width)\n*   ![IMG\\_3376.jpg from 34.999325, -111.755653](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/b6a0d01c-becb-4658-00bc-4e4c0a3e8d00/330width)\n*   ![IMG\\_3378.jpg from 34.999297, -111.756767](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ad76c195-d9bd-4b35-3082-8c34e01c5a00/330width)\n*   ![IMG\\_3387.jpg from 34.998669, -111.760833](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/311e58c9-f65e-410f-901c-ae4789f61e00/330width)\n*   ![IMG\\_3395.jpg from 35.002681, -111.760492](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/bcd885fe-4f8a-41e7-4ac9-3cb6626d3500/330width)\n*   ![IMG\\_3398.jpg from 35.002189, -111.763275](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/68db7f3d-eb6c-45ff-d663-23c7b676ce00/330width)\n*   ![IMG\\_3399.jpg from 35.002242, -111.764739](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/c7d5e8ad-42a6-41ee-f950-926ad7e50200/330width)\n*   ![IMG\\_3403.jpg from 35.004356, -111.766006](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/491cadf6-5639-4c59-019b-d5f8d78de700/330width)\n*   ![IMG\\_3407.jpg from 35.001903, -111.760100](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/45fbe3fe-2cfb-41f7-844a-34ca5773ff00/330width)\n*   ![IMG\\_3482.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/dee29b99-b212-4806-3731-b89aa86d5e00/330width)\n*   ![IMG\\_9012.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/7568b7fb-ebf9-4ae0-9daf-5a94288d5d00/330width)\n*   ![IMG\\_9018.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/1b78b4f1-0e95-4399-cfa7-afdb761f7600/330width)\n*   ![IMG\\_9019.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5814d05f-350f-4f2f-163d-64b59fdd0b00/330width)\n*   ![IMG\\_9027.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/f5a617db-e8ce-45be-ec81-6d7978e5c300/330width)\n*   ![IMG\\_9030.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/4c41d95a-c29a-4e55-8da2-90f5060edf00/330width)\n*   ![IMG\\_9031.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/5098f361-a254-4fd1-c6dd-0560d2c10a00/330width)\n*   ![IMG\\_9032.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/eda73346-4dc3-4e73-0a94-d2dedf83e200/330width)\n*   ![IMG\\_9034.jpg](https://imagedelivery.net/jUwSKjsiLWz8U8lfkVW6uQ/ef420a93-d72e-46f8-fc12-8dbe290a0b00/330width)\n","url":"/hikes/west-fork"},{"title":"Black Beans","text":"---\ntitle: Black Beans\ncreated: 2022-01-24\nstatus: evergreen\ncuisine: Mexican\nurl: /recipes/black-beans\n---\n\n## Introduction\n\nChipotle copycat black bean recipe from\nhttps://thecarefreekitchen.com/chipotle-black-beans-copycat-recipe/\n\n## Ingredients\n\n*   1 lb Dried Black Beans or 4 cans black beans\n*   Water only necessary if using dry beans\n*   2 tablespoons Avocado Oil\n*   2 cups Onions white or yellow, diced\n*   6 cloves Garlic minced (about 2 tablespoons)\n*   1 tsp Dried Oregano\n*   1 tsp Chili Powder\n*   1 pinch Cayenne Pepper\n*   1 tsp Cumin\n*   2 tsp Salt\n*   2 large Bay Leaves\n*   1 medium Lime juiced, for serving\n\n## Instructions\n\n*   Pour dried beans into a large bowl and sort out the broken beans. Rinse, drain\n    and add to a large pot. Cover with cool water about 1\" above the beans. Place\n    a lid on the pot and bring to a boil. Reduce to a simmer and cook for about 2\n    hours, or until the beans are soft. (Note: if using canned beans, you can skip\n    this step)\n*   In a large pot, add the avocado oil and heat over medium heat. Add the minced\n    onions and sauté until golden brown, or about 5-7 minutes. Add minced garlic\n    and cook until garlic is soft and tender, or about 2 more minutes.\n*   Next, add in the cooked (or canned) black beans, oregano, chili powder,\n    cayenne pepper, cumin, salt and a bay leaf or two. Add water until the beans\n    are barely covered and continue to cook on medium heat for 30 minutes, or\n    until most of the water has evaporated and beans are tender.\n*   Remove from the heat and remove the bay leaves. Squeeze lime juice into the\n    beans and serve immediately as a side dish or in burritos, tacos, quesadillas,\n    salads or nachos. Enjoy!\n","url":"/recipes/black-beans"},{"title":"Chile Colorado","text":"---\ntitle: Chile Colorado\ncreated: 2022-01-21\nstatus: evergreen\ncuisine: Mexican\nurl: /recipes/chile-colorado\n---\n\n## Introduction\n\nChile colorado is great by itself, with fresh [flour tortillas](/recipes/flour-tortillas.md) or with a fried egg in the morning.\n\n## Ingredients\n\n*   6 cups of chicken stock\n*   4 to 6 dried guajillo chiles, with stems removed\n*   2 to 4 dried ancho or pasilla chiles, stems removed\n*   2 to 3 pounds of pork sirloin, cut in 1 inch to 3/4 inch cubes\n*   1 large yellow onion, diced\n*   1 red bell pepper, diced\n*   6 cloves of garlic, chopped\n*   1 carrot, diced\n*   2 teaspoons of cumin\n*   1 teaspoon of dried *Mexican* oregano\n*   1 teaspoon of ground *Mexican* cinnamon (canela)\n*   3 bay leaves\n*   Canola oil\n*   Salt and pepper\n\n## Equipment\n\n*   Sauce pan\n*   Dutch oven\n*   Vitamix/Blender\n*   Kitchen knife and cutting board\n*   Plastic wrap\n\n## Instructions\n\n*   Bring two cups of chicken stock to a boil\n*   Toast the peppers\n*   Remove the chicken stock from the stove\n*   Add the pepper to the chicken stock and cover with plastic wrap\n*   Let peppers sit in the chicken stock covered for at least 30 minutes\n*   Season the pork chunks with salt and pepper\n*   Pre-heat the oven to 370 degrees Fahrenheit\n*   Heat two tablespoons of the canola oil in a large dutch oven or pot until shimmering\n*   Add the pork in batches to brown\n*   Once the pork as been browned, set it aside and add the onion, carrots, bell pepper to the pot and cook until it starts to soften.\n*   Stir frequently\n*   Add the garlic, cumin, oregano and cinnamon to the pot\n*   Optionally you can take the contents of the pot at this point and run it through the blender if you want a smother sauce.\n*   Add the pork and remaining chicken stock back to the pot\n*   Add the bay leaves\n*   Cover the dutch oven and put it in the oven for 2 to 2 and half hours\n*   At this point you should be able blend the peppers and their chicken stock until smooth\n*   Optionally run the mixture through a wire strainer for a smother sauce\n*   After about an hour of cooking I add the chile sauce to the dutch oven and stir\n*   Check the meat for tenderness at around 2 hours and adjust time as necessary\n\n## Hints\n\n*   You can substitute fresh pablano for dried ancho. Just add with the onion and carrots.\n*   Serve with queso fresco and cilantro on top\n*   You can make enchilada sauce in advance and store in mason jars (fridge) and use instead of making the pepper mixture.\n","url":"/recipes/chile-colorado"},{"title":"Chile Morita Salsa","text":"---\ntitle: Chile Morita Salsa\ncreated: 2022-01-25\ncuisine: Mexican\nurl: /recipes/chile-morita-salsa\n---\n\n## Introduction\n\nA family friend introduced us to chile morita. It is a chipotle pepper (red jalapeño) that has been smoked/dried. Locally we can get them from Food City but I am sure they are available online. Like any dried chile you want to make sure they are not too brittle. Their texture should be close to a raisin. This salsa is great for chips and salsa as well as on top of shredded meat tacos, burritos or tostadas due to its slightly smoky flavor.\n\nAt some point when red jalapeños are on sale, I want to try smoking/drying them myself.\n\n## Ingredients\n\n*   2 chile morita\n*   2 fifteen ounce cans of diced tomatoes\n*   3 to 4 fresh serrano chiles\n*   1/2 large sweet yellow onion\n*   2 to 4 cloves of unpeeled garlic\n*   1 bunch of washed cilantro with large stems removed\n*   1 to 2 teaspoons of kosher salt\n*   Canola oil spray\n\n## Equipment\n\n*   Sauce pan\n*   Baking sheet\n*   Tin foil\n*   Vitamix/Blender\n*   Storage container or serving bowl\n\n## Instructions\n\n*   Add 2 cups of water and the chile morita to a small sauce pan and bring to a boil\n*   Boil for 5 to 8 minutes and then cut flame and let peppers cool in the water\n*   While water is coming to a boil, line a backing sheet with tin foil and start either your gas grill or broiler on high\n*   Slice the onion into 1/2” rings and wash the serrano chiles\n*   Add the onion, serrano chiles and garlic to the tin foil lined backing sheet and spray with canola oil spray.\n*   Roast the serranos, onions and garlic until well blackened\n*   You will need to turn them occasionally and may want to remove the garlic before the chiles and onion\n*   Allow the peppers and onions to cool. Remove any stems if you haven’t done so already.\n*   Add the tomatoes, cilantro, onion, all chiles and the salt and blend to your desired consistency\n\n## Hints\n\n*   You can swap jalapeños for the serranos for a little spicier salsa\n","url":"/recipes/chile-morita-salsa"},{"title":"Enchilada Sauce","text":"---\ntitle: Enchilada Sauce\ncreated: 2022-01-25\ncuisine: Mexican\nurl: /recipes/enchilada-sauce\n---\n\n## Introduction\n\nThis sauce is great for enchiladas, but is also fantastic for smothered burritos or chilaquiles.\n\n## Ingredients\n\n*   6 cups of chicken broth\n*   1 package (2.5 ounces) of dried california chiles\n*   1 yellow onion\n*   1 can (15 ounces) of diced tomatoes (drained)\n*   4 cloves of garlic\n*   1 tablespoon kosher salt\n*   1 teaspoon of oregano\n*   1 teaspoon of cumin\n*   1/2 tablespoon of vegetable oil\n\n## Equipment\n\n*   Instant pot\n*   Kitchen knife\n*   Vitamix / Blender\n*   Air tight storage container\n*   Spoon\n*   Rubber spatula\n*   Measuring spoons\n\n## Instructions\n\n*   Remove stems and seeds from chiles and then wash\n*   Tear or cut the chiles into smaller pieces\n*   Dice onion\n*   Setup instant pot to sauté\n*   Add oil\n*   Once oil is hot, add chiles and cook until starting to soften (1 to 2 minutes)\n*   Add onion and cook until starting to soften (3 to 5 minutes)\n*   Add tomato, garlic, salt, oregano, cumin and chicken broth\n*   Stir to combine\n*   Pressure cook contents of instant pot for 5 minutes\n*   Perform quick pressure release once cooking program is complete\n*   Allow contents to cool slightly or be aware they will be very hot before continuing\n*   Add contents to Vitamix / Blender and liquify\n*   Use right way or store in airtight container (can be frozen)\n\n## Hints\n\n*   When buying dried chiles look for ones that are soft like a raisin as brittle chiles will lack flavor\n*   You can use different chiles to change the flavor / spiciness\n*   Mason jars work great for storing\n\n## Uses\n\n*   Pour over a burrito, add cheese and then throw in toaster oven for a smothered burrito\n*   Pour over sturdy tortilla chips, add a fried egg, queso fresco and some pico de gallo for chilaquiles\n","url":"/recipes/enchilada-sauce"},{"title":"Flour tortillas","text":"---\ntitle: Flour tortillas\ncreated: 2022-01-21\nstatus: evergreen\ncuisine: Mexican\nurl: /recipes/flour-tortillas\n---\n\n## Introduction\n\nSimilar to https://www.mexicanplease.com/flour-tortillas-made-olive-oil/ but with more olive oil.\n\n## Ingredients\n\n*   3 cups all purpose flour\n*   1/2 cup olive oil\n*   1.5 teaspoons salt\n*   1 cup warm water\n\n## Instructions\n\n*   Combine ingredients using stand mixer and dough hook\n*   Rest dough ball for 1 hour\n*   Divide into balls. 9 burritos / 18 tacos\n*   Optionally let these rest covered in the fridge until needed\n*   When ready to cook, first flatten a single ball with a tortilla press and then roll out with a rolling pin\n*   Cook on a comal set at medium heat until brown patches appear and tortilla is cooked through\n*   Store in tortilla warmer or between towels\n*   Repeat with remaining dough balls\n*   Will keeps for a few days in a zip lock bag\n","url":"/recipes/flour-tortillas"},{"title":"Fried Jalapeño Coins","text":"---\ntitle: Fried Jalapeño Coins\ndate: 2022-03-06\ncuisine: Mexican\nurl: /recipes/fried-jalapeno-coins\n---\n\nThese fried jalapeño coins are great as an appetizer or on top of salads.\nOriginal recipe from\nhttps://acowboyswife.com/fried-jalapenos-or-bottle-caps-in-our-neck-of-the-woods/.\n\n## Ingredients\n\n*   1 cup flour\n*   ½ cup fine breadcrumbs (like panko)\n*   2 cups jalapeño slices\n*   1 teaspoon salt\n*   ½ teaspoon pepper\n*   1 cup buttermilk\n*   2 eggs\n\n## Instructions\n\n*   In one bowl, combine your flour, breadcrumbs, salt, and pepper. Set aside.\n*   In another bowl, combine your buttermilk and eggs.\n*   Slice up your jalapeños.\n*   Dredge in flour, then in milk/egg mixture.\n*   Fry them up! We use ourfry daddy and just set it on high. We fry them until\n    they're golden.\n","url":"/recipes/fried-jalapeno-coins"},{"title":"Guacamole","text":"---\ntitle: Guacamole\ncreated: 2022-01-25\nstatus: Evergreen\ncuisine: Mexican\nurl: /recipes/guacamole\n---\n\n## Ingredients\n\n*   4 large avocados\n*   1/2 red onion\n*   3 to 4 serrano or 1 jalapeño\n*   1/2 bunch of cilantro (about 1 cup of leaves)\n*   1 teaspoon of kosher salt\n*   1/2 teaspoon of cumin\n*   Juice of 1/2 a lime or as desired\n*   1 diced tomato (optional)\n\n## Equipment\n\n*   Bowl for guacamole\n*   Kitchen knife\n*   Fork for mashing\n*   Cutting board\n\n## Instructions\n\n*   Slice chiles lengthwise and remove seeds\n*   Mince chiles\n*   Mince onion\n*   Wash and dry cilantro, then remove leaves from stems\n*   Chop cilantro leaves and discard stems\n*   Add chiles, onion and cilantro to bowl\n*   Wash your avocados\n*   Slice avocados in half lengthwise and remove the seed\n*   Scoop contents of avocado into bowl\n*   Squeeze lime juice over avocados (helps prevents browning and adds flavor)\n*   Mash avocados with fork\n*   Add salt and cumin and stir to combine all ingredients\n*   Cover bowl tightly with plastic wrap\n*   Press down on plastic wrap to remove as much air as possible\n*   Refrigerate for at least an hour to let flavor develop\n\n## Hints\n\n*   Instead of mincing chiles, onion and cilantro as well as mashing avocados you can use a molcajete\n*   Some people prefer using lemon instead of lime juice\n*   Add chunked strawberry pieces when in season for a nice change\n*   Air is your enemy and you should cover guacamole as tight as possible when storing for any length of time\n","url":"/recipes/guacamole"},{"title":"Italian Sausage","text":"---\ntitle: Italian Sausage\ncreated: 2022-01-25\ncuisine: Italian\nurl: /recipes/italian-sausage\n---\n\nI've always liked Italian sausage. I found this recipe for making my own that has worked out great. I often double the recipe below and freeze it in multiple 1 to 1.5 lb logs for later use.\n\n## Ingredients\n\n*   3 pounds ground pork (see hints)\n*   3 tablespoons red wine vinegar\n*   1 tablespoon salt (kosher)\n*   1 tablespoon fresh black pepper\n*   1 1/4 tablespoon dried parsley\n*   1 tablespoon garlic powder\n*   1 tablespoon onion powder\n*   1 tablespoon dried basil\n*   1 tablespoon fennel seeds\n*   2 teaspoons paprika\n*   2 teaspoons crushed red pepper\n*   1/2 teaspoon dried oregano\n*   1/2 teaspoon dried thyme\n\n## Instructions\n\n*   Place the pork and red wine vinegar in a mixing bowl\n*   Add all of the spices\n*   Kneed until well combined\n*   Form the sausage into logs\n*   Wrap the logs tightly in plastic wrap\n*   Store the wrapped logs in a large freezer bag\n*   Refrigerate for at least 12 hours before use or freeze for later\n\n## Equipment\n\n*   Large mixing bowl\n*   Plastic wrap\n*   Gallon freezer bags\n*   Kitchen knife and cutting board if chopping meat\n*   Measuring spoons\n\n## Hints\n\n*   I like the consistency of chopped meat for this sausage. You don't need to get it pre-ground or even use a grinder. You can instead chop it by hand.\n*   I buy large pork butts when they are on sale. I cut them into smaller chunks prior to freezing them for later use. I then take the smaller chunks out of the freezer and chop them while they are still mostly frozen.\n*   2 teaspoons of crushed red pepper is fairly mild. I like to add more when I am cooking depending up on the dish.\n","url":"/recipes/italian-sausage"},{"title":"Minestrone Soup","text":"---\ntitle: Minestrone Soup\ncreated: 2022-01-24\nstatus: evergreen\ncuisine: Soup\nurl: /recipes/minestrone-soup\n---\n\n## Introduction\n\nMinestrone Soup from https://www.dinneratthezoo.com/olive-garden-minestrone-soup/. Great with some crumbled italian sausage added.\n\n## Ingredients\n\n*   2 tablespoons olive oil\n*   3/4 cup onion diced\n*   1/2 cup celery sliced\n*   1/2 cup carrots peeled, quartered and sliced\n*   1 zucchini halved and sliced\n*   2 teaspoons minced garlic\n*   salt and pepper to taste\n*   1 14 ounce can diced tomatoes\n*   4 cups vegetable broth\n*   1/4 cup tomato paste\n*   2 teaspoons Italian seasoning\n*   1 15 ounce can small white beans drained and rinsed\n*   1 15 ounce can kidney beans drained and rinsed\n*   1/2 cup frozen cut green beans\n*   1/2 cup small shell pasta\n*   2 cups baby spinach leaves\n*   2 tablespoons chopped parsley\n\n## Instructions\n\n*   Heat the olive oil in a large pot over medium high heat. Add the onion,\n    celery, carrots and zucchini to the pot.\n*   Cook until the vegetables are tender, 3-5 minutes. Add the garlic and cook for\n    30 seconds. Season the vegetables with salt and pepper to taste.\n*   Add the tomatoes, vegetable broth, tomato paste and Italian seasoning to the\n    pot. Bring to a simmer.\n*   Add the white beans, kidney beans, green beans and pasta to the pot. Simmer\n    for 10-15 minutes or until pasta and vegetables are tender.\n*   Season the soup with salt and pepper to taste. Stir in the spinach leaves and\n    cook for 2-3 minutes or until wilted.\n*   Sprinkle the parsley over the soup and serve.\n","url":"/recipes/minestrone-soup"},{"title":"Monkey Bread","text":"---\ntitle: Monkey Bread\ncreated: 2022-01-25\ncuisine: Baking\nurl: /recipes/monkey-bread\n---\n\nMonkey bread is a fun brunch sweet for sharing with a larger group. This recipe takes quite a bit of effort, but is worth the time investment.\n\n## Ingredients\n\n*   Dough\n    *   2 tablespoons unsalted butter, softened\n    *   2 tablespoon unsalted butter, melted\n    *   1 cup warm milk (110 degrees fahrenheit)\n    *   1/3 cup warm water (110 degrees fahrenheit)\n    *   1/4 granulated sugar\n    *   1 envelope of rapid rise instant yeast (7 grams)\n    *   3 1/4 cups all purpose flour\n    *   2 teaspoons of salt\n\n*   Coating\n    *   1 cup packed light or golden brown sugar\n    *   2 teaspoons of ground cinnamon\n    *   8 tablespoons (1 stick) unsalted butter, melted\n\n*   Glaze\n    *   1 cup powdered sugar\n    *   2 tablespoons milk\n\n## Instructions\n\n*   For the dough\n    *   Preheat the oven to 200 degrees and then turn off\n    *   Grease a bundt pan with 2 tablespoons of the softened butter\n    *   In a microwave safe bowl, combine the milk, water and, 2 tablespoons of the butter\n    *   Heat mixture 20 seconds at a time until it reaches 110 degrees\n    *   Add yeast and let hydrates for a few minutes, then stir to combine\n    *   Combine the flour and salt in a large bowl\n    *   Make a well in the flour and the pour in liquid mixture\n    *   Use spoon to mix until dough becomes shaggy and difficult to stir\n    *   On lightly floured work surface, knead dough for 7 to 10 minutes, until smooth and satiny\n    *   Add dough back to oiled bowl and then cover with plastic wrap.\n    *   Place in warmed oven until dough doubles in size (45 minutes to an hour)\n    *   Shape the dough into ~ 8 in square. Using a dough cutter cut into 64 pieces\n    *   Roll each dough piece into a ball\n    *   Dip the rolled balls in the melted butter and then roll in the cinnamon/sugar mixture\n    *   Layer the completed balls in the buttered bundt pan\n    *   Cover the bundt pan tightly with plastic wrap and put back in the warm oven until the dough balls are puffy and risen near the top of the pan (50 to 70 minutes)\n    *   Remove the pan from the oven, heat oven to 350 degrees fahrenheit\n    *   Bake until the top is a deep brown and the caramel begins to bubble around the edges (30 to 35 minutes)\n    *   Cool in the pan for 5 minutes and then turn out onto a platter and allow to cool for another 10 minutes\n    *   Drizzle the glaze over the top and then serve while still warm\n\n*   For the coating\n    *   Mix the sugar and cinnamon together in a small bowl\n    *   Melt the butter in an additional bowl\n    *   Set aside\n\n*   For the glaze\n    *   Mix the milk with sugar and set aside\n\n## Equipment\n\n*   Mixing bowls\n*   Dough knife\n*   Thermometer\n*   Bundt pan\n*   Platter\n","url":"/recipes/monkey-bread"},{"title":"Queso Blanco","text":"---\ntitle: Queso Blanco\ncreated: 2022-01-25\ncuisine: Mexican\nurl: /recipes/queso-blanco\n---\n\nThis cheese is very popular at parties and family get togethers. Adjust peppers as desired based on personal preference and season.\n\n## Ingredients\n\n*   1lb quality white american cheese (Boarshead, Land O Lakes)\n*   1/2 cup water\n*   1/2 cup whole milk\n*   3 to 4 fresh pasilla/pablano chiles\n*   2 to 3 fresh jalapeños\n*   5 to 6 fresh serrano chiles\n*   1/2 teaspoon cumin (optional)\n\n## Equipment\n\n*   Kitchen knife\n*   Large microwave safe bowl\n*   Spoon for stirring\n*   Measuring cups\n*   Sheet pan\n*   Foil\n\n## Instructions\n\n*   Roast chiles on grill or under broiler\n*   Remove blistered skin from chiles\n*   Mince roasted chiles\n*   Cube cheese into 1/2\" blocks\n*   Add cheese, water and milk to microwave safe bowl and microwave on high for 5 to 7 minutes stirring every minute\n*   Microwave minced chiles for 2 minutes (prevents cold chiles from making the cheese goopy)\n*   Add chiles to cheese and stir\n*   Add cumin and stir if desired\n\n## Hints\n\n*   Instead of a microwave, a crockpot works great as well.\n","url":"/recipes/queso-blanco"},{"title":"Recipes","text":"---\ntitle: Recipes\nurl: /recipes\n---\n\n### Baking\n\n| Name                                     |\n| ---------------------------------------- |\n| [Monkey Bread](/recipes/monkey-bread.md) |\n\n### Italian\n\n| Name                                           |\n| ---------------------------------------------- |\n| [Italian Sausage](/recipes/italian-sausage.md) |\n\n### Mexican\n\n| Name                                                           |\n| -------------------------------------------------------------- |\n| [Black Beans](/recipes/black-beans.md)                         |\n| [Chile Colorado](/recipes/chile-colorado.md)                   |\n| [Chile Morita Salsa](/recipes/chile-morita-salsa.md)           |\n| [Enchilada Sauce](/recipes/enchilada-sauce.md)                 |\n| [Flour tortillas](/recipes/flour-tortillas.md)                 |\n| [Fried Jalapeño Coins](/recipes/fried-jalapeno-coins.md)       |\n| [Guacamole](/recipes/guacamole.md)                             |\n| [Queso Blanco](/recipes/queso-blanco.md)                       |\n| [Red Salsa](/recipes/red-salsa.md)                             |\n| [Roasted Tomatillo Salsa](/recipes/roasted-tomatillo-salsa.md) |\n\n### Soup\n\n| Name                                           |\n| ---------------------------------------------- |\n| [Minestrone Soup](/recipes/minestrone-soup.md) |\n| [Zuppa Toscana](/recipes/zuppa-toscana.md)     |\n","url":"/recipes"},{"title":"Red Salsa","text":"---\ntitle: Red Salsa\ncreated: 2022-01-25\ncuisine: Mexican\nurl: /recipes/red-salsa\n---\n\n## Introduction\n\nAll purpose table salsa. Great for chips and salsa or on top of mexican foods.\n\n## Ingredients\n\n*   3 fifteen ounce cans of diced tomatoes\n*   1 can of Rotel\n*   1 sweet yellow onion\n*   1 to 2 jalapeños\n*   2 to 4 serrano chiles\n*   1 bunch of cilantro\n*   1 tablespoon cumin\n*   1 tablespoon kosher salt\n*   Canola oil spray\n\n## Equipment\n\n*   Kitchen knife\n*   Blender / Vitamix\n*   Measuring spoon\n*   Sheet pan\n*   Foil\n*   Air tight container for storage\n\n## Instructions\n\n*   Foil sheet pan and spray with canola oil\n*   Slice onion into ~1/4\" slices and lay flat on sheet pan\n*   Wash and dry chiles and then add to sheet pan\n*   Spray onion and chiles with canola oil\n*   Roast onion and chiles on grill or under broiler until well blackened. Turn as necessary.\n*   Let onion and chiles cool then remove stems\n*   Drain tomatoes and then add to blender along with cilantro, cumin, salt, roasted onion and chiles.\n*   Blend to desired consistency (most likely pretty smooth)\n*   Store in airtight container\n","url":"/recipes/red-salsa"},{"title":"Roasted Tomatillo Salsa","text":"---\ntitle: Roasted Tomatillo Salsa\ncreated: 2022-01-25\ncuisine: Mexican\nurl: /recipes/roasted-tomatillo-salsa\n---\n\nI really like the acidic flavor of tomatillo. This roasted tomatillo salsa is excellent on pork carnitas. Tomatillo are generally available at most large grocery stores in the Southwestern United States.\n\n## Ingredients\n\n*   1 pound of tomatillo, husks removed and washed\n*   1 sweet yellow onion sliced into 1/2” slices\n*   3 cloves of unpeeled garlic\n*   4 to 5 fresh serrano chiles\n*   1 bunch of washed cilantro with large stems removed\n*   Canola oil spray\n*   2 teaspoons of kosher salt\n\n## Equipment\n\n*   Baking sheet\n*   Tin foil\n*   Gas grill or broiler\n*   Tongs\n*   Vitamix/blender\n\n## Instructions\n\n*   Remove the husks from the tomatillo\n*   Wash the tomatillo. You will need to scrub them to get rid the the sticky sap\n*   Remove the stem and then cut the tomatillo into quarters\n*   Slice the onion into 1/2” slices\n*   Add the tomatillo, onion, serrano, and garlic to the tin foil lined baking sheet\n*   Spray with canola oil spray\n*   Roast turning occasionally until well blackened. You may need to remove the garlic before the rest of the items\n*   All the roasted items to cool\n*   Add everything to the blender and blend to your desired salsa consistency\n\n## Hints\n\n*   This is a great salsa to have in the fridge. You can add it to most any meat dish or to the top of eggs.\n","url":"/recipes/roasted-tomatillo-salsa"},{"title":"Zuppa Toscana","text":"---\ntitle: Zuppa Toscana\ndate: 2022-03-07\ncuisine: Soup\nurl: /recipes/zuppa-toscana\n---\n\nThis olive garden copycat recipe from https://www.thekitchn.com/recipe-zuppa-toscana-234423 is great with a nice salad.\n\n## Ingredients\n\n*   1 pound uncooked ground spicy [italian sausage](/recipes/italian-sausage.md)\n*   1 large onion, diced\n*   2 cloves garlic, minced\n*   Kosher salt\n*   Freshly ground black pepper\n*   4 cups chicken broth\n*   3 large potatoes cut into 1/4-inch-thick half-moons\n*   5 cups gently packed chopped curly kale leaves (from about 1/2 of a large bunch)\n*   1/2 cup heavy cream\n*   Grated Parmesan cheese, for serving\n\n## Instructions\n\n*   Heat a Dutch oven over medium-high heat.\n*   Add the sausage and cook, breaking it up with a wooden spoon, until browned and cooked through, about 5 minutes.\n*   Add the onion and garlic, season with salt and pepper, and sauté until softened, about 3 minutes.\n*   Add the chicken broth and potatoes and stir to combine. Bring to a boil, then lower the heat to simmer gently.\n*   Cover and cook until the potatoes are soft and falling apart, about 20 minutes.\n*   Stir in the kale and cook until the leaves are bright green and tender, about 2 minutes.\n*   Stir in the cream, season with salt and pepper as needed, and\n    serve, garnishing with Parmesan cheese.\n","url":"/recipes/zuppa-toscana"},{"text":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [2.0.1] - 2020-08-29\n\n### Fixed\n\n*   Fix issue with `process.argv` when used with interpreters (`coffee`, `ts-node`, etc.), #150.\n\n## [2.0.0] - 2020-08-14\n\n### Changed\n\n*   Full rewrite. Now port from python 3.9.0 & more precise following.\n    See [doc](./doc) for difference and migration info.\n*   node.js 10+ required\n*   Removed most of local docs in favour of original ones.\n\n## [1.0.10] - 2018-02-15\n\n### Fixed\n\n*   Use .concat instead of + for arrays, #122.\n\n## [1.0.9] - 2016-09-29\n\n### Changed\n\n*   Rerelease after 1.0.8 - deps cleanup.\n\n## [1.0.8] - 2016-09-29\n\n### Changed\n\n*   Maintenance (deps bump, fix node 6.5+ tests, coverage report).\n\n## [1.0.7] - 2016-03-17\n\n### Changed\n\n*   Teach `addArgument` to accept string arg names. #97, @tomxtobin.\n\n## [1.0.6] - 2016-02-06\n\n### Changed\n\n*   Maintenance: moved to eslint & updated CS.\n\n## [1.0.5] - 2016-02-05\n\n### Changed\n\n*   Removed lodash dependency to significantly reduce install size.\n    Thanks to @mourner.\n\n## [1.0.4] - 2016-01-17\n\n### Changed\n\n*   Maintenance: lodash update to 4.0.0.\n\n## [1.0.3] - 2015-10-27\n\n### Fixed\n\n*   Fix parse `=` in args: `--examplepath=\"C:\\myfolder\\env=x64\"`. #84, @CatWithApple.\n\n## [1.0.2] - 2015-03-22\n\n### Changed\n\n*   Relaxed lodash version dependency.\n\n## [1.0.1] - 2015-02-20\n\n### Changed\n\n*   Changed dependencies to be compatible with ancient nodejs.\n\n## [1.0.0] - 2015-02-19\n\n### Changed\n\n*   Maintenance release.\n*   Replaced `underscore` with `lodash`.\n*   Bumped version to 1.0.0 to better reflect semver meaning.\n*   HISTORY.md -> CHANGELOG.md\n\n## [0.1.16] - 2013-12-01\n\n### Changed\n\n*   Maintenance release. Updated dependencies and docs.\n\n## [0.1.15] - 2013-05-13\n\n### Fixed\n\n*   Fixed #55, @trebor89\n\n## [0.1.14] - 2013-05-12\n\n### Fixed\n\n*   Fixed #62, @maxtaco\n\n## [0.1.13] - 2013-04-08\n\n### Changed\n\n*   Added `.npmignore` to reduce package size\n\n## [0.1.12] - 2013-02-10\n\n### Fixed\n\n*   Fixed conflictHandler (#46), @hpaulj\n\n## [0.1.11] - 2013-02-07\n\n### Added\n\n*   Added 70+ tests (ported from python), @hpaulj\n*   Added conflictHandler, @applepicke\n*   Added fromfilePrefixChar, @hpaulj\n\n### Fixed\n\n*   Multiple bugfixes, @hpaulj\n\n## [0.1.10] - 2012-12-30\n\n### Added\n\n*   Added [mutual exclusion](http://docs.python.org/dev/library/argparse.html#mutual-exclusion)\n    support, thanks to @hpaulj\n\n### Fixed\n\n*   Fixed options check for `storeConst` & `appendConst` actions, thanks to @hpaulj\n\n## [0.1.9] - 2012-12-27\n\n### Fixed\n\n*   Fixed option dest interferens with other options (issue #23), thanks to @hpaulj\n*   Fixed default value behavior with `*` positionals, thanks to @hpaulj\n*   Improve `getDefault()` behavior, thanks to @hpaulj\n*   Improve negative argument parsing, thanks to @hpaulj\n\n## [0.1.8] - 2012-12-01\n\n### Fixed\n\n*   Fixed parser parents (issue #19), thanks to @hpaulj\n*   Fixed negative argument parse (issue #20), thanks to @hpaulj\n\n## [0.1.7] - 2012-10-14\n\n### Fixed\n\n*   Fixed 'choices' argument parse (issue #16)\n*   Fixed stderr output (issue #15)\n\n## [0.1.6] - 2012-09-09\n\n### Fixed\n\n*   Fixed check for conflict of options (thanks to @tomxtobin)\n\n## [0.1.5] - 2012-09-03\n\n### Fixed\n\n*   Fix parser #setDefaults method (thanks to @tomxtobin)\n\n## [0.1.4] - 2012-07-30\n\n### Fixed\n\n*   Fixed pseudo-argument support (thanks to @CGamesPlay)\n*   Fixed addHelp default (should be true), if not set (thanks to @benblank)\n\n## [0.1.3] - 2012-06-27\n\n### Fixed\n\n*   Fixed formatter api name: Formatter -> HelpFormatter\n\n## [0.1.2] - 2012-05-29\n\n### Fixed\n\n*   Removed excess whitespace in help\n*   Fixed error reporting, when parcer with subcommands\n    called with empty arguments\n\n### Added\n\n*   Added basic tests\n\n## [0.1.1] - 2012-05-23\n\n### Fixed\n\n*   Fixed line wrapping in help formatter\n*   Added better error reporting on invalid arguments\n\n## [0.1.0] - 2012-05-16\n\n### Added\n\n*   First release.\n\n[2.0.1]: https://github.com/nodeca/argparse/compare/2.0.0...2.0.1\n\n[2.0.0]: https://github.com/nodeca/argparse/compare/1.0.10...2.0.0\n\n[1.0.10]: https://github.com/nodeca/argparse/compare/1.0.9...1.0.10\n\n[1.0.9]: https://github.com/nodeca/argparse/compare/1.0.8...1.0.9\n\n[1.0.8]: https://github.com/nodeca/argparse/compare/1.0.7...1.0.8\n\n[1.0.7]: https://github.com/nodeca/argparse/compare/1.0.6...1.0.7\n\n[1.0.6]: https://github.com/nodeca/argparse/compare/1.0.5...1.0.6\n\n[1.0.5]: https://github.com/nodeca/argparse/compare/1.0.4...1.0.5\n\n[1.0.4]: https://github.com/nodeca/argparse/compare/1.0.3...1.0.4\n\n[1.0.3]: https://github.com/nodeca/argparse/compare/1.0.2...1.0.3\n\n[1.0.2]: https://github.com/nodeca/argparse/compare/1.0.1...1.0.2\n\n[1.0.1]: https://github.com/nodeca/argparse/compare/1.0.0...1.0.1\n\n[1.0.0]: https://github.com/nodeca/argparse/compare/0.1.16...1.0.0\n\n[0.1.16]: https://github.com/nodeca/argparse/compare/0.1.15...0.1.16\n\n[0.1.15]: https://github.com/nodeca/argparse/compare/0.1.14...0.1.15\n\n[0.1.14]: https://github.com/nodeca/argparse/compare/0.1.13...0.1.14\n\n[0.1.13]: https://github.com/nodeca/argparse/compare/0.1.12...0.1.13\n\n[0.1.12]: https://github.com/nodeca/argparse/compare/0.1.11...0.1.12\n\n[0.1.11]: https://github.com/nodeca/argparse/compare/0.1.10...0.1.11\n\n[0.1.10]: https://github.com/nodeca/argparse/compare/0.1.9...0.1.10\n\n[0.1.9]: https://github.com/nodeca/argparse/compare/0.1.8...0.1.9\n\n[0.1.8]: https://github.com/nodeca/argparse/compare/0.1.7...0.1.8\n\n[0.1.7]: https://github.com/nodeca/argparse/compare/0.1.6...0.1.7\n\n[0.1.6]: https://github.com/nodeca/argparse/compare/0.1.5...0.1.6\n\n[0.1.5]: https://github.com/nodeca/argparse/compare/0.1.4...0.1.5\n\n[0.1.4]: https://github.com/nodeca/argparse/compare/0.1.3...0.1.4\n\n[0.1.3]: https://github.com/nodeca/argparse/compare/0.1.2...0.1.3\n\n[0.1.2]: https://github.com/nodeca/argparse/compare/0.1.1...0.1.2\n\n[0.1.1]: https://github.com/nodeca/argparse/compare/0.1.0...0.1.1\n\n[0.1.0]: https://github.com/nodeca/argparse/releases/tag/0.1.0\n"},{"text":"# argparse\n\n[![Build Status](https://secure.travis-ci.org/nodeca/argparse.svg?branch=master)](http://travis-ci.org/nodeca/argparse)\n[![NPM version](https://img.shields.io/npm/v/argparse.svg)](https://www.npmjs.org/package/argparse)\n\nCLI arguments parser for node.js, with [sub-commands](https://docs.python.org/3.9/library/argparse.html#sub-commands) support. Port of python's [argparse](http://docs.python.org/dev/library/argparse.html) (version [3.9.0](https://github.com/python/cpython/blob/v3.9.0rc1/Lib/argparse.py)).\n\n**Difference with original.**\n\n*   JS has no keyword arguments support.\n    *   Pass options instead: `new ArgumentParser({ description: 'example', add_help: true })`.\n*   JS has no python's types `int`, `float`, ...\n    *   Use string-typed names: `.add_argument('-b', { type: 'int', help: 'help' })`.\n*   `%r` format specifier uses `require('util').inspect()`.\n\nMore details in [doc](./doc).\n\n## Example\n\n`test.js` file:\n\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nconst { ArgumentParser } = require('argparse');\nconst { version } = require('./package.json');\n\nconst parser = new ArgumentParser({\n  description: 'Argparse example'\n});\n\nparser.add_argument('-v', '--version', { action: 'version', version });\nparser.add_argument('-f', '--foo', { help: 'foo bar' });\nparser.add_argument('-b', '--bar', { help: 'bar foo' });\nparser.add_argument('--baz', { help: 'baz bar' });\n\nconsole.dir(parser.parse_args());\n```\n\nDisplay help:\n\n    $ ./test.js -h\n    usage: test.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ]\n\n    Argparse example\n\n    optional arguments:\n      -h, --help         show this help message and exit\n      -v, --version      show program's version number and exit\n      -f FOO, --foo FOO  foo bar\n      -b BAR, --bar BAR  bar foo\n      --baz BAZ          baz bar\n\nParse arguments:\n\n    $ ./test.js -f=3 --bar=4 --baz 5\n    { foo: '3', bar: '4', baz: '5' }\n\n## API docs\n\nSince this is a port with minimal divergence, there's no separate documentation.\nUse original one instead, with notes about difference.\n\n1.  [Original doc](https://docs.python.org/3.9/library/argparse.html).\n2.  [Original tutorial](https://docs.python.org/3.9/howto/argparse.html).\n3.  [Difference with python](./doc).\n\n## argparse for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of argparse and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-argparse?utm_source=npm-argparse\\&utm_medium=referral\\&utm_campaign=enterprise\\&utm_term=repo)\n"},{"text":"# bail\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nThrow if given an error.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`bail(err?)`](#bailerr)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package throws a given error.\n\n## When should I use this?\n\nUse this package if you’re building some scripts that might theoretically get\nerrors but frequently don’t and you keep writing `if (error) throw error` over\nand over again and you’re just really done with that.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install bail\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {bail} from 'https://cdn.skypack.dev/bail@2?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {bail} from 'https://cdn.skypack.dev/bail@2?min'\n</script>\n```\n\n## Use\n\n```js\nimport {bail} from 'bail'\n\nbail()\n\nbail(new Error('failure'))\n// Error: failure\n//     at repl:1:6\n//     at REPLServer.defaultEval (repl.js:154:27)\n//     …\n```\n\n## API\n\nThis package exports the following identifier: `bail`.\nThere is no default export.\n\n### `bail(err?)`\n\nThrow a given error (`Error?`).\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThere are no extra exported types.\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Related\n\n*   [`noop`][noop]\n*   [`noop2`][noop2]\n*   [`noop3`][noop3]\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/bail/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/bail/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/bail.svg\n\n[coverage]: https://codecov.io/github/wooorm/bail\n\n[downloads-badge]: https://img.shields.io/npm/dm/bail.svg\n\n[downloads]: https://www.npmjs.com/package/bail\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/bail.svg\n\n[size]: https://bundlephobia.com/result?p=bail\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[noop]: https://www.npmjs.com/package/noop\n\n[noop2]: https://www.npmjs.com/package/noop2\n\n[noop3]: https://www.npmjs.com/package/noop3\n"},{"text":"# Release history\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n<details>\n  <summary><strong>Guiding Principles</strong></summary>\n\n*   Changelogs are for humans, not machines.\n*   There should be an entry for every single version.\n*   The same types of changes should be grouped.\n*   Versions and sections should be linkable.\n*   The latest version comes first.\n*   The release date of each versions is displayed.\n*   Mention whether you follow Semantic Versioning.\n\n</details>\n\n<details>\n  <summary><strong>Types of changes</strong></summary>\n\nChangelog entries are classified using the following labels *(from [keep-a-changelog](http://keepachangelog.com/)*):\n\n*   `Added` for new features.\n*   `Changed` for changes in existing functionality.\n*   `Deprecated` for soon-to-be removed features.\n*   `Removed` for now removed features.\n*   `Fixed` for any bug fixes.\n*   `Security` in case of vulnerabilities.\n\n</details>\n\n## \\[3.0.0] - 2018-04-08\n\nv3.0 is a complete refactor, resulting in a faster, smaller codebase, with fewer deps, and a more accurate parser and compiler.\n\n**Breaking Changes**\n\n*   The undocumented `.makeRe` method was removed\n\n**Non-breaking changes**\n\n*   Caching was removed\n\n## [2.3.2] - 2018-04-08\n\n*   start refactoring\n*   cover sets\n*   better range handling\n\n## [2.3.1] - 2018-02-17\n\n*   Remove unnecessary escape in Regex. (#14)\n\n## [2.3.0] - 2017-10-19\n\n*   minor code reorganization\n*   optimize regex\n*   expose `maxLength` option\n\n## [2.2.1] - 2017-05-30\n\n*   don't condense when braces contain extglobs\n\n## [2.2.0] - 2017-05-28\n\n*   ensure word boundaries are preserved\n*   fixes edge case where extglob characters precede a brace pattern\n\n## [2.1.1] - 2017-04-27\n\n*   use snapdragon-node\n*   handle edge case\n*   optimizations, lint\n\n## [2.0.4] - 2017-04-11\n\n*   pass opts to compiler\n*   minor optimization in create method\n*   re-write parser handlers to remove negation regex\n\n## [2.0.3] - 2016-12-10\n\n*   use split-string\n*   clear queue at the end\n*   adds sequences example\n*   add unit tests\n\n## [2.0.2] - 2016-10-21\n\n*   fix comma handling in nested extglobs\n\n## [2.0.1] - 2016-10-20\n\n*   add comments\n*   more tests, ensure quotes are stripped\n\n## [2.0.0] - 2016-10-19\n\n*   don't expand braces inside character classes\n*   add quantifier pattern\n\n## [1.8.5] - 2016-05-21\n\n*   Refactor (#10)\n\n## [1.8.4] - 2016-04-20\n\n*   fixes https://github.com/jonschlinkert/micromatch/issues/66\n\n## [1.8.0] - 2015-03-18\n\n*   adds exponent examples, tests\n*   fixes the first example in https://github.com/jonschlinkert/micromatch/issues/38\n\n## [1.6.0] - 2015-01-30\n\n*   optimizations, `bash` mode:\n*   improve path escaping\n\n## [1.5.0] - 2015-01-28\n\n*   Merge pull request #5 from eush77/lib-files\n\n## [1.4.0] - 2015-01-24\n\n*   add extglob tests\n*   externalize exponent function\n*   better whitespace handling\n\n## [1.3.0] - 2015-01-24\n\n*   make regex patterns explicity\n\n## [1.1.0] - 2015-01-11\n\n*   don't create a match group with `makeRe`\n\n## [1.0.0] - 2014-12-23\n\n*   Merge commit '97b05f5544f8348736a8efaecf5c32bbe3e2ad6e'\n*   support empty brace syntax\n*   better bash coverage\n*   better support for regex strings\n\n## [0.1.4] - 2014-11-14\n\n*   improve recognition of bad args, recognize mismatched argument types\n*   support escaping\n*   remove pathname-expansion\n*   support whitespace in patterns\n\n## \\[0.1.0]\n\n*   first commit\n\n[2.3.2]: https://github.com/micromatch/braces/compare/2.3.1...2.3.2\n\n[2.3.1]: https://github.com/micromatch/braces/compare/2.3.0...2.3.1\n\n[2.3.0]: https://github.com/micromatch/braces/compare/2.2.1...2.3.0\n\n[2.2.1]: https://github.com/micromatch/braces/compare/2.2.0...2.2.1\n\n[2.2.0]: https://github.com/micromatch/braces/compare/2.1.1...2.2.0\n\n[2.1.1]: https://github.com/micromatch/braces/compare/2.1.0...2.1.1\n\n[2.1.0]: https://github.com/micromatch/braces/compare/2.0.4...2.1.0\n\n[2.0.4]: https://github.com/micromatch/braces/compare/2.0.3...2.0.4\n\n[2.0.3]: https://github.com/micromatch/braces/compare/2.0.2...2.0.3\n\n[2.0.2]: https://github.com/micromatch/braces/compare/2.0.1...2.0.2\n\n[2.0.1]: https://github.com/micromatch/braces/compare/2.0.0...2.0.1\n\n[2.0.0]: https://github.com/micromatch/braces/compare/1.8.5...2.0.0\n\n[1.8.5]: https://github.com/micromatch/braces/compare/1.8.4...1.8.5\n\n[1.8.4]: https://github.com/micromatch/braces/compare/1.8.0...1.8.4\n\n[1.8.0]: https://github.com/micromatch/braces/compare/1.6.0...1.8.0\n\n[1.6.0]: https://github.com/micromatch/braces/compare/1.5.0...1.6.0\n\n[1.5.0]: https://github.com/micromatch/braces/compare/1.4.0...1.5.0\n\n[1.4.0]: https://github.com/micromatch/braces/compare/1.3.0...1.4.0\n\n[1.3.0]: https://github.com/micromatch/braces/compare/1.2.0...1.3.0\n\n[1.2.0]: https://github.com/micromatch/braces/compare/1.1.0...1.2.0\n\n[1.1.0]: https://github.com/micromatch/braces/compare/1.0.0...1.1.0\n\n[1.0.0]: https://github.com/micromatch/braces/compare/0.1.4...1.0.0\n\n[0.1.4]: https://github.com/micromatch/braces/compare/0.1.0...0.1.4\n\n[Unreleased]: https://github.com/micromatch/braces/compare/0.1.0...HEAD\n\n[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog\n"},{"text":"# braces [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\\&hosted_button_id=W8YFZ425KND68) [![NPM version](https://img.shields.io/npm/v/braces.svg?style=flat)](https://www.npmjs.com/package/braces) [![NPM monthly downloads](https://img.shields.io/npm/dm/braces.svg?style=flat)](https://npmjs.org/package/braces) [![NPM total downloads](https://img.shields.io/npm/dt/braces.svg?style=flat)](https://npmjs.org/package/braces) [![Linux Build Status](https://img.shields.io/travis/micromatch/braces.svg?style=flat\\&label=Travis)](https://travis-ci.org/micromatch/braces)\n\n> Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save braces\n```\n\n## v3.0.0 Released!!\n\nSee the [changelog](CHANGELOG.md) for details.\n\n## Why use braces?\n\nBrace patterns make globs more powerful by adding the ability to match specific ranges and sequences of characters.\n\n*   **Accurate** - complete support for the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/) specification (passes all of the Bash braces tests)\n*   **[fast and performant](#benchmarks)** - Starts fast, runs fast and [scales well](#performance) as patterns increase in complexity.\n*   **Organized code base** - The parser and compiler are easy to maintain and update when edge cases crop up.\n*   **Well-tested** - Thousands of test assertions, and passes all of the Bash, minimatch, and [brace-expansion](https://github.com/juliangruber/brace-expansion) unit tests (as of the date this was written).\n*   **Safer** - You shouldn't have to worry about users defining aggressive or malicious brace patterns that can break your application. Braces takes measures to prevent malicious regex that can be used for DDoS attacks (see [catastrophic backtracking](https://www.regular-expressions.info/catastrophic.html)).\n*   [Supports lists](#lists) - (aka \"sets\") `a/{b,c}/d` => `['a/b/d', 'a/c/d']`\n*   [Supports sequences](#sequences) - (aka \"ranges\") `{01..03}` => `['01', '02', '03']`\n*   [Supports steps](#steps) - (aka \"increments\") `{2..10..2}` => `['2', '4', '6', '8', '10']`\n*   [Supports escaping](#escaping) - To prevent evaluation of special characters.\n\n## Usage\n\nThe main export is a function that takes one or more brace `patterns` and `options`.\n\n```js\nconst braces = require('braces');\n// braces(patterns[, options]);\n\nconsole.log(braces(['{01..05}', '{a..e}']));\n//=> ['(0[1-5])', '([a-e])']\n\nconsole.log(braces(['{01..05}', '{a..e}'], { expand: true }));\n//=> ['01', '02', '03', '04', '05', 'a', 'b', 'c', 'd', 'e']\n```\n\n### Brace Expansion vs. Compilation\n\nBy default, brace patterns are compiled into strings that are optimized for creating regular expressions and matching.\n\n**Compiled**\n\n```js\nconsole.log(braces('a/{x,y,z}/b')); \n//=> ['a/(x|y|z)/b']\nconsole.log(braces(['a/{01..20}/b', 'a/{1..5}/b'])); \n//=> [ 'a/(0[1-9]|1[0-9]|20)/b', 'a/([1-5])/b' ]\n```\n\n**Expanded**\n\nEnable brace expansion by setting the `expand` option to true, or by using [braces.expand()](#expand) (returns an array similar to what you'd expect from Bash, or `echo {1..5}`, or [minimatch](https://github.com/isaacs/minimatch)):\n\n```js\nconsole.log(braces('a/{x,y,z}/b', { expand: true }));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n\nconsole.log(braces.expand('{01..10}'));\n//=> ['01','02','03','04','05','06','07','08','09','10']\n```\n\n### Lists\n\nExpand lists (like Bash \"sets\"):\n\n```js\nconsole.log(braces('a/{foo,bar,baz}/*.js'));\n//=> ['a/(foo|bar|baz)/*.js']\n\nconsole.log(braces.expand('a/{foo,bar,baz}/*.js'));\n//=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js']\n```\n\n### Sequences\n\nExpand ranges of characters (like Bash \"sequences\"):\n\n```js\nconsole.log(braces.expand('{1..3}'));                // ['1', '2', '3']\nconsole.log(braces.expand('a/{1..3}/b'));            // ['a/1/b', 'a/2/b', 'a/3/b']\nconsole.log(braces('{a..c}', { expand: true }));     // ['a', 'b', 'c']\nconsole.log(braces('foo/{a..c}', { expand: true })); // ['foo/a', 'foo/b', 'foo/c']\n\n// supports zero-padded ranges\nconsole.log(braces('a/{01..03}/b'));   //=> ['a/(0[1-3])/b']\nconsole.log(braces('a/{001..300}/b')); //=> ['a/(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)/b']\n```\n\nSee [fill-range](https://github.com/jonschlinkert/fill-range) for all available range-expansion options.\n\n### Steppped ranges\n\nSteps, or increments, may be used with ranges:\n\n```js\nconsole.log(braces.expand('{2..10..2}'));\n//=> ['2', '4', '6', '8', '10']\n\nconsole.log(braces('{2..10..2}'));\n//=> ['(2|4|6|8|10)']\n```\n\nWhen the [.optimize](#optimize) method is used, or [options.optimize](#optionsoptimize) is set to true, sequences are passed to [to-regex-range](https://github.com/jonschlinkert/to-regex-range) for expansion.\n\n### Nesting\n\nBrace patterns may be nested. The results of each expanded string are not sorted, and left to right order is preserved.\n\n**\"Expanded\" braces**\n\n```js\nconsole.log(braces.expand('a{b,c,/{x,y}}/e'));\n//=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e']\n\nconsole.log(braces.expand('a/{x,{1..5},y}/c'));\n//=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c']\n```\n\n**\"Optimized\" braces**\n\n```js\nconsole.log(braces('a{b,c,/{x,y}}/e'));\n//=> ['a(b|c|/(x|y))/e']\n\nconsole.log(braces('a/{x,{1..5},y}/c'));\n//=> ['a/(x|([1-5])|y)/c']\n```\n\n### Escaping\n\n**Escaping braces**\n\nA brace pattern will not be expanded or evaluted if *either the opening or closing brace is escaped*:\n\n```js\nconsole.log(braces.expand('a\\\\{d,c,b}e'));\n//=> ['a{d,c,b}e']\n\nconsole.log(braces.expand('a{d,c,b\\\\}e'));\n//=> ['a{d,c,b}e']\n```\n\n**Escaping commas**\n\nCommas inside braces may also be escaped:\n\n```js\nconsole.log(braces.expand('a{b\\\\,c}d'));\n//=> ['a{b,c}d']\n\nconsole.log(braces.expand('a{d\\\\,c,b}e'));\n//=> ['ad,ce', 'abe']\n```\n\n**Single items**\n\nFollowing bash conventions, a brace pattern is also not expanded when it contains a single character:\n\n```js\nconsole.log(braces.expand('a{b}c'));\n//=> ['a{b}c']\n```\n\n## Options\n\n### options.maxLength\n\n**Type**: `Number`\n\n**Default**: `65,536`\n\n**Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.\n\n```js\nconsole.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error\n```\n\n### options.expand\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Generate an \"expanded\" brace pattern (alternatively you can use the `braces.expand()` method, which does the same thing).\n\n```js\nconsole.log(braces('a/{b,c}/d', { expand: true }));\n//=> [ 'a/b/d', 'a/c/d' ]\n```\n\n### options.nodupes\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Remove duplicates from the returned array.\n\n### options.rangeLimit\n\n**Type**: `Number`\n\n**Default**: `1000`\n\n**Description**: To prevent malicious patterns from being passed by users, an error is thrown when `braces.expand()` is used or `options.expand` is true and the generated range will exceed the `rangeLimit`.\n\nYou can customize `options.rangeLimit` or set it to `Inifinity` to disable this altogether.\n\n**Examples**\n\n```js\n// pattern exceeds the \"rangeLimit\", so it's optimized automatically\nconsole.log(braces.expand('{1..1000}'));\n//=> ['([1-9]|[1-9][0-9]{1,2}|1000)']\n\n// pattern does not exceed \"rangeLimit\", so it's NOT optimized\nconsole.log(braces.expand('{1..100}'));\n//=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n```\n\n### options.transform\n\n**Type**: `Function`\n\n**Default**: `undefined`\n\n**Description**: Customize range expansion.\n\n**Example: Transforming non-numeric values**\n\n```js\nconst alpha = braces.expand('x/{a..e}/y', {\n  transform(value, index) {\n    // When non-numeric values are passed, \"value\" is a character code.\n    return 'foo/' + String.fromCharCode(value) + '-' + index;\n  }\n});\nconsole.log(alpha);\n//=> [ 'x/foo/a-0/y', 'x/foo/b-1/y', 'x/foo/c-2/y', 'x/foo/d-3/y', 'x/foo/e-4/y' ]\n```\n\n**Example: Transforming numeric values**\n\n```js\nconst numeric = braces.expand('{1..5}', {\n  transform(value) {\n    // when numeric values are passed, \"value\" is a number\n    return 'foo/' + value * 2;\n  }\n});\nconsole.log(numeric); \n//=> [ 'foo/2', 'foo/4', 'foo/6', 'foo/8', 'foo/10' ]\n```\n\n### options.quantifiers\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: In regular expressions, quanitifiers can be used to specify how many times a token can be repeated. For example, `a{1,3}` will match the letter `a` one to three times.\n\nUnfortunately, regex quantifiers happen to share the same syntax as [Bash lists](#lists)\n\nThe `quantifiers` option tells braces to detect when [regex quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#quantifiers) are defined in the given pattern, and not to try to expand them as lists.\n\n**Examples**\n\n```js\nconst braces = require('braces');\nconsole.log(braces('a/b{1,3}/{x,y,z}'));\n//=> [ 'a/b(1|3)/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));\n//=> [ 'a/b{1,3}/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));\n//=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ]\n```\n\n### options.unescape\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Strip backslashes that were used for escaping from the result.\n\n## What is \"brace expansion\"?\n\nBrace expansion is a type of parameter expansion that was made popular by unix shells for generating lists of strings, as well as regex-like matching when used alongside wildcards (globs).\n\nIn addition to \"expansion\", braces are also used for matching. In other words:\n\n*   [brace expansion](#brace-expansion) is for generating new lists\n*   [brace matching](#brace-matching) is for filtering existing lists\n\n<details>\n<summary><strong>More about brace expansion</strong> (click to expand)</summary>\n\nThere are two main types of brace expansion:\n\n1.  **lists**: which are defined using comma-separated values inside curly braces: `{a,b,c}`\n2.  **sequences**: which are defined using a starting value and an ending value, separated by two dots: `a{1..3}b`. Optionally, a third argument may be passed to define a \"step\" or increment to use: `a{1..100..10}b`. These are also sometimes referred to as \"ranges\".\n\nHere are some example brace patterns to illustrate how they work:\n\n**Sets**\n\n    {a,b,c}       => a b c\n    {a,b,c}{1,2}  => a1 a2 b1 b2 c1 c2\n\n**Sequences**\n\n    {1..9}        => 1 2 3 4 5 6 7 8 9\n    {4..-4}       => 4 3 2 1 0 -1 -2 -3 -4\n    {1..20..3}    => 1 4 7 10 13 16 19\n    {a..j}        => a b c d e f g h i j\n    {j..a}        => j i h g f e d c b a\n    {a..z..3}     => a d g j m p s v y\n\n**Combination**\n\nSets and sequences can be mixed together or used along with any other strings.\n\n    {a,b,c}{1..3}   => a1 a2 a3 b1 b2 b3 c1 c2 c3\n    foo/{a,b,c}/bar => foo/a/bar foo/b/bar foo/c/bar\n\nThe fact that braces can be \"expanded\" from relatively simple patterns makes them ideal for quickly generating test fixtures, file paths, and similar use cases.\n\n## Brace matching\n\nIn addition to *expansion*, brace patterns are also useful for performing regular-expression-like matching.\n\nFor example, the pattern `foo/{1..3}/bar` would match any of following strings:\n\n    foo/1/bar\n    foo/2/bar\n    foo/3/bar\n\nBut not:\n\n    baz/1/qux\n    baz/2/qux\n    baz/3/qux\n\nBraces can also be combined with [glob patterns](https://github.com/jonschlinkert/micromatch) to perform more advanced wildcard matching. For example, the pattern `*/{1..3}/*` would match any of following strings:\n\n    foo/1/bar\n    foo/2/bar\n    foo/3/bar\n    baz/1/qux\n    baz/2/qux\n    baz/3/qux\n\n## Brace matching pitfalls\n\nAlthough brace patterns offer a user-friendly way of matching ranges or sets of strings, there are also some major disadvantages and potential risks you should be aware of.\n\n### tldr\n\n**\"brace bombs\"**\n\n*   brace expansion can eat up a huge amount of processing resources\n*   as brace patterns increase *linearly in size*, the system resources required to expand the pattern increase exponentially\n*   users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!)\n\nFor a more detailed explanation with examples, see the [geometric complexity](#geometric-complexity) section.\n\n### The solution\n\nJump to the [performance section](#performance) to see how Braces solves this problem in comparison to other libraries.\n\n### Geometric complexity\n\nAt minimum, brace patterns with sets limited to two elements have quadradic or `O(n^2)` complexity. But the complexity of the algorithm increases exponentially as the number of sets, *and elements per set*, increases, which is `O(n^c)`.\n\nFor example, the following sets demonstrate quadratic (`O(n^2)`) complexity:\n\n    {1,2}{3,4}      => (2X2)    => 13 14 23 24\n    {1,2}{3,4}{5,6} => (2X2X2)  => 135 136 145 146 235 236 245 246\n\nBut add an element to a set, and we get a n-fold Cartesian product with `O(n^c)` complexity:\n\n    {1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 \n                                        249 257 258 259 267 268 269 347 348 349 357 \n                                        358 359 367 368 369\n\nNow, imagine how this complexity grows given that each element is a n-tuple:\n\n    {1..100}{1..100}         => (100X100)     => 10,000 elements (38.4 kB)\n    {1..100}{1..100}{1..100} => (100X100X100) => 1,000,000 elements (5.76 MB)\n\nAlthough these examples are clearly contrived, they demonstrate how brace patterns can quickly grow out of control.\n\n**More information**\n\nInterested in learning more about brace expansion?\n\n*   [linuxjournal/bash-brace-expansion](http://www.linuxjournal.com/content/bash-brace-expansion)\n*   [rosettacode/Brace\\_expansion](https://rosettacode.org/wiki/Brace_expansion)\n*   [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)\n\n</details>\n\n## Performance\n\nBraces is not only screaming fast, it's also more accurate the other brace expansion libraries.\n\n### Better algorithms\n\nFortunately there is a solution to the [\"brace bomb\" problem](#brace-matching-pitfalls): *don't expand brace patterns into an array when they're used for matching*.\n\nInstead, convert the pattern into an optimized regular expression. This is easier said than done, and braces is the only library that does this currently.\n\n**The proof is in the numbers**\n\nMinimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using `braces()` and `minimatch.braceExpand()`, respectively.\n\n| **Pattern**                 | **braces**         | **\\[minimatch]\\[]**            |\n| ---                         | ---                | ---                          |\n| `{1..9007199254740991}`\\[^1] | `298 B` (5ms 459μs)|  N/A (freezes)               |\n| `{1..1000000000000000}`     | `41 B` (1ms 15μs)  |  N/A (freezes)               |\n| `{1..100000000000000}`      | `40 B` (890μs)     |  N/A (freezes)               |\n| `{1..10000000000000}`       | `39 B` (2ms 49μs)  |  N/A (freezes)               |\n| `{1..1000000000000}`        | `38 B` (608μs)     |  N/A (freezes)               |\n| `{1..100000000000}`         | `37 B` (397μs)     |  N/A (freezes)               |\n| `{1..10000000000}`          | `35 B` (983μs)     |  N/A (freezes)               |\n| `{1..1000000000}`           | `34 B` (798μs)     |  N/A (freezes)               |\n| `{1..100000000}`            | `33 B` (733μs)     |  N/A (freezes)               |\n| `{1..10000000}`             | `32 B` (5ms 632μs) | `78.89 MB` (16s 388ms 569μs) |\n| `{1..1000000}`              | `31 B` (1ms 381μs) | `6.89 MB` (1s 496ms 887μs)   |\n| `{1..100000}`               | `30 B` (950μs)     | `588.89 kB` (146ms 921μs)    |\n| `{1..10000}`                | `29 B` (1ms 114μs) | `48.89 kB` (14ms 187μs)      |\n| `{1..1000}`                 | `28 B` (760μs)     | `3.89 kB` (1ms 453μs)        |\n| `{1..100}`                  | `22 B` (345μs)     | `291 B` (196μs)              |\n| `{1..10}`                   | `10 B` (533μs)     | `20 B` (37μs)                |\n| `{1..3}`                    | `7 B` (190μs)      | `5 B` (27μs)                 |\n\n### Faster algorithms\n\nWhen you need expansion, braces is still much faster.\n\n*(the following results were generated using `braces.expand()` and `minimatch.braceExpand()`, respectively)*\n\n| **Pattern**     | **braces**                  | **\\[minimatch]\\[]**            |\n| ---             | ---                         | ---                          |\n| `{1..10000000}` | `78.89 MB` (2s 698ms 642μs) | `78.89 MB` (18s 601ms 974μs) |\n| `{1..1000000}`  | `6.89 MB` (458ms 576μs)     | `6.89 MB` (1s 491ms 621μs)   |\n| `{1..100000}`   | `588.89 kB` (20ms 728μs)    | `588.89 kB` (156ms 919μs)    |\n| `{1..10000}`    | `48.89 kB` (2ms 202μs)      | `48.89 kB` (13ms 641μs)      |\n| `{1..1000}`     | `3.89 kB` (1ms 796μs)       | `3.89 kB` (1ms 958μs)        |\n| `{1..100}`      | `291 B` (424μs)             | `291 B` (211μs)              |\n| `{1..10}`       | `20 B` (487μs)              | `20 B` (72μs)                |\n| `{1..3}`        | `5 B` (166μs)               | `5 B` (27μs)                 |\n\nIf you'd like to run these comparisons yourself, see [test/support/generate.js](test/support/generate.js).\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm benchmark\n```\n\n### Latest results\n\nBraces is more accurate, without sacrificing performance.\n\n```bash\n# range (expanded)\n  braces x 29,040 ops/sec ±3.69% (91 runs sampled))\n  minimatch x 4,735 ops/sec ±1.28% (90 runs sampled)\n\n# range (optimized for regex)\n  braces x 382,878 ops/sec ±0.56% (94 runs sampled)\n  minimatch x 1,040 ops/sec ±0.44% (93 runs sampled)\n\n# nested ranges (expanded)\n  braces x 19,744 ops/sec ±2.27% (92 runs sampled))\n  minimatch x 4,579 ops/sec ±0.50% (93 runs sampled)\n\n# nested ranges (optimized for regex)\n  braces x 246,019 ops/sec ±2.02% (93 runs sampled)\n  minimatch x 1,028 ops/sec ±0.39% (94 runs sampled)\n\n# set (expanded) \n  braces x 138,641 ops/sec ±0.53% (95 runs sampled)\n  minimatch x 219,582 ops/sec ±0.98% (94 runs sampled)\n\n# set (optimized for regex)\n  braces x 388,408 ops/sec ±0.41% (95 runs sampled)\n  minimatch x 44,724 ops/sec ±0.91% (89 runs sampled)\n\n# nested sets (expanded)\n  braces x 84,966 ops/sec ±0.48% (94 runs sampled)\n  minimatch x 140,720 ops/sec ±0.37% (95 runs sampled)\n\n# nested sets (optimized for regex)\n  braces x 263,340 ops/sec ±2.06% (92 runs sampled)\n  minimatch x 28,714 ops/sec ±0.40% (90 runs sampled)\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Contributors\n\n| **Commits** | **Contributor** |\\\n| --- | --- |\\\n| 197 | [jonschlinkert](https://github.com/jonschlinkert) |\\\n| 4   | [doowb](https://github.com/doowb) |\\\n| 1   | [es128](https://github.com/es128) |\\\n| 1   | [eush77](https://github.com/eush77) |\\\n| 1   | [hemanth](https://github.com/hemanth) |\\\n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 08, 2019.*\n"},{"text":"# character-entities\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nMap of named character references.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [characterEntities](#characterentities)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis is a map of named character references in HTML (latest) to the characters\nthey represent.\n\n## When should I use this?\n\nMaybe when you’re writing an HTML parser or minifier, but otherwise probably\nnever!\nEven then, it might be better to use [`parse-entities`][parse-entities] or\n[`stringify-entities`][stringify-entities].\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install character-entities\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {characterEntities} from 'https://cdn.skypack.dev/character-entities@2?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {characterEntities} from 'https://cdn.skypack.dev/character-entities@2?min'\n</script>\n```\n\n## Use\n\n```js\nimport {characterEntities} from 'character-entities'\n\nconsole.log(characterEntities.AElig) // => 'Æ'\nconsole.log(characterEntities.aelig) // => 'æ'\nconsole.log(characterEntities.amp) // => '&'\n```\n\n## API\n\nThis package exports the following identifiers: `characterEntities`.\nThere is no default export.\n\n### characterEntities\n\nMapping between (case-sensitive) character entity names to replacements.\nSee [`html.spec.whatwg.org`][html] for more info.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Related\n\n*   [`wooorm/parse-entities`](https://github.com/wooorm/parse-entities)\n    — parse (decode) character references\n*   [`wooorm/stringify-entities`](https://github.com/wooorm/stringify-entities)\n    — serialize (encode) character references\n*   [`wooorm/character-entities-html4`](https://github.com/wooorm/character-entities-html4)\n    — info on named character references in HTML 4\n*   [`character-reference-invalid`](https://github.com/wooorm/character-reference-invalid)\n    — info on invalid numeric character references\n*   [`character-entities-legacy`](https://github.com/wooorm/character-entities-legacy)\n    — info on legacy named character references\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/character-entities/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/character-entities/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/character-entities.svg\n\n[coverage]: https://codecov.io/github/wooorm/character-entities\n\n[downloads-badge]: https://img.shields.io/npm/dm/character-entities.svg\n\n[downloads]: https://www.npmjs.com/package/character-entities\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/character-entities.svg\n\n[size]: https://bundlephobia.com/result?p=character-entities\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[parse-entities]: https://github.com/wooorm/parse-entities\n\n[stringify-entities]: https://github.com/wooorm/stringify-entities\n\n[html]: https://html.spec.whatwg.org/multipage/syntax.html#named-character-references\n"},{"text":"# debug\n\n[![Build Status](https://travis-ci.org/debug-js/debug.svg?branch=master)](https://travis-ci.org/debug-js/debug)  [![Coverage Status](https://coveralls.io/repos/github/debug-js/debug/badge.svg?branch=master)](https://coveralls.io/github/debug-js/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n<img width=\"647\" src=\"https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png\">\n\nA tiny JavaScript debugging utility modelled after Node.js core's debugging\ntechnique. Works in Node.js and web browsers.\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample [*app.js*](./examples/node/app.js):\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %o', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample [*worker.js*](./examples/node/worker.js):\n\n```js\nvar a = require('debug')('worker:a')\n  , b = require('debug')('worker:b');\n\nfunction work() {\n  a('doing lots of uninteresting work');\n  setTimeout(work, Math.random() * 1000);\n}\n\nwork();\n\nfunction workb() {\n  b('doing some work');\n  setTimeout(workb, Math.random() * 2000);\n}\n\nworkb();\n```\n\nThe `DEBUG` environment variable is then used to enable these based on space or\ncomma-delimited names.\n\nHere are some examples:\n\n<img width=\"647\" alt=\"screen shot 2017-08-08 at 12 53 04 pm\" src=\"https://user-images.githubusercontent.com/71256/29091703-a6302cdc-7c38-11e7-8304-7c0b3bc600cd.png\">\n<img width=\"647\" alt=\"screen shot 2017-08-08 at 12 53 38 pm\" src=\"https://user-images.githubusercontent.com/71256/29091700-a62a6888-7c38-11e7-800b-db911291ca2b.png\">\n<img width=\"647\" alt=\"screen shot 2017-08-08 at 12 53 25 pm\" src=\"https://user-images.githubusercontent.com/71256/29091701-a62ea114-7c38-11e7-826a-2692bedca740.png\">\n\n#### Windows command prompt notes\n\n##### CMD\n\nOn Windows the environment variable is set using the `set` command.\n\n```cmd\nset DEBUG=*,-not_this\n```\n\nExample:\n\n```cmd\nset DEBUG=* & node app.js\n```\n\n##### PowerShell (VS Code default)\n\nPowerShell uses different syntax to set environment variables.\n\n```cmd\n$env:DEBUG = \"*,-not_this\"\n```\n\nExample:\n\n```cmd\n$env:DEBUG='app';node app.js\n```\n\nThen, run the program to be debugged as usual.\n\nnpm script example:\n\n```js\n  \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\",\n```\n\n## Namespace Colors\n\nEvery debug instance has a color generated for it based on its namespace name.\nThis helps when visually parsing the debug output to identify which debug instance\na debug line belongs to.\n\n#### Node.js\n\nIn Node.js, colors are enabled when stderr is a TTY. You also *should* install\nthe [`supports-color`](https://npmjs.org/supports-color) module alongside debug,\notherwise debug will only use a small handful of basic colors.\n\n<img width=\"521\" src=\"https://user-images.githubusercontent.com/71256/29092181-47f6a9e6-7c3a-11e7-9a14-1928d8a711cd.png\">\n\n#### Web Browser\n\nColors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\noption. These are WebKit web inspectors, Firefox ([since version\n31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\nand the Firebug plugin for Firefox (any version).\n\n<img width=\"524\" src=\"https://user-images.githubusercontent.com/71256/29092033-b65f9f2e-7c39-11e7-8e32-f6f0d8e865c1.png\">\n\n## Millisecond diff\n\nWhen actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n<img width=\"647\" src=\"https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png\">\n\nWhen stdout is not a TTY, `Date#toISOString()` is used, making it more useful for logging the debug information as shown below:\n\n<img width=\"647\" src=\"https://user-images.githubusercontent.com/71256/29091956-6bd78372-7c39-11e7-8c55-c948396d6edd.png\">\n\n## Conventions\n\nIf you're using this in one or more of your libraries, you *should* use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you *should* prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".  If you append a \"\\*\" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable.  You can then use it for normal output as well as debug output.\n\n## Wildcards\n\nThe `*` character may be used as a wildcard. Suppose for example your library has\ndebuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\",\ninstead of listing all three with\n`DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do\n`DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\nYou can also exclude specific debuggers by prefixing them with a \"-\" character.\nFor example, `DEBUG=*,-connect:*` would include all debuggers except those\nstarting with \"connect:\".\n\n## Environment Variables\n\nWhen running through Node.js, you can set a few environment variables that will\nchange the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_HIDE_DATE` | Hide date from debug output (non-TTY).  |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth.                    |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n**Note:** The environment variables beginning with `DEBUG_` end up being\nconverted into an Options object that gets used with `%o`/`%O` formatters.\nSee the Node.js documentation for\n[`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfor the complete list.\n\n## Formatters\n\nDebug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting.\nBelow are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '\\[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\nYou can add custom formatters by extending the `debug.formatters` object.\nFor example, if you wanted to add support for rendering a Buffer as hex with\n`%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser Support\n\nYou can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\nor just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\nif you don't want to build it yourself.\n\nDebug's enable state is currently persisted by `localStorage`.\nConsider the situation shown below where you have `worker:a` and `worker:b`,\nand wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n## Output streams\n\nBy default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample [*stdout.js*](./examples/node/stdout.js):\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n## Extend\n\nYou can simply extend debugger\n\n```js\nconst log = require('debug')('auth');\n\n//creates new debug instance with extended namespace\nconst logSign = log.extend('sign');\nconst logLogin = log.extend('login');\n\nlog('hello'); // auth hello\nlogSign('hello'); //auth:sign hello\nlogLogin('hello'); //auth:login hello\n```\n\n## Set dynamically\n\nYou can also enable debug dynamically by calling the `enable()` method :\n\n```js\nlet debug = require('debug');\n\nconsole.log(1, debug.enabled('test'));\n\ndebug.enable('test');\nconsole.log(2, debug.enabled('test'));\n\ndebug.disable();\nconsole.log(3, debug.enabled('test'));\n\n```\n\nprint :\n\n    1 false\n    2 true\n    3 false\n\nUsage :\\\n`enable(namespaces)`\\\n`namespaces` can include modes separated by a colon and wildcards.\n\nNote that calling `enable()` completely overrides previously set DEBUG variable :\n\n    $ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))'\n    => false\n\n`disable()`\n\nWill disable all namespaces. The functions returns the namespaces currently\nenabled (and skipped). This can be useful if you want to disable debugging\ntemporarily without knowing what was enabled to begin with.\n\nFor example:\n\n```js\nlet debug = require('debug');\ndebug.enable('foo:*,-foo:bar');\nlet namespaces = debug.disable();\ndebug.enable(namespaces);\n```\n\nNote: There is no guarantee that the string will be identical to the initial\nenable string, but semantically they will be identical.\n\n## Checking whether a debug target is enabled\n\nAfter you've created a debug instance, you can determine whether or not it is\nenabled by checking the `enabled` property:\n\n```javascript\nconst debug = require('debug')('http');\n\nif (debug.enabled) {\n  // do stuff...\n}\n```\n\nYou can also manually toggle this property to force the debug instance to be\nenabled or disabled.\n\n## Usage in child processes\n\nDue to the way `debug` detects if the output is a TTY or not, colors are not shown in child processes when `stderr` is piped. A solution is to pass the `DEBUG_COLORS=1` environment variable to the child process.\\\nFor example:\n\n```javascript\nworker = fork(WORKER_WRAP_PATH, [workerPath], {\n  stdio: [\n    /* stdin: */ 0,\n    /* stdout: */ 'pipe',\n    /* stderr: */ 'pipe',\n    'ipc',\n  ],\n  env: Object.assign({}, process.env, {\n    DEBUG_COLORS: 1 // without this settings, colors won't be shown\n  }),\n});\n\nworker.stderr.pipe(process.stderr, { end: false });\n```\n\n## Authors\n\n*   TJ Holowaychuk\n*   Nathan Rajlich\n*   Andrew Rhyne\n*   Josh Junon\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities. \\[[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. \\[[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a> <a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2017 TJ Holowaychuk \\<tj@vision-media.ca>\nCopyright (c) 2018-2021 Josh Junon\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"},{"text":"# decode-named-character-reference\n\n[![Build Status][build-badge]][build]\n[![Coverage Status][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nDecode named character references.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`decodeNamedCharacterReference(value)`](#decodenamedcharacterreferencevalue)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nA workaround for webpack.\n\n## When should I use this?\n\nNever use this.\nUse [`parse-entities`][parse-entities].\nIt uses this.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install decode-named-character-reference\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {decodeNamedCharacterReference} from 'https://cdn.skypack.dev/decode-named-character-reference@1?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {decodeNamedCharacterReference} from 'https://cdn.skypack.dev/decode-named-character-reference@1?min'\n</script>\n```\n\n## Use\n\n```js\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\n\ndecodeNamedCharacterReference('amp') //=> '&'\n```\n\n## API\n\nThis package exports the following identifier: `decodeNamedCharacterReference`.\nThere is no default export.\n\n### `decodeNamedCharacterReference(value)`\n\nAgain, use [`parse-entities`][parse-entities].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Related\n\n*   [`parse-entities`][parse-entities]\n    — parse (decode) HTML character references\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/decode-named-character-reference/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/decode-named-character-reference/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/decode-named-character-reference.svg\n\n[coverage]: https://codecov.io/github/wooorm/decode-named-character-reference\n\n[downloads-badge]: https://img.shields.io/npm/dm/decode-named-character-reference.svg\n\n[downloads]: https://www.npmjs.com/package/decode-named-character-reference\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/decode-named-character-reference.svg\n\n[size]: https://bundlephobia.com/result?p=decode-named-character-reference\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[parse-entities]: https://github.com/wooorm/parse-entities\n"},{"text":"# dequal [![CI](https://github.com/lukeed/dequal/workflows/CI/badge.svg)](https://github.com/lukeed/dequal/actions)\n\n> A tiny (304B to 489B) utility to check for deep equality\n\nThis module supports comparison of all types, including `Function`, `RegExp`, `Date`, `Set`, `Map`, `TypedArray`s, `DataView`, `null`, `undefined`, and `NaN` values. Complex values (eg, Objects, Arrays, Sets, Maps, etc) are traversed recursively.\n\n> **Important:**\n>\n> *   key order **within Objects** does not matter\n> *   value order **within Arrays** *does* matter\n> *   values **within Sets and Maps** use value equality\n> *   keys **within Maps** use value equality\n\n## Install\n\n    $ npm install --save dequal\n\n## Modes\n\nThere are two \"versions\" of `dequal` available:\n\n#### `dequal`\n\n> **Size (gzip):** 489 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/dequal/dist/index.js), [ES Module](https://unpkg.com/dequal/dist/index.mjs), [UMD](https://unpkg.com/dequal/dist/index.min.js)\n\n#### `dequal/lite`\n\n> **Size (gzip):** 304 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/dequal/lite/index.js), [ES Module](https://unpkg.com/dequal/lite/index.mjs)\n\n|  | IE9+ | Number | String | Date | RegExp | Object | Array | Class | Set | Map | ArrayBuffer | [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects) | [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) |\n|-|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| `dequal` | :x: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: |\n| `dequal/lite` | :+1: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :white\\_check\\_mark: | :x: | :x: | :x: | :x: | :x: |\n\n> <sup>**Note:** Table scrolls horizontally!</sup>\n\n## Usage\n\n```js\nimport { dequal } from 'dequal';\n\ndequal(1, 1); //=> true\ndequal({}, {}); //=> true\ndequal('foo', 'foo'); //=> true\ndequal([1, 2, 3], [1, 2, 3]); //=> true\ndequal(dequal, dequal); //=> true\ndequal(/foo/, /foo/); //=> true\ndequal(null, null); //=> true\ndequal(NaN, NaN); //=> true\ndequal([], []); //=> true\ndequal(\n  [{ a:1 }, [{ b:{ c:[1] } }]],\n  [{ a:1 }, [{ b:{ c:[1] } }]]\n); //=> true\n\ndequal(1, '1'); //=> false\ndequal(null, undefined); //=> false\ndequal({ a:1, b:[2,3] }, { a:1, b:[2,5] }); //=> false\ndequal(/foo/i, /bar/g); //=> false\n```\n\n## API\n\n### dequal(foo, bar)\n\nReturns: `Boolean`\n\nBoth `foo` and `bar` can be of any type.<br>\nA `Boolean` is returned indicating if the two were deeply equal.\n\n## Benchmarks\n\n> Running Node v10.13.0\n\nThe benchmarks can be found in the [`/bench`](/bench) directory. They are separated into two categories:\n\n*   `basic` – compares an object comprised of `String`, `Number`, `Date`, `Array`, and `Object` values.\n*   `complex` – like `basic`, but adds `RegExp`, `Map`, `Set`, and `Uint8Array` values.\n\n> **Note:** Only candidates that pass validation step(s) are listed. <br>For example, `fast-deep-equal/es6` handles `Set` and `Map` values, but uses *referential equality* while those listed use *value equality*.\n\n    Load times:\n      assert             0.109ms\n      util               0.006ms\n      fast-deep-equal    0.479ms\n      lodash/isequal    22.826ms\n      nano-equal         0.417ms\n      dequal             0.396ms\n      dequal/lite        0.264ms\n\n    Benchmark :: basic\n      assert.deepStrictEqual  x    325,262 ops/sec ±0.57% (94 runs sampled)\n      util.isDeepStrictEqual  x    318,812 ops/sec ±0.87% (94 runs sampled)\n      fast-deep-equal         x  1,332,393 ops/sec ±0.36% (93 runs sampled)\n      lodash.isEqual          x    269,129 ops/sec ±0.59% (95 runs sampled)\n      nano-equal              x  1,122,053 ops/sec ±0.36% (96 runs sampled)\n      dequal/lite             x  1,700,972 ops/sec ±0.31% (94 runs sampled)\n      dequal                  x  1,698,972 ops/sec ±0.63% (97 runs sampled)\n\n    Benchmark :: complex\n      assert.deepStrictEqual  x    124,518 ops/sec ±0.64% (96 runs sampled)\n      util.isDeepStrictEqual  x    125,113 ops/sec ±0.24% (96 runs sampled)\n      lodash.isEqual          x     58,677 ops/sec ±0.49% (96 runs sampled)\n      dequal                  x    345,386 ops/sec ±0.27% (96 runs sampled)\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n"},{"text":"# How to Contribute\n\n## Pull Requests\n\nWe also accept [pull requests][pull-request]!\n\nGenerally we like to see pull requests that\n\n*   Maintain the existing code style\n*   Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request)\n*   Have [good commit messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n*   Have tests\n*   Don't decrease the current code coverage (see coverage/lcov-report/index.html)\n\n## Building\n\n    npm install\n    npm test\n\nThe `npm test -- dev` implements watching for tests within Node and `karma start` may be used for manual testing in browsers.\n\nIf you notice any problems, please report them to the GitHub issue tracker at\n<http://github.com/kpdecker/jsdiff/issues>.\n\n## Releasing\n\nJsDiff utilizes the [release yeoman generator][generator-release] to perform most release tasks.\n\nA full release may be completed with the following:\n\n    yo release\n    npm publish\n\n[generator-release]: https://github.com/walmartlabs/generator-release\n\n[pull-request]: https://github.com/kpdecker/jsdiff/pull/new/master\n"},{"text":"# jsdiff\n\n[![Build Status](https://secure.travis-ci.org/kpdecker/jsdiff.svg)](http://travis-ci.org/kpdecker/jsdiff)\n[![Sauce Test Status](https://saucelabs.com/buildstatus/jsdiff)](https://saucelabs.com/u/jsdiff)\n\nA javascript text differencing implementation.\n\nBased on the algorithm proposed in\n[\"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986)](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927).\n\n## Installation\n\n```bash\nnpm install diff --save\n```\n\n## API\n\n*   `Diff.diffChars(oldStr, newStr[, options])` - diffs two blocks of text, comparing character by character.\n\n    Returns a list of change objects (See below).\n\n    Options\n\n    *   `ignoreCase`: `true` to ignore casing difference. Defaults to `false`.\n\n*   `Diff.diffWords(oldStr, newStr[, options])` - diffs two blocks of text, comparing word by word, ignoring whitespace.\n\n    Returns a list of change objects (See below).\n\n    Options\n\n    *   `ignoreCase`: Same as in `diffChars`.\n\n*   `Diff.diffWordsWithSpace(oldStr, newStr[, options])` - diffs two blocks of text, comparing word by word, treating whitespace as significant.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffLines(oldStr, newStr[, options])` - diffs two blocks of text, comparing line by line.\n\n    Options\n\n    *   `ignoreWhitespace`: `true` to ignore leading and trailing whitespace. This is the same as `diffTrimmedLines`\n    *   `newlineIsToken`: `true` to treat newline characters as separate tokens.  This allows for changes to the newline structure to occur independently of the line content and to be treated as such. In general this is the more human friendly form of `diffLines` and `diffLines` is better suited for patches and other computer friendly output.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffTrimmedLines(oldStr, newStr[, options])` - diffs two blocks of text, comparing line by line, ignoring leading and trailing whitespace.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffSentences(oldStr, newStr[, options])` - diffs two blocks of text, comparing sentence by sentence.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffCss(oldStr, newStr[, options])` - diffs two blocks of text, comparing CSS tokens.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffJson(oldObj, newObj[, options])` - diffs two JSON objects, comparing the fields defined on each. The order of fields, etc does not matter in this comparison.\n\n    Returns a list of change objects (See below).\n\n*   `Diff.diffArrays(oldArr, newArr[, options])` - diffs two arrays, comparing each item for strict equality (===).\n\n    Options\n\n    *   `comparator`: `function(left, right)` for custom equality checks\n\n    Returns a list of change objects (See below).\n\n*   `Diff.createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader)` - creates a unified diff patch.\n\n    Parameters:\n\n    *   `oldFileName` : String to be output in the filename section of the patch for the removals\n    *   `newFileName` : String to be output in the filename section of the patch for the additions\n    *   `oldStr` : Original string value\n    *   `newStr` : New string value\n    *   `oldHeader` : Additional information to include in the old file header\n    *   `newHeader` : Additional information to include in the new file header\n    *   `options` : An object with options. Currently, only `context` is supported and describes how many lines of context should be included.\n\n*   `Diff.createPatch(fileName, oldStr, newStr, oldHeader, newHeader)` - creates a unified diff patch.\n\n    Just like Diff.createTwoFilesPatch, but with oldFileName being equal to newFileName.\n\n*   `Diff.structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options)` - returns an object with an array of hunk objects.\n\n    This method is similar to createTwoFilesPatch, but returns a data structure\n    suitable for further processing. Parameters are the same as createTwoFilesPatch. The data structure returned may look like this:\n\n    ```js\n    {\n      oldFileName: 'oldfile', newFileName: 'newfile',\n      oldHeader: 'header1', newHeader: 'header2',\n      hunks: [{\n        oldStart: 1, oldLines: 3, newStart: 1, newLines: 3,\n        lines: [' line2', ' line3', '-line4', '+line5', '\\\\ No newline at end of file'],\n      }]\n    }\n    ```\n\n*   `Diff.applyPatch(source, patch[, options])` - applies a unified diff patch.\n\n    Return a string containing new version of provided data. `patch` may be a string diff or the output from the `parsePatch` or `structuredPatch` methods.\n\n    The optional `options` object may have the following keys:\n\n    *   `fuzzFactor`: Number of lines that are allowed to differ before rejecting a patch. Defaults to 0.\n    *   `compareLine(lineNumber, line, operation, patchContent)`: Callback used to compare to given lines to determine if they should be considered equal when patching. Defaults to strict equality but may be overridden to provide fuzzier comparison. Should return false if the lines should be rejected.\n\n*   `Diff.applyPatches(patch, options)` - applies one or more patches.\n\n    This method will iterate over the contents of the patch and apply to data provided through callbacks. The general flow for each patch index is:\n\n    *   `options.loadFile(index, callback)` is called. The caller should then load the contents of the file and then pass that to the `callback(err, data)` callback. Passing an `err` will terminate further patch execution.\n    *   `options.patched(index, content, callback)` is called once the patch has been applied. `content` will be the return value from `applyPatch`. When it's ready, the caller should call `callback(err)` callback. Passing an `err` will terminate further patch execution.\n\n    Once all patches have been applied or an error occurs, the `options.complete(err)` callback is made.\n\n*   `Diff.parsePatch(diffStr)` - Parses a patch into structured data\n\n    Return a JSON object representation of the a patch, suitable for use with the `applyPatch` method. This parses to the same structure returned by `Diff.structuredPatch`.\n\n*   `convertChangesToXML(changes)` - converts a list of changes to a serialized XML format\n\nAll methods above which accept the optional `callback` method will run in sync mode when that parameter is omitted and in async mode when supplied. This allows for larger diffs without blocking the event loop. This may be passed either directly as the final parameter or as the `callback` field in the `options` object.\n\n### Change Objects\n\nMany of the methods above return change objects. These objects consist of the following fields:\n\n*   `value`: Text content\n*   `added`: True if the value was inserted into the new string\n*   `removed`: True if the value was removed from the old string\n\nNote that some cases may omit a particular flag field. Comparison on the flag fields should always be done in a truthy or falsy manner.\n\n## Examples\n\nBasic example in Node\n\n```js\nrequire('colors');\nconst Diff = require('diff');\n\nconst one = 'beep boop';\nconst other = 'beep boob blah';\n\nconst diff = Diff.diffChars(one, other);\n\ndiff.forEach((part) => {\n  // green for additions, red for deletions\n  // grey for common parts\n  const color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  process.stderr.write(part.value[color]);\n});\n\nconsole.log();\n```\n\nRunning the above program should yield\n\n<img src=\"images/node_example.png\" alt=\"Node Example\">\n\nBasic example in a web page\n\n```html\n<pre id=\"display\"></pre>\n<script src=\"diff.js\"></script>\n<script>\nconst one = 'beep boop',\n    other = 'beep boob blah',\n    color = '';\n    \nlet span = null;\n\nconst diff = Diff.diffChars(one, other),\n    display = document.getElementById('display'),\n    fragment = document.createDocumentFragment();\n\ndiff.forEach((part) => {\n  // green for additions, red for deletions\n  // grey for common parts\n  const color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  span = document.createElement('span');\n  span.style.color = color;\n  span.appendChild(document\n    .createTextNode(part.value));\n  fragment.appendChild(span);\n});\n\ndisplay.appendChild(fragment);\n</script>\n```\n\nOpen the above .html file in a browser and you should see\n\n<img src=\"images/web_example.png\" alt=\"Node Example\">\n\n**[Full online demo](http://kpdecker.github.com/jsdiff)**\n\n## Compatibility\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/jsdiff.svg)](https://saucelabs.com/u/jsdiff)\n\njsdiff supports all ES3 environments with some known issues on IE8 and below. Under these browsers some diff algorithms such as word diff and others may fail due to lack of support for capturing groups in the `split` operation.\n\n## License\n\nSee [LICENSE](https://github.com/kpdecker/jsdiff/blob/master/LICENSE).\n"},{"text":"# Release Notes\n\n## Development\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v5.0.0...master)\n\n## v5.0.0\n\n*   Breaking: UMD export renamed from `JsDiff` to `Diff`.\n*   Breaking: Newlines separated into separate tokens for word diff.\n*   Breaking: Unified diffs now match [\"quirks\"](https://www.artima.com/weblogs/viewpost.jsp?thread=164293)\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v4.0.1...v5.0.0)\n\n## v4.0.1 - January 6th, 2019\n\n*   Fix main reference path - b826104\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v4.0.0...v4.0.1)\n\n## v4.0.0 - January 5th, 2019\n\n*   [#94](https://github.com/kpdecker/jsdiff/issues/94) - Missing \"No newline at end of file\" when comparing two texts that do not end in newlines ([@federicotdn](https://api.github.com/users/federicotdn))\n*   [#227](https://github.com/kpdecker/jsdiff/issues/227) - Licence\n*   [#199](https://github.com/kpdecker/jsdiff/issues/199) - Import statement for jsdiff\n*   [#159](https://github.com/kpdecker/jsdiff/issues/159) - applyPatch affecting wrong line number with with new lines\n*   [#8](https://github.com/kpdecker/jsdiff/issues/8) - A new state \"replace\"\n*   Drop ie9 from karma targets - 79c31bd\n*   Upgrade deps. Convert from webpack to rollup - 2c1a29c\n*   Make ()\\[]\"' as word boundaries between each other - f27b899\n*   jsdiff: Replaced phantomJS by chrome - ec3114e\n*   Add yarn.lock to .npmignore - 29466d8\n\nCompatibility notes:\n\n*   Bower and Component packages no longer supported\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.5.0...v4.0.0)\n\n## v3.5.0 - March 4th, 2018\n\n*   Omit redundant slice in join method of diffArrays - 1023590\n*   Support patches with empty lines - fb0f208\n*   Accept a custom JSON replacer function for JSON diffing - 69c7f0a\n*   Optimize parch header parser - 2aec429\n*   Fix typos - e89c832\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.4.0...v3.5.0)\n\n## v3.4.0 - October 7th, 2017\n\n*   [#183](https://github.com/kpdecker/jsdiff/issues/183) - Feature request: ability to specify a custom equality checker for `diffArrays`\n*   [#173](https://github.com/kpdecker/jsdiff/issues/173) - Bug: diffArrays gives wrong result on array of booleans\n*   [#158](https://github.com/kpdecker/jsdiff/issues/158) - diffArrays will not compare the empty string in array?\n*   comparator for custom equality checks - 30e141e\n*   count oldLines and newLines when there are conflicts - 53bf384\n*   Fix: diffArrays can compare falsey items - 9e24284\n*   Docs: Replace grunt with npm test - 00e2f94\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.3.1...v3.4.0)\n\n## v3.3.1 - September 3rd, 2017\n\n*   [#141](https://github.com/kpdecker/jsdiff/issues/141) - Cannot apply patch because my file delimiter is \"/r/n\" instead of \"/n\"\n*   [#192](https://github.com/kpdecker/jsdiff/pull/192) - Fix: Bad merge when adding new files (#189)\n*   correct spelling mistake - 21fa478\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.3.0...v3.3.1)\n\n## v3.3.0 - July 5th, 2017\n\n*   [#114](https://github.com/kpdecker/jsdiff/issues/114) - /patch/merge not exported\n*   Gracefully accept invalid newStart in hunks, same as patch(1) does. - d8a3635\n*   Use regex rather than starts/ends with for parsePatch - 6cab62c\n*   Add browser flag - e64f674\n*   refactor: simplified code a bit more - 8f8e0f2\n*   refactor: simplified code a bit - b094a6f\n*   fix: some corrections re ignoreCase option - 3c78fd0\n*   ignoreCase option - 3cbfbb5\n*   Sanitize filename while parsing patches - 2fe8129\n*   Added better installation methods - aced50b\n*   Simple export of functionality - 8690f31\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.2.0...v3.3.0)\n\n## v3.2.0 - December 26th, 2016\n\n*   [#156](https://github.com/kpdecker/jsdiff/pull/156) - Add `undefinedReplacement` option to `diffJson` ([@ewnd9](https://api.github.com/users/ewnd9))\n*   [#154](https://github.com/kpdecker/jsdiff/pull/154) - Add `examples` and `images` to `.npmignore`. ([@wtgtybhertgeghgtwtg](https://api.github.com/users/wtgtybhertgeghgtwtg))\n*   [#153](https://github.com/kpdecker/jsdiff/pull/153) - feat(structuredPatch): Pass options to diffLines ([@Kiougar](https://api.github.com/users/Kiougar))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.1.0...v3.2.0)\n\n## v3.1.0 - November 27th, 2016\n\n*   [#146](https://github.com/kpdecker/jsdiff/pull/146) - JsDiff.diffArrays to compare arrays ([@wvanderdeijl](https://api.github.com/users/wvanderdeijl))\n*   [#144](https://github.com/kpdecker/jsdiff/pull/144) - Split file using all possible line delimiter instead of hard-coded \"/n\" and join lines back using the original delimiters ([@soulbeing](https://api.github.com/users/soulbeing))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.0.1...v3.1.0)\n\n## v3.0.1 - October 9th, 2016\n\n*   [#139](https://github.com/kpdecker/jsdiff/pull/139) - Make README.md look nicer in npmjs.com ([@takenspc](https://api.github.com/users/takenspc))\n*   [#135](https://github.com/kpdecker/jsdiff/issues/135) - parsePatch combines patches from multiple files into a single IUniDiff when there is no \"Index\" line ([@ramya-rao-a](https://api.github.com/users/ramya-rao-a))\n*   [#124](https://github.com/kpdecker/jsdiff/issues/124) - IE7/IE8 failure since 2.0.0 ([@boneskull](https://api.github.com/users/boneskull))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v3.0.0...v3.0.1)\n\n## v3.0.0 - August 23rd, 2016\n\n*   [#130](https://github.com/kpdecker/jsdiff/pull/130) - Add callback argument to applyPatches `patched` option ([@piranna](https://api.github.com/users/piranna))\n*   [#120](https://github.com/kpdecker/jsdiff/pull/120) - Correctly handle file names containing spaces ([@adius](https://api.github.com/users/adius))\n*   [#119](https://github.com/kpdecker/jsdiff/pull/119) - Do single reflow ([@wifiextender](https://api.github.com/users/wifiextender))\n*   [#117](https://github.com/kpdecker/jsdiff/pull/117) - Make more usable with long strings. ([@abnbgist](https://api.github.com/users/abnbgist))\n\nCompatibility notes:\n\n*   applyPatches patch callback now is async and requires the callback be called to continue operation\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.2.3...v3.0.0)\n\n## v2.2.3 - May 31st, 2016\n\n*   [#118](https://github.com/kpdecker/jsdiff/pull/118) - Add a fix for applying 0-length destination patches ([@chaaz](https://api.github.com/users/chaaz))\n*   [#115](https://github.com/kpdecker/jsdiff/pull/115) - Fixed grammar in README ([@krizalys](https://api.github.com/users/krizalys))\n*   [#113](https://github.com/kpdecker/jsdiff/pull/113) - fix typo ([@vmazare](https://api.github.com/users/vmazare))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.2.2...v2.2.3)\n\n## v2.2.2 - March 13th, 2016\n\n*   [#102](https://github.com/kpdecker/jsdiff/issues/102) - diffJson with dates, returns empty curly braces ([@dr-dimitru](https://api.github.com/users/dr-dimitru))\n*   [#97](https://github.com/kpdecker/jsdiff/issues/97) - Whitespaces & diffWords ([@faiwer](https://api.github.com/users/faiwer))\n*   [#92](https://github.com/kpdecker/jsdiff/pull/92) - Fixes typo in the readme ([@bg451](https://api.github.com/users/bg451))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.2.1...v2.2.2)\n\n## v2.2.1 - November 12th, 2015\n\n*   [#89](https://github.com/kpdecker/jsdiff/pull/89) - add in display selector to readme ([@FranDias](https://api.github.com/users/FranDias))\n*   [#88](https://github.com/kpdecker/jsdiff/pull/88) - Split diffs based on file headers instead of 'Index:' metadata ([@piranna](https://api.github.com/users/piranna))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.2.0...v2.2.1)\n\n## v2.2.0 - October 29th, 2015\n\n*   [#80](https://github.com/kpdecker/jsdiff/pull/80) - Fix a typo: applyPath -> applyPatch ([@fluxxu](https://api.github.com/users/fluxxu))\n*   [#83](https://github.com/kpdecker/jsdiff/pull/83) - Add basic fuzzy matching to applyPatch ([@piranna](https://github.com/piranna))\n    [Commits](https://github.com/kpdecker/jsdiff/compare/v2.2.0...v2.2.0)\n\n## v2.2.0 - October 29th, 2015\n\n*   [#80](https://github.com/kpdecker/jsdiff/pull/80) - Fix a typo: applyPath -> applyPatch ([@fluxxu](https://api.github.com/users/fluxxu))\n*   [#83](https://github.com/kpdecker/jsdiff/pull/83) - Add basic fuzzy matching to applyPatch ([@piranna](https://github.com/piranna))\n    [Commits](https://github.com/kpdecker/jsdiff/compare/v2.1.3...v2.2.0)\n\n## v2.1.3 - September 30th, 2015\n\n*   [#78](https://github.com/kpdecker/jsdiff/pull/78) - fix: error throwing when apply patch to empty string ([@21paradox](https://api.github.com/users/21paradox))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.1.2...v2.1.3)\n\n## v2.1.2 - September 23rd, 2015\n\n*   [#76](https://github.com/kpdecker/jsdiff/issues/76) - diff headers give error ([@piranna](https://api.github.com/users/piranna))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.1.1...v2.1.2)\n\n## v2.1.1 - September 9th, 2015\n\n*   [#73](https://github.com/kpdecker/jsdiff/issues/73) - Is applyPatches() exposed in the API? ([@davidparsson](https://api.github.com/users/davidparsson))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.1.0...v2.1.1)\n\n## v2.1.0 - August 27th, 2015\n\n*   [#72](https://github.com/kpdecker/jsdiff/issues/72) - Consider using options object API for flag permutations ([@kpdecker](https://api.github.com/users/kpdecker))\n*   [#70](https://github.com/kpdecker/jsdiff/issues/70) - diffWords treats \\n at the end as significant whitespace ([@nesQuick](https://api.github.com/users/nesQuick))\n*   [#69](https://github.com/kpdecker/jsdiff/issues/69) - Missing count ([@wfalkwallace](https://api.github.com/users/wfalkwallace))\n*   [#68](https://github.com/kpdecker/jsdiff/issues/68) - diffLines seems broken ([@wfalkwallace](https://api.github.com/users/wfalkwallace))\n*   [#60](https://github.com/kpdecker/jsdiff/issues/60) - Support multiple diff hunks ([@piranna](https://api.github.com/users/piranna))\n*   [#54](https://github.com/kpdecker/jsdiff/issues/54) - Feature Request: 3-way merge ([@mog422](https://api.github.com/users/mog422))\n*   [#42](https://github.com/kpdecker/jsdiff/issues/42) - Fuzz factor for applyPatch ([@stuartpb](https://api.github.com/users/stuartpb))\n*   Move whitespace ignore out of equals method - 542063c\n*   Include source maps in babel output - 7f7ab21\n*   Merge diff/line and diff/patch implementations - 1597705\n*   Drop map utility method - 1ddc939\n*   Documentation for parsePatch and applyPatches - 27c4b77\n\nCompatibility notes:\n\n*   The undocumented ignoreWhitespace flag has been removed from the Diff equality check directly. This implementation may be copied to diff utilities if dependencies existed on this functionality.\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.0.2...v2.1.0)\n\n## v2.0.2 - August 8th, 2015\n\n*   [#67](https://github.com/kpdecker/jsdiff/issues/67) - cannot require from npm module in node ([@commenthol](https://api.github.com/users/commenthol))\n*   Convert to chai since we don’t support IE8 - a96bbad\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.0.1...v2.0.2)\n\n## v2.0.1 - August 7th, 2015\n\n*   Add release build at proper step - 57542fd\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v2.0.0...v2.0.1)\n\n## v2.0.0 - August 7th, 2015\n\n*   [#66](https://github.com/kpdecker/jsdiff/issues/66) - Add karma and sauce tests ([@kpdecker](https://api.github.com/users/kpdecker))\n*   [#65](https://github.com/kpdecker/jsdiff/issues/65) - Create component repository for bower ([@kpdecker](https://api.github.com/users/kpdecker))\n*   [#64](https://github.com/kpdecker/jsdiff/issues/64) - Automatically call removeEmpty for all tokenizer calls ([@kpdecker](https://api.github.com/users/kpdecker))\n*   [#62](https://github.com/kpdecker/jsdiff/pull/62) - Allow access to structured object representation of patch data ([@bittrance](https://api.github.com/users/bittrance))\n*   [#61](https://github.com/kpdecker/jsdiff/pull/61) - Use svg instead of png to get better image quality ([@PeterDaveHello](https://api.github.com/users/PeterDaveHello))\n*   [#29](https://github.com/kpdecker/jsdiff/issues/29) - word tokenizer works only for 7 bit ascii ([@plasmagunman](https://api.github.com/users/plasmagunman))\n\nCompatibility notes:\n\n*   `this.removeEmpty` is now called automatically for all instances. If this is not desired, this may be overridden on a per instance basis.\n*   The library has been refactored to use some ES6 features. The external APIs should remain the same, but bower projects that directly referenced the repository will now have to point to the [components/jsdiff](https://github.com/components/jsdiff) repository.\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.4.0...v2.0.0)\n\n## v1.4.0 - May 6th, 2015\n\n*   [#57](https://github.com/kpdecker/jsdiff/issues/57) - createPatch -> applyPatch failed. ([@mog422](https://api.github.com/users/mog422))\n*   [#56](https://github.com/kpdecker/jsdiff/pull/56) - Two files patch ([@rgeissert](https://api.github.com/users/rgeissert))\n*   [#14](https://github.com/kpdecker/jsdiff/issues/14) - Flip added and removed order? ([@jakesandlund](https://api.github.com/users/jakesandlund))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.3.2...v1.4.0)\n\n## v1.3.2 - March 30th, 2015\n\n*   [#53](https://github.com/kpdecker/jsdiff/pull/53) - Updated README.MD with Bower installation instructions ([@ofbriggs](https://api.github.com/users/ofbriggs))\n*   [#49](https://github.com/kpdecker/jsdiff/issues/49) - Cannot read property 'oldlines' of undefined ([@nwtn](https://api.github.com/users/nwtn))\n*   [#44](https://github.com/kpdecker/jsdiff/issues/44) - invalid-meta jsdiff is missing \"main\" entry in bower.json\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.3.1...v1.3.2)\n\n## v1.3.1 - March 13th, 2015\n\n*   [#52](https://github.com/kpdecker/jsdiff/pull/52) - Fix for #51 Wrong result of JsDiff.diffLines ([@felicienfrancois](https://api.github.com/users/felicienfrancois))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.3.0...v1.3.1)\n\n## v1.3.0 - March 2nd, 2015\n\n*   [#47](https://github.com/kpdecker/jsdiff/pull/47) - Adding Diff Trimmed Lines ([@JamesGould123](https://api.github.com/users/JamesGould123))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.2.2...v1.3.0)\n\n## v1.2.2 - January 26th, 2015\n\n*   [#45](https://github.com/kpdecker/jsdiff/pull/45) - Fix AMD module loading ([@pedrocarrico](https://api.github.com/users/pedrocarrico))\n*   [#43](https://github.com/kpdecker/jsdiff/pull/43) - added a bower file ([@nbrustein](https://api.github.com/users/nbrustein))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.2.1...v1.2.2)\n\n## v1.2.1 - December 26th, 2014\n\n*   [#41](https://github.com/kpdecker/jsdiff/pull/41) - change condition of using node export system. ([@ironhee](https://api.github.com/users/ironhee))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.2.0...v1.2.1)\n\n## v1.2.0 - November 29th, 2014\n\n*   [#37](https://github.com/kpdecker/jsdiff/pull/37) - Add support for sentences. ([@vmariano](https://api.github.com/users/vmariano))\n*   [#28](https://github.com/kpdecker/jsdiff/pull/28) - Implemented diffJson ([@papandreou](https://api.github.com/users/papandreou))\n*   [#27](https://github.com/kpdecker/jsdiff/issues/27) - Slow to execute over diffs with a large number of changes ([@termi](https://api.github.com/users/termi))\n*   Allow for optional async diffing - 19385b9\n*   Fix diffChars implementation - eaa44ed\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.1.0...v1.2.0)\n\n## v1.1.0 - November 25th, 2014\n\n*   [#33](https://github.com/kpdecker/jsdiff/pull/33) - AMD and global exports ([@ovcharik](https://api.github.com/users/ovcharik))\n*   [#32](https://github.com/kpdecker/jsdiff/pull/32) - Add support for component ([@vmariano](https://api.github.com/users/vmariano))\n*   [#31](https://github.com/kpdecker/jsdiff/pull/31) - Don't rely on Array.prototype.map ([@papandreou](https://api.github.com/users/papandreou))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.0.8...v1.1.0)\n\n## v1.0.8 - December 22nd, 2013\n\n*   [#24](https://github.com/kpdecker/jsdiff/pull/24) - Handle windows newlines on non windows machines. ([@benogle](https://api.github.com/users/benogle))\n*   [#23](https://github.com/kpdecker/jsdiff/pull/23) - Prettied up the API formatting a little, and added basic node and web examples ([@airportyh](https://api.github.com/users/airportyh))\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.0.7...v1.0.8)\n\n## v1.0.7 - September 11th, 2013\n\n*   [#22](https://github.com/kpdecker/jsdiff/pull/22) - Added variant of WordDiff that doesn't ignore whitespace differences ([@papandreou](https://api.github.com/users/papandreou)\n\n*   Add 0.10 to travis tests - 243a526\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.0.6...v1.0.7)\n\n## v1.0.6 - August 30th, 2013\n\n*   [#19](https://github.com/kpdecker/jsdiff/pull/19) - Explicitly define contents of npm package ([@sindresorhus](https://api.github.com/users/sindresorhus)\n\n[Commits](https://github.com/kpdecker/jsdiff/compare/v1.0.5...v1.0.6)\n"},{"text":"# dir-glob [![Build Status](https://travis-ci.org/kevva/dir-glob.svg?branch=master)](https://travis-ci.org/kevva/dir-glob)\n\n> Convert directories to glob compatible strings\n\n## Install\n\n    $ npm install dir-glob\n\n## Usage\n\n```js\nconst dirGlob = require('dir-glob');\n\n(async () => {\n\tconsole.log(await dirGlob(['index.js', 'test.js', 'fixtures']));\n\t//=> ['index.js', 'test.js', 'fixtures/**']\n\n\tconsole.log(await dirGlob(['index.js', 'inner_folder'], {cwd: 'fixtures'}));\n\t//=> ['index.js', 'inner_folder/**']\n\n\tconsole.log(await dirGlob(['lib/**', 'fixtures'], {\n\t\tfiles: ['test', 'unicorn']\n\t\textensions: ['js']\n\t}));\n\t//=> ['lib/**', 'fixtures/**/test.js', 'fixtures/**/unicorn.js']\n\n\tconsole.log(await dirGlob(['lib/**', 'fixtures'], {\n\t\tfiles: ['test', 'unicorn', '*.jsx'],\n\t\textensions: ['js', 'png']\n\t}));\n\t//=> ['lib/**', 'fixtures/**/test.{js,png}', 'fixtures/**/unicorn.{js,png}', 'fixtures/**/*.jsx']\n})();\n```\n\n## API\n\n### dirGlob(input, options?)\n\nReturns a `Promise<string[]>` with globs.\n\n### dirGlob.sync(input, options?)\n\nReturns a `string[]` with globs.\n\n#### input\n\nType: `string | string[]`\n\nPaths.\n\n#### options\n\nType: `object`\n\n##### extensions\n\nType: `string[]`\n\nAppend extensions to the end of your globs.\n\n##### files\n\nType: `string[]`\n\nOnly glob for certain files.\n\n##### cwd\n\nType: `string[]`\n\nTest in specific directory.\n"},{"text":"# 3.0.2 / 2018-07-19\n\n*   \\[Fix] Prevent merging `__proto__` property (#48)\n*   \\[Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`\n*   \\[Tests] up to `node` `v10.7`, `v9.11`, `v8.11`, `v7.10`, `v6.14`, `v4.9`; use `nvm install-latest-npm`\n\n# 3.0.1 / 2017-04-27\n\n*   \\[Fix] deep extending should work with a non-object (#46)\n*   \\[Dev Deps] update `tape`, `eslint`, `@ljharb/eslint-config`\n*   \\[Tests] up to `node` `v7.9`, `v6.10`, `v4.8`; improve matrix\n*   \\[Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG.\n*   \\[Docs] Add example to readme (#34)\n\n# 3.0.0 / 2015-07-01\n\n*   \\[Possible breaking change] Use global \"strict\" directive (#32)\n*   \\[Tests] `int` is an ES3 reserved word\n*   \\[Tests] Test up to `io.js` `v2.3`\n*   \\[Tests] Add `npm run eslint`\n*   \\[Dev Deps] Update `covert`, `jscs`\n\n# 2.0.1 / 2015-04-25\n\n*   Use an inline `isArray` check, for ES3 browsers. (#27)\n*   Some old browsers fail when an identifier is `toString`\n*   Test latest `node` and `io.js` versions on `travis-ci`; speed up builds\n*   Add license info to package.json (#25)\n*   Update `tape`, `jscs`\n*   Adding a CHANGELOG\n\n# 2.0.0 / 2014-10-01\n\n*   Increase code coverage to 100%; run code coverage as part of tests\n*   Add `npm run lint`; Run linter as part of tests\n*   Remove nodeType and setInterval checks in isPlainObject\n*   Updating `tape`, `jscs`, `covert`\n*   General style and README cleanup\n\n# 1.3.0 / 2014-06-20\n\n*   Add component.json for browser support (#18)\n*   Use SVG for badges in README (#16)\n*   Updating `tape`, `covert`\n*   Updating travis-ci to work with multiple node versions\n*   Fix `deep === false` bug (returning target as {}) (#14)\n*   Fixing constructor checks in isPlainObject\n*   Adding additional test coverage\n*   Adding `npm run coverage`\n*   Add LICENSE (#13)\n*   Adding a warning about `false`, per #11\n*   General style and whitespace cleanup\n\n# 1.2.1 / 2013-09-14\n\n*   Fixing hasOwnProperty bugs that would only have shown up in specific browsers. Fixes #8\n*   Updating `tape`\n\n# 1.2.0 / 2013-09-02\n\n*   Updating the README: add badges\n*   Adding a missing variable reference.\n*   Using `tape` instead of `buster` for tests; add more tests (#7)\n*   Adding node 0.10 to Travis CI (#6)\n*   Enabling \"npm test\" and cleaning up package.json (#5)\n*   Add Travis CI.\n\n# 1.1.3 / 2012-12-06\n\n*   Added unit tests.\n*   Ensure extend function is named. (Looks nicer in a stack trace.)\n*   README cleanup.\n\n# 1.1.1 / 2012-11-07\n\n*   README cleanup.\n*   Added installation instructions.\n*   Added a missing semicolon\n\n# 1.0.0 / 2012-04-08\n\n*   Initial commit\n"},{"text":"[![Build Status][travis-svg]][travis-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n\n# extend() for Node.js <sup>[![Version Badge][npm-version-png]][npm-url]</sup>\n\n`node-extend` is a port of the classic extend() method from jQuery. It behaves as you expect. It is simple, tried and true.\n\nNotes:\n\n*   Since Node.js >= 4,\n    [`Object.assign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    now offers the same functionality natively (but without the \"deep copy\" option).\n    See [ECMAScript 2015 (ES6) in Node.js](https://nodejs.org/en/docs/es6).\n*   Some native implementations of `Object.assign` in both Node.js and many\n    browsers (since NPM modules are for the browser too) may not be fully\n    spec-compliant.\n    Check [`object.assign`](https://www.npmjs.com/package/object.assign) module for\n    a compliant candidate.\n\n## Installation\n\nThis package is available on [npm][npm-url] as: `extend`\n\n```sh\nnpm install extend\n```\n\n## Usage\n\n**Syntax:** extend **(** \\[`deep`], `target`, `object1`, \\[`objectN`] **)**\n\n*Extend one object with one or more others, returning the modified object.*\n\n**Example:**\n\n```js\nvar extend = require('extend');\nextend(targetObject, object1, object2);\n```\n\nKeep in mind that the target object will be modified, and will be returned from extend().\n\nIf a boolean true is specified as the first argument, extend performs a deep copy, recursively copying any objects it finds. Otherwise, the copy will share structure with the original object(s).\nUndefined properties are not copied. However, properties inherited from the object's prototype will be copied over.\nWarning: passing `false` as the first argument is not supported.\n\n### Arguments\n\n*   `deep` *Boolean* (optional)\n    If set, the merge becomes recursive (i.e. deep copy).\n*   `target`\t*Object*\n    The object to extend.\n*   `object1`\t*Object*\n    The object that will be merged into the first.\n*   `objectN` *Object* (Optional)\n    More objects to merge into the first.\n\n## License\n\n`node-extend` is licensed under the [MIT License][mit-license-url].\n\n## Acknowledgements\n\nAll credit to the jQuery authors for perfecting this amazing utility.\n\nPorted to Node.js by [Stefan Thomas][github-justmoon] with contributions by [Jonathan Buchanan][github-insin] and [Jordan Harband][github-ljharb].\n\n[travis-svg]: https://travis-ci.org/justmoon/node-extend.svg\n\n[travis-url]: https://travis-ci.org/justmoon/node-extend\n\n[npm-url]: https://npmjs.org/package/extend\n\n[mit-license-url]: http://opensource.org/licenses/MIT\n\n[github-justmoon]: https://github.com/justmoon\n\n[github-insin]: https://github.com/insin\n\n[github-ljharb]: https://github.com/ljharb\n\n[npm-version-png]: http://versionbadg.es/justmoon/node-extend.svg\n\n[deps-svg]: https://david-dm.org/justmoon/node-extend.svg\n\n[deps-url]: https://david-dm.org/justmoon/node-extend\n\n[dev-deps-svg]: https://david-dm.org/justmoon/node-extend/dev-status.svg\n\n[dev-deps-url]: https://david-dm.org/justmoon/node-extend#info=devDependencies\n"},{"text":"# fast-glob\n\n> It's a very fast and efficient [glob][glob_definition] library for [Node.js][node_js].\n\nThis package provides methods for traversing the file system and returning pathnames that matched a defined set of a specified pattern according to the rules used by the Unix Bash shell with some simplifications, meanwhile results are returned in **arbitrary order**. Quick, simple, effective.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n*   [Highlights](#highlights)\n*   [Donation](#donation)\n*   [Old and modern mode](#old-and-modern-mode)\n*   [Pattern syntax](#pattern-syntax)\n    *   [Basic syntax](#basic-syntax)\n    *   [Advanced syntax](#advanced-syntax)\n*   [Installation](#installation)\n*   [API](#api)\n    *   [Asynchronous](#asynchronous)\n    *   [Synchronous](#synchronous)\n    *   [Stream](#stream)\n        *   [patterns](#patterns)\n        *   [\\[options\\]](#options)\n    *   [Helpers](#helpers)\n        *   [generateTasks](#generatetaskspatterns-options)\n        *   [isDynamicPattern](#isdynamicpatternpattern-options)\n        *   [escapePath](#escapepathpattern)\n*   [Options](#options-3)\n    *   [Common](#common)\n        *   [concurrency](#concurrency)\n        *   [cwd](#cwd)\n        *   [deep](#deep)\n        *   [followSymbolicLinks](#followsymboliclinks)\n        *   [fs](#fs)\n        *   [ignore](#ignore)\n        *   [suppressErrors](#suppresserrors)\n        *   [throwErrorOnBrokenSymbolicLink](#throwerroronbrokensymboliclink)\n    *   [Output control](#output-control)\n        *   [absolute](#absolute)\n        *   [markDirectories](#markdirectories)\n        *   [objectMode](#objectmode)\n        *   [onlyDirectories](#onlydirectories)\n        *   [onlyFiles](#onlyfiles)\n        *   [stats](#stats)\n        *   [unique](#unique)\n    *   [Matching control](#matching-control)\n        *   [braceExpansion](#braceexpansion)\n        *   [caseSensitiveMatch](#casesensitivematch)\n        *   [dot](#dot)\n        *   [extglob](#extglob)\n        *   [globstar](#globstar)\n        *   [baseNameMatch](#basenamematch)\n*   [FAQ](#faq)\n    *   [What is a static or dynamic pattern?](#what-is-a-static-or-dynamic-pattern)\n    *   [How to write patterns on Windows?](#how-to-write-patterns-on-windows)\n    *   [Why are parentheses match wrong?](#why-are-parentheses-match-wrong)\n    *   [How to exclude directory from reading?](#how-to-exclude-directory-from-reading)\n    *   [How to use UNC path?](#how-to-use-unc-path)\n    *   [Compatible with `node-glob`?](#compatible-with-node-glob)\n*   [Benchmarks](#benchmarks)\n    *   [Server](#server)\n    *   [Nettop](#nettop)\n*   [Changelog](#changelog)\n*   [License](#license)\n\n</details>\n\n## Highlights\n\n*   Fast. Probably the fastest.\n*   Supports multiple and negative patterns.\n*   Synchronous, Promise and Stream API.\n*   Object mode. Can return more than just strings.\n*   Error-tolerant.\n\n## Donation\n\nDo you like this project? Support it by donating, creating an issue or pull request.\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)][paypal_mrmlnc]\n\n## Old and modern mode\n\nThis package works in two modes, depending on the environment in which it is used.\n\n*   **Old mode**. Node.js below 10.10 or when the [`stats`](#stats) option is *enabled*.\n*   **Modern mode**. Node.js 10.10+ and the [`stats`](#stats) option is *disabled*.\n\nThe modern mode is faster. Learn more about the [internal mechanism][nodelib_fs_scandir_old_and_modern_modern].\n\n## Pattern syntax\n\n> :warning: Always use forward-slashes in glob expressions (patterns and [`ignore`](#ignore) option). Use backslashes for escaping characters.\n\nThere is more than one form of syntax: basic and advanced. Below is a brief overview of the supported features. Also pay attention to our [FAQ](#faq).\n\n> :book: This package uses a [`micromatch`][micromatch] as a library for pattern matching.\n\n### Basic syntax\n\n*   An asterisk (`*`) — matches everything except slashes (path separators), hidden files (names starting with `.`).\n*   A double star or globstar (`**`) — matches zero or more directories.\n*   Question mark (`?`) – matches any single character except slashes (path separators).\n*   Sequence (`[seq]`) — matches any character in sequence.\n\n> :book: A few additional words about the [basic matching behavior][picomatch_matching_behavior].\n\nSome examples:\n\n*   `src/**/*.js` — matches all files in the `src` directory (any level of nesting) that have the `.js` extension.\n*   `src/*.??` — matches all files in the `src` directory (only first level of nesting) that have a two-character extension.\n*   `file-[01].js` — matches files: `file-0.js`, `file-1.js`.\n\n### Advanced syntax\n\n*   [Escapes characters][micromatch_backslashes] (`\\\\`) — matching special characters (`$^*+?()[]`) as literals.\n*   [POSIX character classes][picomatch_posix_brackets] (`[[:digit:]]`).\n*   [Extended globs][micromatch_extglobs] (`?(pattern-list)`).\n*   [Bash style brace expansions][micromatch_braces] (`{}`).\n*   [Regexp character classes][micromatch_regex_character_classes] (`[1-5]`).\n*   [Regex groups][regular_expressions_brackets] (`(a|b)`).\n\n> :book: A few additional words about the [advanced matching behavior][micromatch_extended_globbing].\n\nSome examples:\n\n*   `src/**/*.{css,scss}` — matches all files in the `src` directory (any level of nesting) that have the `.css` or `.scss` extension.\n*   `file-[[:digit:]].js` — matches files: `file-0.js`, `file-1.js`, …, `file-9.js`.\n*   `file-{1..3}.js` — matches files: `file-1.js`, `file-2.js`, `file-3.js`.\n*   `file-(1|2)` — matches files: `file-1.js`, `file-2.js`.\n\n## Installation\n\n```console\nnpm install fast-glob\n```\n\n## API\n\n### Asynchronous\n\n```js\nfg(patterns, [options])\n```\n\nReturns a `Promise` with an array of matching entries.\n\n```js\nconst fg = require('fast-glob');\n\nconst entries = await fg(['.editorconfig', '**/index.js'], { dot: true });\n\n// ['.editorconfig', 'services/index.js']\n```\n\n### Synchronous\n\n```js\nfg.sync(patterns, [options])\n```\n\nReturns an array of matching entries.\n\n```js\nconst fg = require('fast-glob');\n\nconst entries = fg.sync(['.editorconfig', '**/index.js'], { dot: true });\n\n// ['.editorconfig', 'services/index.js']\n```\n\n### Stream\n\n```js\nfg.stream(patterns, [options])\n```\n\nReturns a [`ReadableStream`][node_js_stream_readable_streams] when the `data` event will be emitted with matching entry.\n\n```js\nconst fg = require('fast-glob');\n\nconst stream = fg.stream(['.editorconfig', '**/index.js'], { dot: true });\n\nfor await (const entry of stream) {\n\t// .editorconfig\n\t// services/index.js\n}\n```\n\n#### patterns\n\n*   Required: `true`\n*   Type: `string | string[]`\n\nAny correct pattern(s).\n\n> :1234: [Pattern syntax](#pattern-syntax)\n>\n> :warning: This package does not respect the order of patterns. First, all the negative patterns are applied, and only then the positive patterns. If you want to get a certain order of records, use sorting or split calls.\n\n#### \\[options]\n\n*   Required: `false`\n*   Type: [`Options`](#options-3)\n\nSee [Options](#options-3) section.\n\n### Helpers\n\n#### `generateTasks(patterns, [options])`\n\nReturns the internal representation of patterns ([`Task`](./src/managers/tasks.ts) is a combining patterns by base directory).\n\n```js\nfg.generateTasks('*');\n\n[{\n    base: '.', // Parent directory for all patterns inside this task\n    dynamic: true, // Dynamic or static patterns are in this task\n    patterns: ['*'],\n    positive: ['*'],\n    negative: []\n}]\n```\n\n##### patterns\n\n*   Required: `true`\n*   Type: `string | string[]`\n\nAny correct pattern(s).\n\n##### \\[options]\n\n*   Required: `false`\n*   Type: [`Options`](#options-3)\n\nSee [Options](#options-3) section.\n\n#### `isDynamicPattern(pattern, [options])`\n\nReturns `true` if the passed pattern is a dynamic pattern.\n\n> :1234: [What is a static or dynamic pattern?](#what-is-a-static-or-dynamic-pattern)\n\n```js\nfg.isDynamicPattern('*'); // true\nfg.isDynamicPattern('abc'); // false\n```\n\n##### pattern\n\n*   Required: `true`\n*   Type: `string`\n\nAny correct pattern.\n\n##### \\[options]\n\n*   Required: `false`\n*   Type: [`Options`](#options-3)\n\nSee [Options](#options-3) section.\n\n#### `escapePath(pattern)`\n\nReturns a path with escaped special characters (`*?|(){}[]`, `!` at the beginning of line, `@+!` before the opening parenthesis).\n\n```js\nfg.escapePath('!abc'); // \\\\!abc\nfg.escapePath('C:/Program Files (x86)'); // C:/Program Files \\\\(x86\\\\)\n```\n\n##### pattern\n\n*   Required: `true`\n*   Type: `string`\n\nAny string, for example, a path to a file.\n\n## Options\n\n### Common options\n\n#### concurrency\n\n*   Type: `number`\n*   Default: `os.cpus().length`\n\nSpecifies the maximum number of concurrent requests from a reader to read directories.\n\n> :book: The higher the number, the higher the performance and load on the file system. If you want to read in quiet mode, set the value to a comfortable number or `1`.\n\n#### cwd\n\n*   Type: `string`\n*   Default: `process.cwd()`\n\nThe current working directory in which to search.\n\n#### deep\n\n*   Type: `number`\n*   Default: `Infinity`\n\nSpecifies the maximum depth of a read directory relative to the start directory.\n\nFor example, you have the following tree:\n\n```js\ndir/\n└── one/            // 1\n    └── two/        // 2\n        └── file.js // 3\n```\n\n```js\n// With base directory\nfg.sync('dir/**', { onlyFiles: false, deep: 1 }); // ['dir/one']\nfg.sync('dir/**', { onlyFiles: false, deep: 2 }); // ['dir/one', 'dir/one/two']\n\n// With cwd option\nfg.sync('**', { onlyFiles: false, cwd: 'dir', deep: 1 }); // ['one']\nfg.sync('**', { onlyFiles: false, cwd: 'dir', deep: 2 }); // ['one', 'one/two']\n```\n\n> :book: If you specify a pattern with some base directory, this directory will not participate in the calculation of the depth of the found directories. Think of it as a [`cwd`](#cwd) option.\n\n#### followSymbolicLinks\n\n*   Type: `boolean`\n*   Default: `true`\n\nIndicates whether to traverse descendants of symbolic link directories when expanding `**` patterns.\n\n> :book: Note that this option does not affect the base directory of the pattern. For example, if `./a` is a symlink to directory `./b` and you specified `['./a**', './b/**']` patterns, then directory `./a` will still be read.\n\n> :book: If the [`stats`](#stats) option is specified, the information about the symbolic link (`fs.lstat`) will be replaced with information about the entry (`fs.stat`) behind it.\n\n#### fs\n\n*   Type: `FileSystemAdapter`\n*   Default: `fs.*`\n\nCustom implementation of methods for working with the file system.\n\n```ts\nexport interface FileSystemAdapter {\n    lstat?: typeof fs.lstat;\n    stat?: typeof fs.stat;\n    lstatSync?: typeof fs.lstatSync;\n    statSync?: typeof fs.statSync;\n    readdir?: typeof fs.readdir;\n    readdirSync?: typeof fs.readdirSync;\n}\n```\n\n#### ignore\n\n*   Type: `string[]`\n*   Default: `[]`\n\nAn array of glob patterns to exclude matches. This is an alternative way to use negative patterns.\n\n```js\ndir/\n├── package-lock.json\n└── package.json\n```\n\n```js\nfg.sync(['*.json', '!package-lock.json']);            // ['package.json']\nfg.sync('*.json', { ignore: ['package-lock.json'] }); // ['package.json']\n```\n\n#### suppressErrors\n\n*   Type: `boolean`\n*   Default: `false`\n\nBy default this package suppress only `ENOENT` errors. Set to `true` to suppress any error.\n\n> :book: Can be useful when the directory has entries with a special level of access.\n\n#### throwErrorOnBrokenSymbolicLink\n\n*   Type: `boolean`\n*   Default: `false`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n> :book: This option has no effect on errors when reading the symbolic link directory.\n\n### Output control\n\n#### absolute\n\n*   Type: `boolean`\n*   Default: `false`\n\nReturn the absolute path for entries.\n\n```js\nfg.sync('*.js', { absolute: false }); // ['index.js']\nfg.sync('*.js', { absolute: true });  // ['/home/user/index.js']\n```\n\n> :book: This option is required if you want to use negative patterns with absolute path, for example, `!${__dirname}/*.js`.\n\n#### markDirectories\n\n*   Type: `boolean`\n*   Default: `false`\n\nMark the directory path with the final slash.\n\n```js\nfg.sync('*', { onlyFiles: false, markDirectories: false }); // ['index.js', 'controllers']\nfg.sync('*', { onlyFiles: false, markDirectories: true });  // ['index.js', 'controllers/']\n```\n\n#### objectMode\n\n*   Type: `boolean`\n*   Default: `false`\n\nReturns objects (instead of strings) describing entries.\n\n```js\nfg.sync('*', { objectMode: false }); // ['src/index.js']\nfg.sync('*', { objectMode: true });  // [{ name: 'index.js', path: 'src/index.js', dirent: <fs.Dirent> }]\n```\n\nThe object has the following fields:\n\n*   name (`string`) — the last part of the path (basename)\n*   path (`string`) — full path relative to the pattern base directory\n*   dirent ([`fs.Dirent`][node_js_fs_class_fs_dirent]) — instance of `fs.Dirent`\n\n> :book: An object is an internal representation of entry, so getting it does not affect performance.\n\n#### onlyDirectories\n\n*   Type: `boolean`\n*   Default: `false`\n\nReturn only directories.\n\n```js\nfg.sync('*', { onlyDirectories: false }); // ['index.js', 'src']\nfg.sync('*', { onlyDirectories: true });  // ['src']\n```\n\n> :book: If `true`, the [`onlyFiles`](#onlyfiles) option is automatically `false`.\n\n#### onlyFiles\n\n*   Type: `boolean`\n*   Default: `true`\n\nReturn only files.\n\n```js\nfg.sync('*', { onlyFiles: false }); // ['index.js', 'src']\nfg.sync('*', { onlyFiles: true });  // ['index.js']\n```\n\n#### stats\n\n*   Type: `boolean`\n*   Default: `false`\n\nEnables an [object mode](#objectmode) with an additional field:\n\n*   stats ([`fs.Stats`][node_js_fs_class_fs_stats]) — instance of `fs.Stats`\n\n```js\nfg.sync('*', { stats: false }); // ['src/index.js']\nfg.sync('*', { stats: true });  // [{ name: 'index.js', path: 'src/index.js', dirent: <fs.Dirent>, stats: <fs.Stats> }]\n```\n\n> :book: Returns `fs.stat` instead of `fs.lstat` for symbolic links when the [`followSymbolicLinks`](#followsymboliclinks) option is specified.\n>\n> :warning: Unlike [object mode](#objectmode) this mode requires additional calls to the file system. On average, this mode is slower at least twice. See [old and modern mode](#old-and-modern-mode) for more details.\n\n#### unique\n\n*   Type: `boolean`\n*   Default: `true`\n\nEnsures that the returned entries are unique.\n\n```js\nfg.sync(['*.json', 'package.json'], { unique: false }); // ['package.json', 'package.json']\nfg.sync(['*.json', 'package.json'], { unique: true });  // ['package.json']\n```\n\nIf `true` and similar entries are found, the result is the first found.\n\n### Matching control\n\n#### braceExpansion\n\n*   Type: `boolean`\n*   Default: `true`\n\nEnables Bash-like brace expansion.\n\n> :1234: [Syntax description][bash_hackers_syntax_expansion_brace] or more [detailed description][micromatch_braces].\n\n```js\ndir/\n├── abd\n├── acd\n└── a{b,c}d\n```\n\n```js\nfg.sync('a{b,c}d', { braceExpansion: false }); // ['a{b,c}d']\nfg.sync('a{b,c}d', { braceExpansion: true });  // ['abd', 'acd']\n```\n\n#### caseSensitiveMatch\n\n*   Type: `boolean`\n*   Default: `true`\n\nEnables a [case-sensitive][wikipedia_case_sensitivity] mode for matching files.\n\n```js\ndir/\n├── file.txt\n└── File.txt\n```\n\n```js\nfg.sync('file.txt', { caseSensitiveMatch: false }); // ['file.txt', 'File.txt']\nfg.sync('file.txt', { caseSensitiveMatch: true });  // ['file.txt']\n```\n\n#### dot\n\n*   Type: `boolean`\n*   Default: `false`\n\nAllow patterns to match entries that begin with a period (`.`).\n\n> :book: Note that an explicit dot in a portion of the pattern will always match dot files.\n\n```js\ndir/\n├── .editorconfig\n└── package.json\n```\n\n```js\nfg.sync('*', { dot: false }); // ['package.json']\nfg.sync('*', { dot: true });  // ['.editorconfig', 'package.json']\n```\n\n#### extglob\n\n*   Type: `boolean`\n*   Default: `true`\n\nEnables Bash-like `extglob` functionality.\n\n> :1234: [Syntax description][micromatch_extglobs].\n\n```js\ndir/\n├── README.md\n└── package.json\n```\n\n```js\nfg.sync('*.+(json|md)', { extglob: false }); // []\nfg.sync('*.+(json|md)', { extglob: true });  // ['README.md', 'package.json']\n```\n\n#### globstar\n\n*   Type: `boolean`\n*   Default: `true`\n\nEnables recursively repeats a pattern containing `**`. If `false`, `**` behaves exactly like `*`.\n\n```js\ndir/\n└── a\n    └── b\n```\n\n```js\nfg.sync('**', { onlyFiles: false, globstar: false }); // ['a']\nfg.sync('**', { onlyFiles: false, globstar: true });  // ['a', 'a/b']\n```\n\n#### baseNameMatch\n\n*   Type: `boolean`\n*   Default: `false`\n\nIf set to `true`, then patterns without slashes will be matched against the basename of the path if it contains slashes.\n\n```js\ndir/\n└── one/\n    └── file.md\n```\n\n```js\nfg.sync('*.md', { baseNameMatch: false }); // []\nfg.sync('*.md', { baseNameMatch: true });  // ['one/file.md']\n```\n\n## FAQ\n\n## What is a static or dynamic pattern?\n\nAll patterns can be divided into two types:\n\n*   **static**. A pattern is considered static if it can be used to get an entry on the file system without using matching mechanisms. For example, the `file.js` pattern is a static pattern because we can just verify that it exists on the file system.\n*   **dynamic**. A pattern is considered dynamic if it cannot be used directly to find occurrences without using a matching mechanisms. For example, the `*` pattern is a dynamic pattern because we cannot use this pattern directly.\n\nA pattern is considered dynamic if it contains the following characters (`…` — any characters or their absence) or options:\n\n*   The [`caseSensitiveMatch`](#casesensitivematch) option is disabled\n*   `\\\\` (the escape character)\n*   `*`, `?`, `!` (at the beginning of line)\n*   `[…]`\n*   `(…|…)`\n*   `@(…)`, `!(…)`, `*(…)`, `?(…)`, `+(…)` (respects the [`extglob`](#extglob) option)\n*   `{…,…}`, `{…..…}` (respects the [`braceExpansion`](#braceexpansion) option)\n\n## How to write patterns on Windows?\n\nAlways use forward-slashes in glob expressions (patterns and [`ignore`](#ignore) option). Use backslashes for escaping characters. With the [`cwd`](#cwd) option use a convenient format.\n\n**Bad**\n\n```ts\n[\n\t'directory\\\\*',\n\tpath.join(process.cwd(), '**')\n]\n```\n\n**Good**\n\n```ts\n[\n\t'directory/*',\n\tpath.join(process.cwd(), '**').replace(/\\\\/g, '/')\n]\n```\n\n> :book: Use the [`normalize-path`][npm_normalize_path] or the [`unixify`][npm_unixify] package to convert Windows-style path to a Unix-style path.\n\nRead more about [matching with backslashes][micromatch_backslashes].\n\n## Why are parentheses match wrong?\n\n```js\ndir/\n└── (special-*file).txt\n```\n\n```js\nfg.sync(['(special-*file).txt']) // []\n```\n\nRefers to Bash. You need to escape special characters:\n\n```js\nfg.sync(['\\\\(special-*file\\\\).txt']) // ['(special-*file).txt']\n```\n\nRead more about [matching special characters as literals][picomatch_matching_special_characters_as_literals].\n\n## How to exclude directory from reading?\n\nYou can use a negative pattern like this: `!**/node_modules` or `!**/node_modules/**`. Also you can use [`ignore`](#ignore) option. Just look at the example below.\n\n```js\nfirst/\n├── file.md\n└── second/\n    └── file.txt\n```\n\nIf you don't want to read the `second` directory, you must write the following pattern: `!**/second` or `!**/second/**`.\n\n```js\nfg.sync(['**/*.md', '!**/second']);                 // ['first/file.md']\nfg.sync(['**/*.md'], { ignore: ['**/second/**'] }); // ['first/file.md']\n```\n\n> :warning: When you write `!**/second/**/*` it means that the directory will be **read**, but all the entries will not be included in the results.\n\nYou have to understand that if you write the pattern to exclude directories, then the directory will not be read under any circumstances.\n\n## How to use UNC path?\n\nYou cannot use [Uniform Naming Convention (UNC)][unc_path] paths as patterns (due to syntax), but you can use them as [`cwd`](#cwd) directory.\n\n```ts\nfg.sync('*', { cwd: '\\\\\\\\?\\\\C:\\\\Python27' /* or //?/C:/Python27 */ });\nfg.sync('Python27/*', { cwd: '\\\\\\\\?\\\\C:\\\\' /* or //?/C:/ */ });\n```\n\n## Compatible with `node-glob`?\n\n| node-glob    | fast-glob |\n| :----------: | :-------: |\n| `cwd`        | [`cwd`](#cwd) |\n| `root`       | – |\n| `dot`        | [`dot`](#dot) |\n| `nomount`    | – |\n| `mark`       | [`markDirectories`](#markdirectories) |\n| `nosort`     | – |\n| `nounique`   | [`unique`](#unique) |\n| `nobrace`    | [`braceExpansion`](#braceexpansion) |\n| `noglobstar` | [`globstar`](#globstar) |\n| `noext`      | [`extglob`](#extglob) |\n| `nocase`     | [`caseSensitiveMatch`](#casesensitivematch) |\n| `matchBase`  | [`baseNameMatch`](#basenamematch) |\n| `nodir`      | [`onlyFiles`](#onlyfiles) |\n| `ignore`     | [`ignore`](#ignore) |\n| `follow`     | [`followSymbolicLinks`](#followsymboliclinks) |\n| `realpath`   | – |\n| `absolute`   | [`absolute`](#absolute) |\n\n## Benchmarks\n\n### Server\n\nLink: [Vultr Bare Metal][vultr_pricing_baremetal]\n\n*   Processor: E3-1270v6 (8 CPU)\n*   RAM: 32GB\n*   Disk: SSD ([Intel DC S3520 SSDSC2BB240G7][intel_ssd])\n\nYou can see results [here][github_gist_benchmark_server] for latest release.\n\n### Nettop\n\nLink: [Zotac bi323][zotac_bi323]\n\n*   Processor: Intel N3150 (4 CPU)\n*   RAM: 8GB\n*   Disk: SSD ([Silicon Power SP060GBSS3S55S25][silicon_power_ssd])\n\nYou can see results [here][github_gist_benchmark_nettop] for latest release.\n\n## Changelog\n\nSee the [Releases section of our GitHub project][github_releases] for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n\n[bash_hackers_syntax_expansion_brace]: https://wiki.bash-hackers.org/syntax/expansion/brace\n\n[github_gist_benchmark_nettop]: https://gist.github.com/mrmlnc/f06246b197f53c356895fa35355a367c#file-fg-benchmark-nettop-product-txt\n\n[github_gist_benchmark_server]: https://gist.github.com/mrmlnc/f06246b197f53c356895fa35355a367c#file-fg-benchmark-server-product-txt\n\n[github_releases]: https://github.com/mrmlnc/fast-glob/releases\n\n[glob_definition]: https://en.wikipedia.org/wiki/Glob_\\(programming\\)\n\n[glob_linux_man]: http://man7.org/linux/man-pages/man3/glob.3.html\n\n[intel_ssd]: https://ark.intel.com/content/www/us/en/ark/products/93012/intel-ssd-dc-s3520-series-240gb-2-5in-sata-6gb-s-3d1-mlc.html\n\n[micromatch_backslashes]: https://github.com/micromatch/micromatch#backslashes\n\n[micromatch_braces]: https://github.com/micromatch/braces\n\n[micromatch_extended_globbing]: https://github.com/micromatch/micromatch#extended-globbing\n\n[micromatch_extglobs]: https://github.com/micromatch/micromatch#extglobs\n\n[micromatch_regex_character_classes]: https://github.com/micromatch/micromatch#regex-character-classes\n\n[micromatch]: https://github.com/micromatch/micromatch\n\n[node_js_fs_class_fs_dirent]: https://nodejs.org/api/fs.html#fs_class_fs_dirent\n\n[node_js_fs_class_fs_stats]: https://nodejs.org/api/fs.html#fs_class_fs_stats\n\n[node_js_stream_readable_streams]: https://nodejs.org/api/stream.html#stream_readable_streams\n\n[node_js]: https://nodejs.org/en\n\n[nodelib_fs_scandir_old_and_modern_modern]: https://github.com/nodelib/nodelib/blob/master/packages/fs/fs.scandir/README.md#old-and-modern-mode\n\n[npm_normalize_path]: https://www.npmjs.com/package/normalize-path\n\n[npm_unixify]: https://www.npmjs.com/package/unixify\n\n[paypal_mrmlnc]: https://paypal.me/mrmlnc\n\n[picomatch_matching_behavior]: https://github.com/micromatch/picomatch#matching-behavior-vs-bash\n\n[picomatch_matching_special_characters_as_literals]: https://github.com/micromatch/picomatch#matching-special-characters-as-literals\n\n[picomatch_posix_brackets]: https://github.com/micromatch/picomatch#posix-brackets\n\n[regular_expressions_brackets]: https://www.regular-expressions.info/brackets.html\n\n[silicon_power_ssd]: https://www.silicon-power.com/web/product-1\n\n[unc_path]: https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/62e862f4-2a51-452e-8eeb-dc4ff5ee33cc\n\n[vultr_pricing_baremetal]: https://www.vultr.com/pricing/baremetal\n\n[wikipedia_case_sensitivity]: https://en.wikipedia.org/wiki/Case_sensitivity\n\n[zotac_bi323]: https://www.zotac.com/ee/product/mini_pcs/zbox-bi323\n"},{"text":"# fastq\n\n![ci][ci-url]\n[![npm version][npm-badge]][npm-url]\n[![Dependency Status][david-badge]][david-url]\n\nFast, in memory work queue.\n\nBenchmarks (1 million tasks):\n\n*   setImmediate: 812ms\n*   fastq: 854ms\n*   async.queue: 1298ms\n*   neoAsync.queue: 1249ms\n\nObtained on node 12.16.1, on a dedicated server.\n\nIf you need zero-overhead series function call, check out\n[fastseries](http://npm.im/fastseries). For zero-overhead parallel\nfunction call, check out [fastparallel](http://npm.im/fastparallel).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n*   <a href=\"#install\">Installation</a>\n*   <a href=\"#usage\">Usage</a>\n*   <a href=\"#api\">API</a>\n*   <a href=\"#license\">Licence & copyright</a>\n\n## Install\n\n`npm i fastq --save`\n\n## Usage (callback API)\n\n```js\n'use strict'\n\nconst queue = require('fastq')(worker, 1)\n\nqueue.push(42, function (err, result) {\n  if (err) { throw err }\n  console.log('the result is', result)\n})\n\nfunction worker (arg, cb) {\n  cb(null, arg * 2)\n}\n```\n\n## Usage (promise API)\n\n```js\nconst queue = require('fastq').promise(worker, 1)\n\nasync function worker (arg) {\n  return arg * 2\n}\n\nasync function run () {\n  const result = await queue.push(42)\n  console.log('the result is', result)\n}\n\nrun()\n```\n\n### Setting \"this\"\n\n```js\n'use strict'\n\nconst that = { hello: 'world' }\nconst queue = require('fastq')(that, worker, 1)\n\nqueue.push(42, function (err, result) {\n  if (err) { throw err }\n  console.log(this)\n  console.log('the result is', result)\n})\n\nfunction worker (arg, cb) {\n  console.log(this)\n  cb(null, arg * 2)\n}\n```\n\n### Using with TypeScript (callback API)\n\n```ts\n'use strict'\n\nimport * as fastq from \"fastq\";\nimport type { queue, done } from \"fastq\";\n\ntype Task = {\n  id: number\n}\n\nconst q: queue<Task> = fastq(worker, 1)\n\nq.push({ id: 42})\n\nfunction worker (arg: Task, cb: done) {\n  console.log(arg.id)\n  cb(null)\n}\n```\n\n### Using with TypeScript (promise API)\n\n```ts\n'use strict'\n\nimport * as fastq from \"fastq\";\nimport type { queueAsPromised } from \"fastq\";\n\ntype Task = {\n  id: number\n}\n\nconst q: queueAsPromised<Task> = fastq.promise(asyncWorker, 1)\n\nq.push({ id: 42}).catch((err) => console.error(err))\n\nasync function asyncWorker (arg: Task): Promise<void> {\n  // No need for a try-catch block, fastq handles errors automatically\n  console.log(arg.id)\n}\n```\n\n## API\n\n*   <a href=\"#fastqueue\"><code>fastqueue()</code></a>\n*   <a href=\"#push\"><code>queue#<b>push()</b></code></a>\n*   <a href=\"#unshift\"><code>queue#<b>unshift()</b></code></a>\n*   <a href=\"#pause\"><code>queue#<b>pause()</b></code></a>\n*   <a href=\"#resume\"><code>queue#<b>resume()</b></code></a>\n*   <a href=\"#idle\"><code>queue#<b>idle()</b></code></a>\n*   <a href=\"#length\"><code>queue#<b>length()</b></code></a>\n*   <a href=\"#getQueue\"><code>queue#<b>getQueue()</b></code></a>\n*   <a href=\"#kill\"><code>queue#<b>kill()</b></code></a>\n*   <a href=\"#killAndDrain\"><code>queue#<b>killAndDrain()</b></code></a>\n*   <a href=\"#error\"><code>queue#<b>error()</b></code></a>\n*   <a href=\"#concurrency\"><code>queue#<b>concurrency</b></code></a>\n*   <a href=\"#drain\"><code>queue#<b>drain</b></code></a>\n*   <a href=\"#empty\"><code>queue#<b>empty</b></code></a>\n*   <a href=\"#saturated\"><code>queue#<b>saturated</b></code></a>\n*   <a href=\"#promise\"><code>fastqueue.promise()</code></a>\n\n***\n\n<a name=\"fastqueue\"></a>\n\n### fastqueue(\\[that], worker, concurrency)\n\nCreates a new queue.\n\nArguments:\n\n*   `that`, optional context of the `worker` function.\n*   `worker`, worker function, it would be called with `that` as `this`,\n    if that is specified.\n*   `concurrency`, number of concurrent tasks that could be executed in\n    parallel.\n\n***\n\n<a name=\"push\"></a>\n\n### queue.push(task, done)\n\nAdd a task at the end of the queue. `done(err, result)` will be called\nwhen the task was processed.\n\n***\n\n<a name=\"unshift\"></a>\n\n### queue.unshift(task, done)\n\nAdd a task at the beginning of the queue. `done(err, result)` will be called\nwhen the task was processed.\n\n***\n\n<a name=\"pause\"></a>\n\n### queue.pause()\n\nPause the processing of tasks. Currently worked tasks are not\nstopped.\n\n***\n\n<a name=\"resume\"></a>\n\n### queue.resume()\n\nResume the processing of tasks.\n\n***\n\n<a name=\"idle\"></a>\n\n### queue.idle()\n\nReturns `false` if there are tasks being processed or waiting to be processed.\n`true` otherwise.\n\n***\n\n<a name=\"length\"></a>\n\n### queue.length()\n\nReturns the number of tasks waiting to be processed (in the queue).\n\n***\n\n<a name=\"getQueue\"></a>\n\n### queue.getQueue()\n\nReturns all the tasks be processed (in the queue). Returns empty array when there are no tasks\n\n***\n\n<a name=\"kill\"></a>\n\n### queue.kill()\n\nRemoves all tasks waiting to be processed, and reset `drain` to an empty\nfunction.\n\n***\n\n<a name=\"killAndDrain\"></a>\n\n### queue.killAndDrain()\n\nSame than `kill` but the `drain` function will be called before reset to empty.\n\n***\n\n<a name=\"error\"></a>\n\n### queue.error(handler)\n\nSet a global error handler. `handler(err, task)` will be called\nwhen any of the tasks return an error.\n\n***\n\n<a name=\"concurrency\"></a>\n\n### queue.concurrency\n\nProperty that returns the number of concurrent tasks that could be executed in\nparallel. It can be altered at runtime.\n\n***\n\n<a name=\"drain\"></a>\n\n### queue.drain\n\nFunction that will be called when the last\nitem from the queue has been processed by a worker.\nIt can be altered at runtime.\n\n***\n\n<a name=\"empty\"></a>\n\n### queue.empty\n\nFunction that will be called when the last\nitem from the queue has been assigned to a worker.\nIt can be altered at runtime.\n\n***\n\n<a name=\"saturated\"></a>\n\n### queue.saturated\n\nFunction that will be called when the queue hits the concurrency\nlimit.\nIt can be altered at runtime.\n\n***\n\n<a name=\"promise\"></a>\n\n### fastqueue.promise(\\[that], worker(arg), concurrency)\n\nCreates a new queue with `Promise` apis. It also offers all the methods\nand properties of the object returned by [`fastqueue`](#fastqueue) with the modified\n[`push`](#pushPromise) and [`unshift`](#unshiftPromise) methods.\n\nNode v10+ is required to use the promisified version.\n\nArguments:\n\n*   `that`, optional context of the `worker` function.\n*   `worker`, worker function, it would be called with `that` as `this`,\n    if that is specified. It MUST return a `Promise`.\n*   `concurrency`, number of concurrent tasks that could be executed in\n    parallel.\n\n<a name=\"pushPromise\"></a>\n\n#### queue.push(task) => Promise\n\nAdd a task at the end of the queue. The returned `Promise`  will be fulfilled (rejected)\nwhen the task is completed successfully (unsuccessfully).\n\nThis promise could be ignored as it will not lead to a `'unhandledRejection'`.\n\n<a name=\"unshiftPromise\"></a>\n\n#### queue.unshift(task) => Promise\n\nAdd a task at the beginning of the queue. The returned `Promise`  will be fulfilled (rejected)\nwhen the task is completed successfully (unsuccessfully).\n\nThis promise could be ignored as it will not lead to a `'unhandledRejection'`.\n\n<a name=\"drained\"></a>\n\n#### queue.drained() => Promise\n\nWait for the queue to be drained. The returned `Promise` will be resolved when all tasks in the queue have been processed by a worker.\n\nThis promise could be ignored as it will not lead to a `'unhandledRejection'`.\n\n## License\n\nISC\n\n[ci-url]: https://github.com/mcollina/fastq/workflows/ci/badge.svg\n\n[npm-badge]: https://badge.fury.io/js/fastq.svg\n\n[npm-url]: https://badge.fury.io/js/fastq\n\n[david-badge]: https://david-dm.org/mcollina/fastq.svg\n\n[david-url]: https://david-dm.org/mcollina/fastq\n"},{"text":"# fault\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nFunctional errors with formatted output.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`fault(format?[, values…])`](#faultformat-values)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package adds printf-like interpolation to errors.\n\n## When should I use this?\n\nThis package useful when you frequently display parameters in error messages\nand manual string concatenation is becoming verbose.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install fault\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {fault} from 'https://cdn.skypack.dev/fault@2?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {fault} from 'https://cdn.skypack.dev/fault@2?min'\n</script>\n```\n\n## Use\n\n```js\nimport {fault} from 'fault'\n\nthrow fault('Hello %s!', 'Eric')\n```\n\nYields:\n\n```text\nError: Hello Eric!\n    at FormattedError (~/node_modules/fault/index.js:30:12)\n    at Object.<anonymous> (~/example.js:3:7)\n    …\n```\n\nOr, format a float in a type error:\n\n```js\nimport {fault} from 'fault'\n\nthrow fault.type('Who doesn’t like %f? 🍰', Math.PI)\n```\n\nYields:\n\n```text\nTypeError: Who doesn’t like 3.141593? 🍰\n    at Function.FormattedError [as type] (~/node_modules/fault/index.js:30:12)\n    at Object.<anonymous> (~/example.js:3:7)\n```\n\n## API\n\nThis package exports the following identifiers: `fault` and `create`.\nThere is no default export.\n\n### `fault(format?[, values…])`\n\nCreate an error with a printf-like formatted message.\n\n###### Parameters\n\n*   `format` (`string`, optional)\n    — template string\n*   `values` (`*`, optional)\n    — values to render in `format`\n\n###### Returns\n\nAn [`Error`][error] instance.\n\n###### Formatters\n\nThe following formatters are supported in `format`:\n\n*   `%s` — string\n*   `%b` — binary\n*   `%c` — character\n*   `%d` — decimal\n*   `%f` — floating point\n*   `%o` — octal\n*   `%x` — lowercase hexadecimal\n*   `%X` — uppercase hexadecimal\n*   `%` followed by any other character, prints that character\n\nSee [`samsonjs/format`][fmt] for argument parsing.\n\n###### Other errors\n\n*   `fault.eval(format?[, values…])` — [EvalError][]\n*   `fault.range(format?[, values…])` — [RangeError][]\n*   `fault.reference(format?[, values…])` — [ReferenceError][]\n*   `fault.syntax(format?[, values…])` — [SyntaxError][]\n*   `fault.type(format?[, values…])` — [TypeError][]\n*   `fault.uri(format?[, values…])` — [URIError][]\n\n#### `create(Constructor)`\n\nFactory to create instances of `ErrorConstructor` with support for formatting.\nUsed internally to wrap the global error constructors and exposed for custom\nerrors.\nReturns a function just like `fault`.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThere are no extra exported types.\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Related\n\n*   [`wooorm/bail`](https://github.com/wooorm/bail)\n    — throw if given an error\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/fault/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/fault/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/fault.svg\n\n[coverage]: https://codecov.io/github/wooorm/fault\n\n[downloads-badge]: https://img.shields.io/npm/dm/fault.svg\n\n[downloads]: https://www.npmjs.com/package/fault\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/fault.svg\n\n[size]: https://bundlephobia.com/result?p=fault\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[fmt]: https://github.com/samsonjs/format\n\n[error]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/Error\n\n[evalerror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/EvalError\n\n[rangeerror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/RangeError\n\n[referenceerror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/ReferenceError\n\n[syntaxerror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/SyntaxError\n\n[typeerror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/TypeError\n\n[urierror]: https://developer.mozilla.org/JavaScript/Reference/Global_Objects/URIError.\n"},{"text":"# fill-range [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\\&hosted_button_id=W8YFZ425KND68) [![NPM version](https://img.shields.io/npm/v/fill-range.svg?style=flat)](https://www.npmjs.com/package/fill-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range) [![NPM total downloads](https://img.shields.io/npm/dt/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/fill-range.svg?style=flat\\&label=Travis)](https://travis-ci.org/jonschlinkert/fill-range)\n\n> Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save fill-range\n```\n\n## Usage\n\nExpands numbers and letters, optionally using a `step` as the last argument. *(Numbers may be defined as JavaScript numbers or strings)*.\n\n```js\nconst fill = require('fill-range');\n// fill(from, to[, step, options]);\n\nconsole.log(fill('1', '10')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\nconsole.log(fill('1', '10', { toRegex: true })); //=> [1-9]|10\n```\n\n**Params**\n\n*   `from`: **{String|Number}** the number or letter to start with\n*   `to`: **{String|Number}** the number or letter to end with\n*   `step`: **{String|Number|Object|Function}** Optionally pass a [step](#optionsstep) to use.\n*   `options`: **{Object|Function}**: See all available [options](#options)\n\n## Examples\n\nBy default, an array of values is returned.\n\n**Alphabetical ranges**\n\n```js\nconsole.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']\nconsole.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]\n```\n\n**Numerical ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]\n```\n\n**Negative ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]\nconsole.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]\n```\n\n**Steps (increments)**\n\n```js\n// numerical ranges with increments\nconsole.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]\nconsole.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]\nconsole.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]\n\n// alphabetical ranges with increments\nconsole.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]\n```\n\n## Options\n\n### options.step\n\n**Type**: `number` (formatted as a string or number)\n\n**Default**: `undefined`\n\n**Description**: The increment to use for the range. Can be used with letters or numbers.\n\n**Example(s)**\n\n```js\n// numbers\nconsole.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]\nconsole.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]\nconsole.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]\n\n// letters\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]\nconsole.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]\n```\n\n### options.strictRanges\n\n**Type**: `boolean`\n\n**Default**: `false`\n\n**Description**: By default, `null` is returned when an invalid range is passed. Enable this option to throw a `RangeError` on invalid ranges.\n\n**Example(s)**\n\nThe following are all invalid:\n\n```js\nfill('1.1', '2');   // decimals not supported in ranges\nfill('a', '2');     // incompatible range values\nfill(1, 10, 'foo'); // invalid \"step\" argument\n```\n\n### options.stringify\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Cast all returned values to strings. By default, integers are returned as numbers.\n\n**Example(s)**\n\n```js\nconsole.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill(1, 5, { stringify: true })); //=> [ '1', '2', '3', '4', '5' ]\n```\n\n### options.toRegex\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Create a regex-compatible source string, instead of expanding values to an array.\n\n**Example(s)**\n\n```js\n// alphabetical range\nconsole.log(fill('a', 'e', { toRegex: true })); //=> '[a-e]'\n// alphabetical with step\nconsole.log(fill('a', 'z', 3, { toRegex: true })); //=> 'a|d|g|j|m|p|s|v|y'\n// numerical range\nconsole.log(fill('1', '100', { toRegex: true })); //=> '[1-9]|[1-9][0-9]|100'\n// numerical range with zero padding\nconsole.log(fill('000001', '100000', { toRegex: true }));\n//=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000'\n```\n\n### options.transform\n\n**Type**: `function`\n\n**Default**: `undefined`\n\n**Description**: Customize each value in the returned array (or [string](#optionstoRegex)). *(you can also pass this function as the last argument to `fill()`)*.\n\n**Example(s)**\n\n```js\n// add zero padding\nconsole.log(fill(1, 5, value => String(value).padStart(4, '0')));\n//=> ['0001', '0002', '0003', '0004', '0005']\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Contributors\n\n| **Commits** | **Contributor** |\\\n| --- | --- |\\\n| 116 | [jonschlinkert](https://github.com/jonschlinkert) |\\\n| 4   | [paulmillr](https://github.com/paulmillr) |\\\n| 2   | [realityking](https://github.com/realityking) |\\\n| 2   | [bluelovers](https://github.com/bluelovers) |\\\n| 1   | [edorivai](https://github.com/edorivai) |\\\n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\nPlease consider supporting me on Patreon, or [start your own Patreon page](https://patreon.com/invite/bxpbvm)!\n\n<a href=\"https://www.patreon.com/jonschlinkert\">\n<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" height=\"50\">\n</a>\n\n### License\n\nCopyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 08, 2019.*\n"},{"text":"# format\n\nprintf, sprintf, and vsprintf for JavaScript\n\n# Installation\n\nnpm install format\n\nThe code works in browsers as well, you can copy these functions into your project\nor otherwise include them with your other JavaScript.\n\n# Usage\n\n    var format = require('format')\n      , printf = format.printf\n      , vsprintf = format.vsprintf\n      // or if you want to keep it old school\n      , sprintf = format\n\n    // Print 'hello world'\n    printf('%s world', 'hello')\n\n    var what = 'life, the universe, and everything'\n    format('%d is the answer to %s', 42, what)\n    // => '42 is the answer to life, the universe, and everything'\n\n    vsprintf('%d is the answer to %s', [42, what])\n    // => '42 is the answer to life, the universe, and everything'\n\nSupported format specifiers: b, c, d, f, o, s, x, and X.\n\nSee `man 3 printf` or `man 1 printf` for details.\n\nPrecision is supported for floating point numbers.\n\n# License\n\nCopyright 2010 - 2014 Sami Samhuri sami@samhuri.net\n\n[MIT license](http://sjs.mit-license.org)\n"},{"text":"### [5.1.2](https://github.com/gulpjs/glob-parent/compare/v5.1.1...v5.1.2) (2021-03-06)\n\n### Bug Fixes\n\n*   eliminate ReDoS ([#36](https://github.com/gulpjs/glob-parent/issues/36)) ([f923116](https://github.com/gulpjs/glob-parent/commit/f9231168b0041fea3f8f954b3cceb56269fc6366))\n\n### [5.1.1](https://github.com/gulpjs/glob-parent/compare/v5.1.0...v5.1.1) (2021-01-27)\n\n### Bug Fixes\n\n*   unescape exclamation mark ([#26](https://github.com/gulpjs/glob-parent/issues/26)) ([a98874f](https://github.com/gulpjs/glob-parent/commit/a98874f1a59e407f4fb1beb0db4efa8392da60bb))\n\n## [5.1.0](https://github.com/gulpjs/glob-parent/compare/v5.0.0...v5.1.0) (2021-01-27)\n\n### Features\n\n*   add `flipBackslashes` option to disable auto conversion of slashes (closes [#24](https://github.com/gulpjs/glob-parent/issues/24)) ([#25](https://github.com/gulpjs/glob-parent/issues/25)) ([eecf91d](https://github.com/gulpjs/glob-parent/commit/eecf91d5e3834ed78aee39c4eaaae654d76b87b3))\n\n## [5.0.0](https://github.com/gulpjs/glob-parent/compare/v4.0.0...v5.0.0) (2021-01-27)\n\n### ⚠ BREAKING CHANGES\n\n*   Drop support for node <6 & bump dependencies\n\n### Miscellaneous Chores\n\n*   Drop support for node <6 & bump dependencies ([896c0c0](https://github.com/gulpjs/glob-parent/commit/896c0c00b4e7362f60b96e7fc295ae929245255a))\n\n## [4.0.0](https://github.com/gulpjs/glob-parent/compare/v3.1.0...v4.0.0) (2021-01-27)\n\n### ⚠ BREAKING CHANGES\n\n*   question marks are valid path characters on Windows so avoid flagging as a glob when alone\n*   Update is-glob dependency\n\n### Features\n\n*   hoist regexps and strings for performance gains ([4a80667](https://github.com/gulpjs/glob-parent/commit/4a80667c69355c76a572a5892b0f133c8e1f457e))\n*   question marks are valid path characters on Windows so avoid flagging as a glob when alone ([2a551dd](https://github.com/gulpjs/glob-parent/commit/2a551dd0dc3235e78bf3c94843d4107072d17841))\n*   Update is-glob dependency ([e41fcd8](https://github.com/gulpjs/glob-parent/commit/e41fcd895d1f7bc617dba45c9d935a7949b9c281))\n\n## [3.1.0](https://github.com/gulpjs/glob-parent/compare/v3.0.1...v3.1.0) (2021-01-27)\n\n### Features\n\n*   allow basic win32 backslash use ([272afa5](https://github.com/gulpjs/glob-parent/commit/272afa5fd070fc0f796386a5993d4ee4a846988b))\n*   handle extglobs (parentheses) containing separators ([7db1bdb](https://github.com/gulpjs/glob-parent/commit/7db1bdb0756e55fd14619e8ce31aa31b17b117fd))\n*   new approach to braces/brackets handling ([8269bd8](https://github.com/gulpjs/glob-parent/commit/8269bd89290d99fac9395a354fb56fdcdb80f0be))\n*   pre-process braces/brackets sections ([9ef8a87](https://github.com/gulpjs/glob-parent/commit/9ef8a87f66b1a43d0591e7a8e4fc5a18415ee388))\n*   preserve escaped brace/bracket at end of string ([8cfb0ba](https://github.com/gulpjs/glob-parent/commit/8cfb0ba84202d51571340dcbaf61b79d16a26c76))\n\n### Bug Fixes\n\n*   trailing escaped square brackets ([99ec9fe](https://github.com/gulpjs/glob-parent/commit/99ec9fecc60ee488ded20a94dd4f18b4f55c4ccf))\n\n### [3.0.1](https://github.com/gulpjs/glob-parent/compare/v3.0.0...v3.0.1) (2021-01-27)\n\n### Features\n\n*   use path-dirname ponyfill ([cdbea5f](https://github.com/gulpjs/glob-parent/commit/cdbea5f32a58a54e001a75ddd7c0fccd4776aacc))\n\n### Bug Fixes\n\n*   unescape glob-escaped dirnames on output ([598c533](https://github.com/gulpjs/glob-parent/commit/598c533bdf49c1428bc063aa9b8db40c5a86b030))\n\n## [3.0.0](https://github.com/gulpjs/glob-parent/compare/v2.0.0...v3.0.0) (2021-01-27)\n\n### ⚠ BREAKING CHANGES\n\n*   update is-glob dependency\n\n### Features\n\n*   update is-glob dependency ([5c5f8ef](https://github.com/gulpjs/glob-parent/commit/5c5f8efcee362a8e7638cf8220666acd8784f6bd))\n\n## [2.0.0](https://github.com/gulpjs/glob-parent/compare/v1.3.0...v2.0.0) (2021-01-27)\n\n### Features\n\n*   move up to dirname regardless of glob characters ([f97fb83](https://github.com/gulpjs/glob-parent/commit/f97fb83be2e0a9fc8d3b760e789d2ecadd6aa0c2))\n\n## [1.3.0](https://github.com/gulpjs/glob-parent/compare/v1.2.0...v1.3.0) (2021-01-27)\n\n## [1.2.0](https://github.com/gulpjs/glob-parent/compare/v1.1.0...v1.2.0) (2021-01-27)\n\n### Reverts\n\n*   feat: make regex test strings smaller ([dc80fa9](https://github.com/gulpjs/glob-parent/commit/dc80fa9658dca20549cfeba44bbd37d5246fcce0))\n\n## [1.1.0](https://github.com/gulpjs/glob-parent/compare/v1.0.0...v1.1.0) (2021-01-27)\n\n### Features\n\n*   make regex test strings smaller ([cd83220](https://github.com/gulpjs/glob-parent/commit/cd832208638f45169f986d80fcf66e401f35d233))\n\n## 1.0.0 (2021-01-27)\n"},{"text":"<p align=\"center\">\n  <a href=\"https://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# glob-parent\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Azure Pipelines Build Status][azure-pipelines-image]][azure-pipelines-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nExtract the non-magic parent path from a glob string.\n\n## Usage\n\n```js\nvar globParent = require('glob-parent');\n\nglobParent('path/to/*.js'); // 'path/to'\nglobParent('/root/path/to/*.js'); // '/root/path/to'\nglobParent('/*.js'); // '/'\nglobParent('*.js'); // '.'\nglobParent('**/*.js'); // '.'\nglobParent('path/{to,from}'); // 'path'\nglobParent('path/!(to|from)'); // 'path'\nglobParent('path/?(to|from)'); // 'path'\nglobParent('path/+(to|from)'); // 'path'\nglobParent('path/*(to|from)'); // 'path'\nglobParent('path/@(to|from)'); // 'path'\nglobParent('path/**/*'); // 'path'\n\n// if provided a non-glob path, returns the nearest dir\nglobParent('path/foo/bar.js'); // 'path/foo'\nglobParent('path/foo/'); // 'path/foo'\nglobParent('path/foo'); // 'path' (see issue #3 for details)\n```\n\n## API\n\n### `globParent(maybeGlobString, [options])`\n\nTakes a string and returns the part of the path before the glob begins. Be aware of Escaping rules and Limitations below.\n\n#### options\n\n```js\n{\n  // Disables the automatic conversion of slashes for Windows\n  flipBackslashes: true\n}\n```\n\n## Escaping\n\nThe following characters have special significance in glob patterns and must be escaped if you want them to be treated as regular path characters:\n\n*   `?` (question mark) unless used as a path segment alone\n*   `*` (asterisk)\n*   `|` (pipe)\n*   `(` (opening parenthesis)\n*   `)` (closing parenthesis)\n*   `{` (opening curly brace)\n*   `}` (closing curly brace)\n*   `[` (opening bracket)\n*   `]` (closing bracket)\n\n**Example**\n\n```js\nglobParent('foo/[bar]/') // 'foo'\nglobParent('foo/\\\\[bar]/') // 'foo/[bar]'\n```\n\n## Limitations\n\n### Braces & Brackets\n\nThis library attempts a quick and imperfect method of determining which path\nparts have glob magic without fully parsing/lexing the pattern. There are some\nadvanced use cases that can trip it up, such as nested braces where the outer\npair is escaped and the inner one contains a path separator. If you find\nyourself in the unlikely circumstance of being affected by this or need to\nensure higher-fidelity glob handling in your library, it is recommended that you\npre-process your input with [expand-braces] and/or [expand-brackets].\n\n### Windows\n\nBackslashes are not valid path separators for globs. If a path with backslashes\nis provided anyway, for simple cases, glob-parent will replace the path\nseparator for you and return the non-glob parent path (now with\nforward-slashes, which are still valid as Windows path separators).\n\nThis cannot be used in conjunction with escape characters.\n\n```js\n// BAD\nglobParent('C:\\\\Program Files \\\\(x86\\\\)\\\\*.ext') // 'C:/Program Files /(x86/)'\n\n// GOOD\nglobParent('C:/Program Files\\\\(x86\\\\)/*.ext') // 'C:/Program Files (x86)'\n```\n\nIf you are using escape characters for a pattern without path parts (i.e.\nrelative to `cwd`), prefix with `./` to avoid confusing glob-parent.\n\n```js\n// BAD\nglobParent('foo \\\\[bar]') // 'foo '\nglobParent('foo \\\\[bar]*') // 'foo '\n\n// GOOD\nglobParent('./foo \\\\[bar]') // 'foo [bar]'\nglobParent('./foo \\\\[bar]*') // '.'\n```\n\n## License\n\nISC\n\n[expand-braces]: https://github.com/jonschlinkert/expand-braces\n\n[expand-brackets]: https://github.com/jonschlinkert/expand-brackets\n\n[downloads-image]: https://img.shields.io/npm/dm/glob-parent.svg\n\n[npm-url]: https://www.npmjs.com/package/glob-parent\n\n[npm-image]: https://img.shields.io/npm/v/glob-parent.svg\n\n[azure-pipelines-url]: https://dev.azure.com/gulpjs/gulp/_build/latest?definitionId=2&branchName=master\n\n[azure-pipelines-image]: https://dev.azure.com/gulpjs/gulp/_apis/build/status/glob-parent?branchName=master\n\n[travis-url]: https://travis-ci.org/gulpjs/glob-parent\n\n[travis-image]: https://img.shields.io/travis/gulpjs/glob-parent.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/glob-parent\n\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/glob-parent.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/glob-parent\n\n[coveralls-image]: https://img.shields.io/coveralls/gulpjs/glob-parent/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n"},{"text":"# globby\n\n> User-friendly glob matching\n\nBased on [`fast-glob`](https://github.com/mrmlnc/fast-glob) but adds a bunch of useful features.\n\n## Features\n\n*   Promise API\n*   Multiple patterns\n*   Negated patterns: `['foo*', '!foobar']`\n*   Expands directories: `foo` → `foo/**/*`\n*   Supports `.gitignore` and similar ignore config files\n*   Supports `URL` as `cwd`\n\n## Install\n\n    $ npm install globby\n\n## Usage\n\n    ├── unicorn\n    ├── cake\n    └── rainbow\n\n```js\nimport {globby} from 'globby';\n\nconst paths = await globby(['*', '!cake']);\n\nconsole.log(paths);\n//=> ['unicorn', 'rainbow']\n```\n\n## API\n\nNote that glob patterns can only contain forward-slashes, not backward-slashes, so if you want to construct a glob pattern from path components, you need to use `path.posix.join()` instead of `path.join()`.\n\n### globby(patterns, options?)\n\nReturns a `Promise<string[]>` of matching paths.\n\n#### patterns\n\nType: `string | string[]`\n\nSee supported `minimatch` [patterns](https://github.com/isaacs/minimatch#usage).\n\n#### options\n\nType: `object`\n\nSee the [`fast-glob` options](https://github.com/mrmlnc/fast-glob#options-3) in addition to the ones below.\n\n##### expandDirectories\n\nType: `boolean | string[] | object`\\\nDefault: `true`\n\nIf set to `true`, `globby` will automatically glob directories for you. If you define an `Array` it will only glob files that matches the patterns inside the `Array`. You can also define an `object` with `files` and `extensions` like below:\n\n```js\nimport {globby} from 'globby';\n\n(async () => {\n\tconst paths = await globby('images', {\n\t\texpandDirectories: {\n\t\t\tfiles: ['cat', 'unicorn', '*.jpg'],\n\t\t\textensions: ['png']\n\t\t}\n\t});\n\n\tconsole.log(paths);\n\t//=> ['cat.png', 'unicorn.png', 'cow.jpg', 'rainbow.jpg']\n})();\n```\n\nNote that if you set this option to `false`, you won't get back matched directories unless you set `onlyFiles: false`.\n\n##### gitignore\n\nType: `boolean`\\\nDefault: `false`\n\nRespect ignore patterns in `.gitignore` files that apply to the globbed files.\n\n##### ignoreFiles\n\nType: `string | string[]`\\\nDefault: `undefined`\n\nGlob patterns to look for ignore files, which are then used to ignore globbed files.\n\nThis is a more generic form of the `gitignore` option, allowing you to find ignore files with a [compatible syntax](http://git-scm.com/docs/gitignore). For instance, this works with Babel's `.babelignore`, Prettier's `.prettierignore`, or ESLint's `.eslintignore` files.\n\n### globbySync(patterns, options?)\n\nReturns `string[]` of matching paths.\n\n### globbyStream(patterns, options?)\n\nReturns a [`stream.Readable`](https://nodejs.org/api/stream.html#stream_readable_streams) of matching paths.\n\nSince Node.js 10, [readable streams are iterable](https://nodejs.org/api/stream.html#stream_readable_symbol_asynciterator), so you can loop over glob matches in a [`for await...of` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) like this:\n\n```js\nimport {globbyStream} from 'globby';\n\n(async () => {\n\tfor await (const path of globbyStream('*.tmp')) {\n\t\tconsole.log(path);\n\t}\n})();\n```\n\n### generateGlobTasks(patterns, options?)\n\nReturns an `Promise<object[]>` in the format `{patterns: string[], options: Object}`, which can be passed as arguments to [`fast-glob`](https://github.com/mrmlnc/fast-glob). This is useful for other globbing-related packages.\n\nNote that you should avoid running the same tasks multiple times as they contain a file system cache. Instead, run this method each time to ensure file system changes are taken into consideration.\n\n### generateGlobTasksSync(patterns, options?)\n\nReturns an `object[]` in the format `{patterns: string[], options: Object}`, which can be passed as arguments to [`fast-glob`](https://github.com/mrmlnc/fast-glob). This is useful for other globbing-related packages.\n\nTakes the same arguments as `generateGlobTasks`.\n\n### isDynamicPattern(patterns, options?)\n\nReturns a `boolean` of whether there are any special glob characters in the `patterns`.\n\nNote that the options affect the results.\n\nThis function is backed by [`fast-glob`](https://github.com/mrmlnc/fast-glob#isdynamicpatternpattern-options).\n\n### isGitIgnored(options?)\n\nReturns a `Promise<(path: URL | string) => boolean>` indicating whether a given path is ignored via a `.gitignore` file.\n\nTakes `cwd?: URL | string` as options.\n\n```js\nimport {isGitIgnored} from 'globby';\n\nconst isIgnored = await isGitIgnored();\n\nconsole.log(isIgnored('some/file'));\n```\n\n### isGitIgnoredSync(options?)\n\nReturns a `(path: URL | string) => boolean` indicating whether a given path is ignored via a `.gitignore` file.\n\nTakes `cwd?: URL | string` as options.\n\n## Globbing patterns\n\nJust a quick overview.\n\n*   `*` matches any number of characters, but not `/`\n*   `?` matches a single character, but not `/`\n*   `**` matches any number of characters, including `/`, as long as it's the only thing in a path part\n*   `{}` allows for a comma-separated list of \"or\" expressions\n*   `!` at the beginning of a pattern will negate the match\n\n[Various patterns and expected matches.](https://github.com/sindresorhus/multimatch/blob/main/test/test.js)\n\n## globby for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of globby and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-globby?utm_source=npm-globby\\&utm_medium=referral\\&utm_campaign=enterprise\\&utm_term=repo)\n\n## Related\n\n*   [multimatch](https://github.com/sindresorhus/multimatch) - Match against a list instead of the filesystem\n*   [matcher](https://github.com/sindresorhus/matcher) - Simple wildcard matching\n*   [del](https://github.com/sindresorhus/del) - Delete files and directories\n*   [make-dir](https://github.com/sindresorhus/make-dir) - Make a directory and its parents if needed\n"},{"text":"<table><thead>\n  <tr>\n    <th>Linux</th>\n    <th>OS X</th>\n    <th>Windows</th>\n    <th>Coverage</th>\n    <th>Downloads</th>\n  </tr>\n</thead><tbody><tr>\n  <td colspan=\"2\" align=\"center\">\n    <a href=\"https://travis-ci.org/kaelzhang/node-ignore\">\n    <img\n      src=\"https://travis-ci.org/kaelzhang/node-ignore.svg?branch=master\"\n      alt=\"Build Status\" /></a>\n  </td>\n  <td align=\"center\">\n    <a href=\"https://ci.appveyor.com/project/kaelzhang/node-ignore\">\n    <img\n      src=\"https://ci.appveyor.com/api/projects/status/github/kaelzhang/node-ignore?branch=master&svg=true\"\n      alt=\"Windows Build Status\" /></a>\n  </td>\n  <td align=\"center\">\n    <a href=\"https://codecov.io/gh/kaelzhang/node-ignore\">\n    <img\n      src=\"https://codecov.io/gh/kaelzhang/node-ignore/branch/master/graph/badge.svg\"\n      alt=\"Coverage Status\" /></a>\n  </td>\n  <td align=\"center\">\n    <a href=\"https://www.npmjs.org/package/ignore\">\n    <img\n      src=\"http://img.shields.io/npm/dm/ignore.svg\"\n      alt=\"npm module downloads per month\" /></a>\n  </td>\n</tr></tbody></table>\n\n# ignore\n\n`ignore` is a manager, filter and parser which implemented in pure JavaScript according to the [.gitignore spec 2.22.1](http://git-scm.com/docs/gitignore).\n\n`ignore` is used by eslint, gitbook and [many others](https://www.npmjs.com/browse/depended/ignore).\n\nPay **ATTENTION** that [`minimatch`](https://www.npmjs.org/package/minimatch) (which used by `fstream-ignore`) does not follow the gitignore spec.\n\nTo filter filenames according to a .gitignore file, I recommend this npm package, `ignore`.\n\nTo parse an `.npmignore` file, you should use `minimatch`, because an `.npmignore` file is parsed by npm using `minimatch` and it does not work in the .gitignore way.\n\n### Tested on\n\n`ignore` is fully tested, and has more than **five hundreds** of unit tests.\n\n*   Linux + Node: `0.8` - `7.x`\n*   Windows + Node: `0.10` - `7.x`, node < `0.10` is not tested due to the lack of support of appveyor.\n\nActually, `ignore` does not rely on any versions of node specially.\n\nSince `4.0.0`, ignore will no longer support `node < 6` by default, to use in node < 6, `require('ignore/legacy')`. For details, see [CHANGELOG](https://github.com/kaelzhang/node-ignore/blob/master/CHANGELOG.md).\n\n## Table Of Main Contents\n\n*   [Usage](#usage)\n*   [`Pathname` Conventions](#pathname-conventions)\n*   See Also:\n    *   [`glob-gitignore`](https://www.npmjs.com/package/glob-gitignore) matches files using patterns and filters them according to gitignore rules.\n*   [Upgrade Guide](#upgrade-guide)\n\n## Install\n\n```sh\nnpm i ignore\n```\n\n## Usage\n\n```js\nimport ignore from 'ignore'\nconst ig = ignore().add(['.abc/*', '!.abc/d/'])\n```\n\n### Filter the given paths\n\n```js\nconst paths = [\n  '.abc/a.js',    // filtered out\n  '.abc/d/e.js'   // included\n]\n\nig.filter(paths)        // ['.abc/d/e.js']\nig.ignores('.abc/a.js') // true\n```\n\n### As the filter function\n\n```js\npaths.filter(ig.createFilter()); // ['.abc/d/e.js']\n```\n\n### Win32 paths will be handled\n\n```js\nig.filter(['.abc\\\\a.js', '.abc\\\\d\\\\e.js'])\n// if the code above runs on windows, the result will be\n// ['.abc\\\\d\\\\e.js']\n```\n\n## Why another ignore?\n\n*   `ignore` is a standalone module, and is much simpler so that it could easy work with other programs, unlike [isaacs](https://npmjs.org/~isaacs)'s [fstream-ignore](https://npmjs.org/package/fstream-ignore) which must work with the modules of the fstream family.\n\n*   `ignore` only contains utility methods to filter paths according to the specified ignore rules, so\n    *   `ignore` never try to find out ignore rules by traversing directories or fetching from git configurations.\n    *   `ignore` don't cares about sub-modules of git projects.\n\n*   Exactly according to [gitignore man page](http://git-scm.com/docs/gitignore), fixes some known matching issues of fstream-ignore, such as:\n    *   '`/*.js`' should only match '`a.js`', but not '`abc/a.js`'.\n    *   '`**/foo`' should match '`foo`' anywhere.\n    *   Prevent re-including a file if a parent directory of that file is excluded.\n    *   Handle trailing whitespaces:\n        *   `'a '`(one space) should not match `'a  '`(two spaces).\n        *   `'a \\ '` matches `'a  '`\n    *   All test cases are verified with the result of `git check-ignore`.\n\n# Methods\n\n## .add(pattern: string | Ignore): this\n\n## .add(patterns: Array\\<string | Ignore>): this\n\n*   **pattern** `String | Ignore` An ignore pattern string, or the `Ignore` instance\n*   **patterns** `Array<String | Ignore>` Array of ignore patterns.\n\nAdds a rule or several rules to the current manager.\n\nReturns `this`\n\nNotice that a line starting with `'#'`(hash) is treated as a comment. Put a backslash (`'\\'`) in front of the first hash for patterns that begin with a hash, if you want to ignore a file with a hash at the beginning of the filename.\n\n```js\nignore().add('#abc').ignores('#abc')    // false\nignore().add('\\#abc').ignores('#abc')   // true\n```\n\n`pattern` could either be a line of ignore pattern or a string of multiple ignore patterns, which means we could just `ignore().add()` the content of a ignore file:\n\n```js\nignore()\n.add(fs.readFileSync(filenameOfGitignore).toString())\n.filter(filenames)\n```\n\n`pattern` could also be an `ignore` instance, so that we could easily inherit the rules of another `Ignore` instance.\n\n## <strike>.addIgnoreFile(path)</strike>\n\nREMOVED in `3.x` for now.\n\nTo upgrade `ignore@2.x` up to `3.x`, use\n\n```js\nimport fs from 'fs'\n\nif (fs.existsSync(filename)) {\n  ignore().add(fs.readFileSync(filename).toString())\n}\n```\n\ninstead.\n\n## .filter(paths: Array\\<Pathname>): Array\\<Pathname>\n\n```ts\ntype Pathname = string\n```\n\nFilters the given array of pathnames, and returns the filtered array.\n\n*   **paths** `Array.<Pathname>` The array of `pathname`s to be filtered.\n\n### `Pathname` Conventions:\n\n#### 1. `Pathname` should be a `path.relative()`d pathname\n\n`Pathname` should be a string that have been `path.join()`ed, or the return value of `path.relative()` to the current directory,\n\n````js\n// WRONG, an error will be thrown\nig.ignores('./abc')\n\n// WRONG, for it will never happen, and an error will be thrown\n// If the gitignore rule locates at the root directory,\n// `'/abc'` should be changed to `'abc'`.\n// ```\n// path.relative('/', '/abc')  -> 'abc'\n// ```\nig.ignores('/abc')\n\n// WRONG, that it is an absolute path on Windows, an error will be thrown\nig.ignores('C:\\\\abc')\n\n// Right\nig.ignores('abc')\n\n// Right\nig.ignores(path.join('./abc'))  // path.join('./abc') -> 'abc'\n````\n\nIn other words, each `Pathname` here should be a relative path to the directory of the gitignore rules.\n\nSuppose the dir structure is:\n\n    /path/to/your/repo\n        |-- a\n        |   |-- a.js\n        |\n        |-- .b\n        |\n        |-- .c\n             |-- .DS_store\n\nThen the `paths` might be like this:\n\n```js\n[\n  'a/a.js'\n  '.b',\n  '.c/.DS_store'\n]\n```\n\n#### 2. filenames and dirnames\n\n`node-ignore` does NO `fs.stat` during path matching, so for the example below:\n\n```js\n// First, we add a ignore pattern to ignore a directory\nig.add('config/')\n\n// `ig` does NOT know if 'config', in the real world,\n//   is a normal file, directory or something.\n\nig.ignores('config')\n// `ig` treats `config` as a file, so it returns `false`\n\nig.ignores('config/')\n// returns `true`\n```\n\nSpecially for people who develop some library based on `node-ignore`, it is important to understand that.\n\nUsually, you could use [`glob`](http://npmjs.org/package/glob) with `option.mark = true` to fetch the structure of the current directory:\n\n```js\nimport glob from 'glob'\n\nglob('**', {\n  // Adds a / character to directory matches.\n  mark: true\n}, (err, files) => {\n  if (err) {\n    return console.error(err)\n  }\n\n  let filtered = ignore().add(patterns).filter(files)\n  console.log(filtered)\n})\n```\n\n## .ignores(pathname: Pathname): boolean\n\n> new in 3.2.0\n\nReturns `Boolean` whether `pathname` should be ignored.\n\n```js\nig.ignores('.abc/a.js')    // true\n```\n\n## .createFilter()\n\nCreates a filter function which could filter an array of paths with `Array.prototype.filter`.\n\nReturns `function(path)` the filter function.\n\n## .test(pathname: Pathname) since 5.0.0\n\nReturns `TestResult`\n\n```ts\ninterface TestResult {\n  ignored: boolean\n  // true if the `pathname` is finally unignored by some negative pattern\n  unignored: boolean\n}\n```\n\n*   `{ignored: true, unignored: false}`: the `pathname` is ignored\n*   `{ignored: false, unignored: true}`: the `pathname` is unignored\n*   `{ignored: false, unignored: false}`: the `pathname` is never matched by any ignore rules.\n\n## static `ignore.isPathValid(pathname): boolean` since 5.0.0\n\nCheck whether the `pathname` is an valid `path.relative()`d path according to the [convention](#1-pathname-should-be-a-pathrelatived-pathname).\n\nThis method is **NOT** used to check if an ignore pattern is valid.\n\n```js\nignore.isPathValid('./foo')  // false\n```\n\n## ignore(options)\n\n### `options.ignorecase` since 4.0.0\n\nSimilar as the `core.ignorecase` option of [git-config](https://git-scm.com/docs/git-config), `node-ignore` will be case insensitive if `options.ignorecase` is set to `true` (the default value), otherwise case sensitive.\n\n```js\nconst ig = ignore({\n  ignorecase: false\n})\n\nig.add('*.png')\n\nig.ignores('*.PNG')  // false\n```\n\n### `options.ignoreCase?: boolean` since 5.2.0\n\nWhich is alternative to `options.ignoreCase`\n\n### `options.allowRelativePaths?: boolean` since 5.2.0\n\nThis option brings backward compatibility with projects which based on `ignore@4.x`. If `options.allowRelativePaths` is `true`, `ignore` will not check whether the given path to be tested is [`path.relative()`d](#pathname-conventions).\n\nHowever, passing a relative path, such as `'./foo'` or `'../foo'`, to test if it is ignored or not is not a good practise, which might lead to unexpected behavior\n\n```js\nignore({\n  allowRelativePaths: true\n}).ignores('../foo/bar.js') // And it will not throw\n```\n\n***\n\n# Upgrade Guide\n\n## Upgrade 4.x -> 5.x\n\nSince `5.0.0`, if an invalid `Pathname` passed into `ig.ignores()`, an error will be thrown, unless `options.allowRelative = true` is passed to the `Ignore` factory.\n\nWhile `ignore < 5.0.0` did not make sure what the return value was, as well as\n\n```ts\n.ignores(pathname: Pathname): boolean\n\n.filter(pathnames: Array<Pathname>): Array<Pathname>\n\n.createFilter(): (pathname: Pathname) => boolean\n\n.test(pathname: Pathname): {ignored: boolean, unignored: boolean}\n```\n\nSee the convention [here](#1-pathname-should-be-a-pathrelatived-pathname) for details.\n\nIf there are invalid pathnames, the conversion and filtration should be done by users.\n\n```js\nimport {isPathValid} from 'ignore' // introduced in 5.0.0\n\nconst paths = [\n  // invalid\n  //////////////////\n  '',\n  false,\n  '../foo',\n  '.',\n  //////////////////\n\n  // valid\n  'foo'\n]\n.filter(isValidPath)\n\nig.filter(paths)\n```\n\n## Upgrade 3.x -> 4.x\n\nSince `4.0.0`, `ignore` will no longer support node < 6, to use `ignore` in node < 6:\n\n```js\nvar ignore = require('ignore/legacy')\n```\n\n## Upgrade 2.x -> 3.x\n\n*   All `options` of 2.x are unnecessary and removed, so just remove them.\n*   `ignore()` instance is no longer an [`EventEmitter`](nodejs.org/api/events.html), and all events are unnecessary and removed.\n*   `.addIgnoreFile()` is removed, see the [.addIgnoreFile](#addignorefilepath) section for details.\n\n***\n\n# Collaborators\n\n*   [@whitecolor](https://github.com/whitecolor) *Alex*\n*   [@SamyPesse](https://github.com/SamyPesse) *Samy Pessé*\n*   [@azproduction](https://github.com/azproduction) *Mikhail Davydov*\n*   [@TrySound](https://github.com/TrySound) *Bogdan Chadkin*\n*   [@JanMattner](https://github.com/JanMattner) *Jan Mattner*\n*   [@ntwb](https://github.com/ntwb) *Stephen Edgar*\n*   [@kasperisager](https://github.com/kasperisager) *Kasper Isager*\n*   [@sandersn](https://github.com/sandersn) *Nathan Shively-Sanders*\n"},{"text":"# is-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/is-buffer/master.svg\n\n[travis-url]: https://travis-ci.org/feross/is-buffer\n\n[npm-image]: https://img.shields.io/npm/v/is-buffer.svg\n\n[npm-url]: https://npmjs.org/package/is-buffer\n\n[downloads-image]: https://img.shields.io/npm/dm/is-buffer.svg\n\n[downloads-url]: https://npmjs.org/package/is-buffer\n\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n\n[standard-url]: https://standardjs.com\n\n#### Determine if an object is a [`Buffer`](http://nodejs.org/api/buffer.html) (including the [browserify Buffer](https://github.com/feross/buffer))\n\n[![saucelabs][saucelabs-image]][saucelabs-url]\n\n[saucelabs-image]: https://saucelabs.com/browser-matrix/is-buffer.svg\n\n[saucelabs-url]: https://saucelabs.com/u/is-buffer\n\n## Why not use `Buffer.isBuffer`?\n\nThis module lets you check if an object is a `Buffer` without using `Buffer.isBuffer` (which includes the whole [buffer](https://github.com/feross/buffer) module in [browserify](http://browserify.org/)).\n\nIt's future-proof and works in node too!\n\n## install\n\n```bash\nnpm install is-buffer\n```\n\n## usage\n\n```js\nvar isBuffer = require('is-buffer')\n\nisBuffer(new Buffer(4)) // true\nisBuffer(Buffer.alloc(4)) //true\n\nisBuffer(undefined) // false\nisBuffer(null) // false\nisBuffer('') // false\nisBuffer(true) // false\nisBuffer(false) // false\nisBuffer(0) // false\nisBuffer(1) // false\nisBuffer(1.0) // false\nisBuffer('string') // false\nisBuffer({}) // false\nisBuffer(function foo () {}) // false\n```\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org).\n"},{"text":"# is-extglob [![NPM version](https://img.shields.io/npm/v/is-extglob.svg?style=flat)](https://www.npmjs.com/package/is-extglob) [![NPM downloads](https://img.shields.io/npm/dm/is-extglob.svg?style=flat)](https://npmjs.org/package/is-extglob) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-extglob.svg?style=flat)](https://travis-ci.org/jonschlinkert/is-extglob)\n\n> Returns true if a string has an extglob.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-extglob\n```\n\n## Usage\n\n```js\nvar isExtglob = require('is-extglob');\n```\n\n**True**\n\n```js\nisExtglob('?(abc)');\nisExtglob('@(abc)');\nisExtglob('!(abc)');\nisExtglob('*(abc)');\nisExtglob('+(abc)');\n```\n\n**False**\n\nEscaped extglobs:\n\n```js\nisExtglob('\\\\?(abc)');\nisExtglob('\\\\@(abc)');\nisExtglob('\\\\!(abc)');\nisExtglob('\\\\*(abc)');\nisExtglob('\\\\+(abc)');\n```\n\nEverything else...\n\n```js\nisExtglob('foo.js');\nisExtglob('!foo.js');\nisExtglob('*.js');\nisExtglob('**/abc.js');\nisExtglob('abc/*.js');\nisExtglob('abc/(aaa|bbb).js');\nisExtglob('abc/[a-z].js');\nisExtglob('abc/{a,b}.js');\nisExtglob('abc/?.js');\nisExtglob('abc.js');\nisExtglob('abc/def/ghi.js');\n```\n\n## History\n\n**v2.0**\n\nAdds support for escaping. Escaped exglobs no longer return true.\n\n## About\n\n### Related projects\n\n*   [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob \"Returns `true` if an array has a glob pattern.\")\n*   [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n*   [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n*(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)*\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n*   [github/jonschlinkert](https://github.com/jonschlinkert)\n*   [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/is-extglob/blob/master/LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.31, on October 12, 2016.*\n"},{"text":"# is-glob [![NPM version](https://img.shields.io/npm/v/is-glob.svg?style=flat)](https://www.npmjs.com/package/is-glob) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob) [![NPM total downloads](https://img.shields.io/npm/dt/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob) [![Build Status](https://img.shields.io/github/workflow/status/micromatch/is-glob/dev)](https://github.com/micromatch/is-glob/actions)\n\n> Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-glob\n```\n\nYou might also be interested in [is-valid-glob](https://github.com/jonschlinkert/is-valid-glob) and [has-glob](https://github.com/jonschlinkert/has-glob).\n\n## Usage\n\n```js\nvar isGlob = require('is-glob');\n```\n\n### Default behavior\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js');\nisGlob('*.js');\nisGlob('**/abc.js');\nisGlob('abc/*.js');\nisGlob('abc/(aaa|bbb).js');\nisGlob('abc/[a-z].js');\nisGlob('abc/{a,b}.js');\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js');\nisGlob('abc/!(a).js');\nisGlob('abc/+(a).js');\nisGlob('abc/*(a).js');\nisGlob('abc/?(a).js');\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('abc/\\\\@(a).js');\nisGlob('abc/\\\\!(a).js');\nisGlob('abc/\\\\+(a).js');\nisGlob('abc/\\\\*(a).js');\nisGlob('abc/\\\\?(a).js');\nisGlob('\\\\!foo.js');\nisGlob('\\\\*.js');\nisGlob('\\\\*\\\\*/abc.js');\nisGlob('abc/\\\\*.js');\nisGlob('abc/\\\\(aaa|bbb).js');\nisGlob('abc/\\\\[a-z].js');\nisGlob('abc/\\\\{a,b}.js');\n//=> false\n```\n\nPatterns that do not have glob patterns return `false`:\n\n```js\nisGlob('abc.js');\nisGlob('abc/def/ghi.js');\nisGlob('foo.js');\nisGlob('abc/@.js');\nisGlob('abc/+.js');\nisGlob('abc/?.js');\nisGlob();\nisGlob(null);\n//=> false\n```\n\nArrays are also `false` (If you want to check if an array has a glob pattern, use [has-glob](https://github.com/jonschlinkert/has-glob)):\n\n```js\nisGlob(['**/*.js']);\nisGlob(['foo.js']);\n//=> false\n```\n\n### Option strict\n\nWhen `options.strict === false` the behavior is less strict in determining if a pattern is a glob. Meaning that\nsome patterns that would return `false` may return `true`. This is done so that matching libraries like [micromatch](https://github.com/micromatch/micromatch) have a chance at determining if the pattern is a glob or not.\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js', {strict: false});\nisGlob('*.js', {strict: false});\nisGlob('**/abc.js', {strict: false});\nisGlob('abc/*.js', {strict: false});\nisGlob('abc/(aaa|bbb).js', {strict: false});\nisGlob('abc/[a-z].js', {strict: false});\nisGlob('abc/{a,b}.js', {strict: false});\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js', {strict: false});\nisGlob('abc/!(a).js', {strict: false});\nisGlob('abc/+(a).js', {strict: false});\nisGlob('abc/*(a).js', {strict: false});\nisGlob('abc/?(a).js', {strict: false});\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('\\\\!foo.js', {strict: false});\nisGlob('\\\\*.js', {strict: false});\nisGlob('\\\\*\\\\*/abc.js', {strict: false});\nisGlob('abc/\\\\*.js', {strict: false});\nisGlob('abc/\\\\(aaa|bbb).js', {strict: false});\nisGlob('abc/\\\\[a-z].js', {strict: false});\nisGlob('abc/\\\\{a,b}.js', {strict: false});\n//=> false\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n*   [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n*   [base](https://www.npmjs.com/package/base): Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks | [homepage](https://github.com/node-base/base \"Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks\")\n*   [update](https://www.npmjs.com/package/update): Be scalable! Update is a new, open source developer framework and CLI for automating updates… [more](https://github.com/update/update) | [homepage](https://github.com/update/update \"Be scalable! Update is a new, open source developer framework and CLI for automating updates of any kind in code projects.\")\n*   [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")\n\n### Contributors\n\n| **Commits** | **Contributor** |\\\n| --- | --- |\\\n| 47 | [jonschlinkert](https://github.com/jonschlinkert) |\\\n| 5  | [doowb](https://github.com/doowb) |\\\n| 1  | [phated](https://github.com/phated) |\\\n| 1  | [danhper](https://github.com/danhper) |\\\n| 1  | [paulmillr](https://github.com/paulmillr) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on March 27, 2019.*\n"},{"text":"# is-number [![NPM version](https://img.shields.io/npm/v/is-number.svg?style=flat)](https://www.npmjs.com/package/is-number) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-number.svg?style=flat)](https://npmjs.org/package/is-number) [![NPM total downloads](https://img.shields.io/npm/dt/is-number.svg?style=flat)](https://npmjs.org/package/is-number) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-number.svg?style=flat\\&label=Travis)](https://travis-ci.org/jonschlinkert/is-number)\n\n> Returns true if the value is a finite number.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-number\n```\n\n## Why is this needed?\n\nIn JavaScript, it's not always as straightforward as it should be to reliably check if a value is a number. It's common for devs to use `+`, `-`, or `Number()` to cast a string value to a number (for example, when values are returned from user input, regex matches, parsers, etc). But there are many non-intuitive edge cases that yield unexpected results:\n\n```js\nconsole.log(+[]); //=> 0\nconsole.log(+''); //=> 0\nconsole.log(+'   '); //=> 0\nconsole.log(typeof NaN); //=> 'number'\n```\n\nThis library offers a performant way to smooth out edge cases like these.\n\n## Usage\n\n```js\nconst isNumber = require('is-number');\n```\n\nSee the [tests](./test.js) for more examples.\n\n### true\n\n```js\nisNumber(5e3);               // true\nisNumber(0xff);              // true\nisNumber(-1.1);              // true\nisNumber(0);                 // true\nisNumber(1);                 // true\nisNumber(1.1);               // true\nisNumber(10);                // true\nisNumber(10.10);             // true\nisNumber(100);               // true\nisNumber('-1.1');            // true\nisNumber('0');               // true\nisNumber('012');             // true\nisNumber('0xff');            // true\nisNumber('1');               // true\nisNumber('1.1');             // true\nisNumber('10');              // true\nisNumber('10.10');           // true\nisNumber('100');             // true\nisNumber('5e3');             // true\nisNumber(parseInt('012'));   // true\nisNumber(parseFloat('012')); // true\n```\n\n### False\n\nEverything else is false, as you would expect:\n\n```js\nisNumber(Infinity);          // false\nisNumber(NaN);               // false\nisNumber(null);              // false\nisNumber(undefined);         // false\nisNumber('');                // false\nisNumber('   ');             // false\nisNumber('foo');             // false\nisNumber([1]);               // false\nisNumber([]);                // false\nisNumber(function () {});    // false\nisNumber({});                // false\n```\n\n## Release history\n\n### 7.0.0\n\n*   Refactor. Now uses `.isFinite` if it exists.\n*   Performance is about the same as v6.0 when the value is a string or number. But it's now 3x-4x faster when the value is not a string or number.\n\n### 6.0.0\n\n*   Optimizations, thanks to @benaadams.\n\n### 5.0.0\n\n**Breaking changes**\n\n*   removed support for `instanceof Number` and `instanceof String`\n\n## Benchmarks\n\nAs with all benchmarks, take these with a grain of salt. See the [benchmarks](./benchmark/index.js) for more detail.\n\n    # all\n    v7.0 x 413,222 ops/sec ±2.02% (86 runs sampled)\n    v6.0 x 111,061 ops/sec ±1.29% (85 runs sampled)\n    parseFloat x 317,596 ops/sec ±1.36% (86 runs sampled)\n    fastest is 'v7.0'\n\n    # string\n    v7.0 x 3,054,496 ops/sec ±1.05% (89 runs sampled)\n    v6.0 x 2,957,781 ops/sec ±0.98% (88 runs sampled)\n    parseFloat x 3,071,060 ops/sec ±1.13% (88 runs sampled)\n    fastest is 'parseFloat,v7.0'\n\n    # number\n    v7.0 x 3,146,895 ops/sec ±0.89% (89 runs sampled)\n    v6.0 x 3,214,038 ops/sec ±1.07% (89 runs sampled)\n    parseFloat x 3,077,588 ops/sec ±1.07% (87 runs sampled)\n    fastest is 'v6.0'\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n*   [is-plain-object](https://www.npmjs.com/package/is-plain-object): Returns true if an object was created by the `Object` constructor. | [homepage](https://github.com/jonschlinkert/is-plain-object \"Returns true if an object was created by the `Object` constructor.\")\n*   [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n*   [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n*   [kind-of](https://www.npmjs.com/package/kind-of): Get the native type of a value. | [homepage](https://github.com/jonschlinkert/kind-of \"Get the native type of a value.\")\n\n### Contributors\n\n| **Commits** | **Contributor** |\n| --- | --- |\n| 49 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 5 | [charlike-old](https://github.com/charlike-old) |\n| 1 | [benaadams](https://github.com/benaadams) |\n| 1 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 15, 2018.*\n"},{"text":"# is-plain-obj\n\n> Check if a value is a plain object\n\nAn object is plain if it's created by either `{}`, `new Object()`, or `Object.create(null)`.\n\n## Install\n\n    $ npm install is-plain-obj\n\n## Usage\n\n```js\nimport isPlainObject from 'is-plain-obj';\n\nisPlainObject({foo: 'bar'});\n//=> true\n\nisPlainObject(new Object());\n//=> true\n\nisPlainObject(Object.create(null));\n//=> true\n\nisPlainObject([1, 2, 3]);\n//=> false\n\nclass Unicorn {}\nisPlainObject(new Unicorn());\n//=> false\n```\n\n## Related\n\n*   [is-obj](https://github.com/sindresorhus/is-obj) - Check if a value is an object\n*   [is](https://github.com/sindresorhus/is) - Type check values\n\n***\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-is-plain-obj?utm_source=npm-is-plain-obj&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n"},{"text":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [4.1.0] - 2021-04-15\n\n### Added\n\n*   Types are now exported as `yaml.types.XXX`.\n*   Every type now has `options` property with original arguments kept as they were\n    (see `yaml.types.int.options` as an example).\n\n### Changed\n\n*   `Schema.extend()` now keeps old type order in case of conflicts\n    (e.g. Schema.extend(\\[ a, b, c ]).extend(\\[ b, a, d ]) is now ordered as `abcd` instead of `cbad`).\n\n## [4.0.0] - 2021-01-03\n\n### Changed\n\n*   Check [migration guide](migrate_v3_to_v4.md) to see details for all breaking changes.\n*   Breaking: \"unsafe\" tags `!!js/function`, `!!js/regexp`, `!!js/undefined` are\n    moved to [js-yaml-js-types](https://github.com/nodeca/js-yaml-js-types) package.\n*   Breaking: removed `safe*` functions. Use `load`, `loadAll`, `dump`\n    instead which are all now safe by default.\n*   `yaml.DEFAULT_SAFE_SCHEMA` and `yaml.DEFAULT_FULL_SCHEMA` are removed, use\n    `yaml.DEFAULT_SCHEMA` instead.\n*   `yaml.Schema.create(schema, tags)` is removed, use `schema.extend(tags)` instead.\n*   `!!binary` now always mapped to `Uint8Array` on load.\n*   Reduced nesting of `/lib` folder.\n*   Parse numbers according to YAML 1.2 instead of YAML 1.1 (`01234` is now decimal,\n    `0o1234` is octal, `1:23` is parsed as string instead of base60).\n*   `dump()` no longer quotes `:`, `[`, `]`, `(`, `)` except when necessary, #470, #557.\n*   Line and column in exceptions are now formatted as `(X:Y)` instead of\n    `at line X, column Y` (also present in compact format), #332.\n*   Code snippet created in exceptions now contains multiple lines with line numbers.\n*   `dump()` now serializes `undefined` as `null` in collections and removes keys with\n    `undefined` in mappings, #571.\n*   `dump()` with `skipInvalid=true` now serializes invalid items in collections as null.\n*   Custom tags starting with `!` are now dumped as `!tag` instead of `!<!tag>`, #576.\n*   Custom tags starting with `tag:yaml.org,2002:` are now shorthanded using `!!`, #258.\n\n### Added\n\n*   Added `.mjs` (es modules) support.\n*   Added `quotingType` and `forceQuotes` options for dumper to configure\n    string literal style, #290, #529.\n*   Added `styles: { '!!null': 'empty' }` option for dumper\n    (serializes `{ foo: null }` as \"`foo: `\"), #570.\n*   Added `replacer` option (similar to option in JSON.stringify), #339.\n*   Custom `Tag` can now handle all tags or multiple tags with the same prefix, #385.\n\n### Fixed\n\n*   Astral characters are no longer encoded by `dump()`, #587.\n*   \"duplicate mapping key\" exception now points at the correct column, #452.\n*   Extra commas in flow collections (e.g. `[foo,,bar]`) now throw an exception\n    instead of producing null, #321.\n*   `__proto__` key no longer overrides object prototype, #164.\n*   Removed `bower.json`.\n*   Tags are now url-decoded in `load()` and url-encoded in `dump()`\n    (previously usage of custom non-ascii tags may have led to invalid YAML that can't be parsed).\n*   Anchors now work correctly with empty nodes, #301.\n*   Fix incorrect parsing of invalid block mapping syntax, #418.\n*   Throw an error if block sequence/mapping indent contains a tab, #80.\n\n## \\[3.14.1] - 2020-12-07\n\n### Security\n\n*   Fix possible code execution in (already unsafe) `.load()` (in \\&anchor).\n\n## [3.14.0] - 2020-05-22\n\n### Changed\n\n*   Support `safe/loadAll(input, options)` variant of call.\n*   CI: drop outdated nodejs versions.\n*   Dev deps bump.\n\n### Fixed\n\n*   Quote `=` in plain scalars #519.\n*   Check the node type for `!<?>` tag in case user manually specifies it.\n*   Verify that there are no null-bytes in input.\n*   Fix wrong quote position when writing condensed flow, #526.\n\n## [3.13.1] - 2019-04-05\n\n### Security\n\n*   Fix possible code execution in (already unsafe) `.load()`, #480.\n\n## [3.13.0] - 2019-03-20\n\n### Security\n\n*   Security fix: `safeLoad()` can hang when arrays with nested refs\n    used as key. Now throws exception for nested arrays. #475.\n\n## [3.12.2] - 2019-02-26\n\n### Fixed\n\n*   Fix `noArrayIndent` option for root level, #468.\n\n## [3.12.1] - 2019-01-05\n\n### Added\n\n*   Added `noArrayIndent` option, #432.\n\n## [3.12.0] - 2018-06-02\n\n### Changed\n\n*   Support arrow functions without a block statement, #421.\n\n## [3.11.0] - 2018-03-05\n\n### Added\n\n*   Add arrow functions suport for `!!js/function`.\n\n### Fixed\n\n*   Fix dump in bin/octal/hex formats for negative integers, #399.\n\n## [3.10.0] - 2017-09-10\n\n### Fixed\n\n*   Fix `condenseFlow` output (quote keys for sure, instead of spaces), #371, #370.\n*   Dump astrals as codepoints instead of surrogate pair, #368.\n\n## [3.9.1] - 2017-07-08\n\n### Fixed\n\n*   Ensure stack is present for custom errors in node 7.+, #351.\n\n## [3.9.0] - 2017-07-08\n\n### Added\n\n*   Add `condenseFlow` option (to create pretty URL query params), #346.\n\n### Fixed\n\n*   Support array return from safeLoadAll/loadAll, #350.\n\n## [3.8.4] - 2017-05-08\n\n### Fixed\n\n*   Dumper: prevent space after dash for arrays that wrap, #343.\n\n## [3.8.3] - 2017-04-05\n\n### Fixed\n\n*   Should not allow numbers to begin and end with underscore, #335.\n\n## [3.8.2] - 2017-03-02\n\n### Fixed\n\n*   Fix `!!float 123` (integers) parse, #333.\n*   Don't allow leading zeros in floats (except 0, 0.xxx).\n*   Allow positive exponent without sign in floats.\n\n## [3.8.1] - 2017-02-07\n\n### Changed\n\n*   Maintenance: update browserified build.\n\n## [3.8.0] - 2017-02-07\n\n### Fixed\n\n*   Fix reported position for `duplicated mapping key` errors.\n    Now points to block start instead of block end.\n    (#243, thanks to @shockey).\n\n## [3.7.0] - 2016-11-12\n\n### Added\n\n*   Support polymorphism for tags (#300, thanks to @monken).\n\n### Fixed\n\n*   Fix parsing of quotes followed by newlines (#304, thanks to @dplepage).\n\n## [3.6.1] - 2016-05-11\n\n### Fixed\n\n*   Fix output cut on a pipe, #286.\n\n## [3.6.0] - 2016-04-16\n\n### Fixed\n\n*   Dumper rewrite, fix multiple bugs with trailing `\\n`.\n    Big thanks to @aepsilon!\n*   Loader: fix leading/trailing newlines in block scalars, @aepsilon.\n\n## [3.5.5] - 2016-03-17\n\n### Fixed\n\n*   Date parse fix: don't allow dates with on digit in month and day, #268.\n\n## [3.5.4] - 2016-03-09\n\n### Added\n\n*   `noCompatMode` for dumper, to disable quoting YAML 1.1 values.\n\n## [3.5.3] - 2016-02-11\n\n### Changed\n\n*   Maintenance release.\n\n## [3.5.2] - 2016-01-11\n\n### Changed\n\n*   Maintenance: missed comma in bower config.\n\n## [3.5.1] - 2016-01-11\n\n### Changed\n\n*   Removed `inherit` dependency, #239.\n*   Better browserify workaround for esprima load.\n*   Demo rewrite.\n\n## [3.5.0] - 2016-01-10\n\n### Fixed\n\n*   Dumper. Fold strings only, #217.\n*   Dumper. `norefs` option, to clone linked objects, #229.\n*   Loader. Throw a warning for duplicate keys, #166.\n*   Improved browserify support (mark `esprima` & `Buffer` excluded).\n\n## [3.4.6] - 2015-11-26\n\n### Changed\n\n*   Use standalone `inherit` to keep browserified files clear.\n\n## [3.4.5] - 2015-11-23\n\n### Added\n\n*   Added `lineWidth` option to dumper.\n\n## [3.4.4] - 2015-11-21\n\n### Fixed\n\n*   Fixed floats dump (missed dot for scientific format), #220.\n*   Allow non-printable characters inside quoted scalars, #192.\n\n## [3.4.3] - 2015-10-10\n\n### Changed\n\n*   Maintenance release - deps bump (esprima, argparse).\n\n## [3.4.2] - 2015-09-09\n\n### Fixed\n\n*   Fixed serialization of duplicated entries in sequences, #205.\n    Thanks to @vogelsgesang.\n\n## [3.4.1] - 2015-09-05\n\n### Fixed\n\n*   Fixed stacktrace handling in generated errors, for browsers (FF/IE).\n\n## [3.4.0] - 2015-08-23\n\n### Changed\n\n*   Don't throw on warnings anymore. Use `onWarning` option to catch.\n*   Throw error on unknown tags (was warning before).\n*   Reworked internals of error class.\n\n### Fixed\n\n*   Fixed multiline keys dump, #197. Thanks to @tcr.\n*   Fixed heading line breaks in some scalars (regression).\n\n## [3.3.1] - 2015-05-13\n\n### Added\n\n*   Added `.sortKeys` dumper option, thanks to @rjmunro.\n\n### Fixed\n\n*   Fixed astral characters support, #191.\n\n## [3.3.0] - 2015-04-26\n\n### Changed\n\n*   Significantly improved long strings formatting in dumper, thanks to @isaacs.\n*   Strip BOM if exists.\n\n## [3.2.7] - 2015-02-19\n\n### Changed\n\n*   Maintenance release.\n*   Updated dependencies.\n*   HISTORY.md -> CHANGELOG.md\n\n## [3.2.6] - 2015-02-07\n\n### Fixed\n\n*   Fixed encoding of UTF-16 surrogate pairs. (e.g. \"\\U0001F431\" CAT FACE).\n*   Fixed demo dates dump (#113, thanks to @Hypercubed).\n\n## [3.2.5] - 2014-12-28\n\n### Fixed\n\n*   Fixed resolving of all built-in types on empty nodes.\n*   Fixed invalid warning on empty lines within quoted scalars and flow collections.\n*   Fixed bug: Tag on an empty node didn't resolve in some cases.\n\n## [3.2.4] - 2014-12-19\n\n### Fixed\n\n*   Fixed resolving of !!null tag on an empty node.\n\n## [3.2.3] - 2014-11-08\n\n### Fixed\n\n*   Implemented dumping of objects with circular and cross references.\n*   Partially fixed aliasing of constructed objects. (see issue #141 for details)\n\n## [3.2.2] - 2014-09-07\n\n### Fixed\n\n*   Fixed infinite loop on unindented block scalars.\n*   Rewritten base64 encode/decode in binary type, to keep code licence clear.\n\n## [3.2.1] - 2014-08-24\n\n### Fixed\n\n*   Nothig new. Just fix npm publish error.\n\n## [3.2.0] - 2014-08-24\n\n### Added\n\n*   Added input piping support to CLI.\n\n### Fixed\n\n*   Fixed typo, that could cause hand on initial indent (#139).\n\n## [3.1.0] - 2014-07-07\n\n### Changed\n\n*   1.5x-2x speed boost.\n*   Removed deprecated `require('xxx.yml')` support.\n*   Significant code cleanup and refactoring.\n*   Internal API changed. If you used custom types - see updated examples.\n    Others are not affected.\n*   Even if the input string has no trailing line break character,\n    it will be parsed as if it has one.\n*   Added benchmark scripts.\n*   Moved bower files to /dist folder\n*   Bugfixes.\n\n## [3.0.2] - 2014-02-27\n\n### Fixed\n\n*   Fixed bug: \"constructor\" string parsed as `null`.\n\n## [3.0.1] - 2013-12-22\n\n### Fixed\n\n*   Fixed parsing of literal scalars. (issue #108)\n*   Prevented adding unnecessary spaces in object dumps. (issue #68)\n*   Fixed dumping of objects with very long (> 1024 in length) keys.\n\n## [3.0.0] - 2013-12-16\n\n### Changed\n\n*   Refactored code. Changed API for custom types.\n*   Removed output colors in CLI, dump json by default.\n*   Removed big dependencies from browser version (esprima, buffer). Load `esprima` manually, if `!!js/function` needed. `!!bin` now returns Array in browser\n*   AMD support.\n*   Don't quote dumped strings because of `-` & `?` (if not first char).\n*   **Deprecated** loading yaml files via `require()`, as not recommended\n    behaviour for node.\n\n## [2.1.3] - 2013-10-16\n\n### Fixed\n\n*   Fix wrong loading of empty block scalars.\n\n## [2.1.2] - 2013-10-07\n\n### Fixed\n\n*   Fix unwanted line breaks in folded scalars.\n\n## [2.1.1] - 2013-10-02\n\n### Fixed\n\n*   Dumper now respects deprecated booleans syntax from YAML 1.0/1.1\n*   Fixed reader bug in JSON-like sequences/mappings.\n\n## [2.1.0] - 2013-06-05\n\n### Added\n\n*   Add standard YAML schemas: Failsafe (`FAILSAFE_SCHEMA`),\n    JSON (`JSON_SCHEMA`) and Core (`CORE_SCHEMA`).\n*   Add `skipInvalid` dumper option.\n\n### Changed\n\n*   Rename `DEFAULT_SCHEMA` to `DEFAULT_FULL_SCHEMA`\n    and `SAFE_SCHEMA` to `DEFAULT_SAFE_SCHEMA`.\n*   Use `safeLoad` for `require` extension.\n\n### Fixed\n\n*   Bug fix: export `NIL` constant from the public interface.\n\n## [2.0.5] - 2013-04-26\n\n### Security\n\n*   Close security issue in !!js/function constructor.\n    Big thanks to @nealpoole for security audit.\n\n## [2.0.4] - 2013-04-08\n\n### Changed\n\n*   Updated .npmignore to reduce package size\n\n## [2.0.3] - 2013-02-26\n\n### Fixed\n\n*   Fixed dumping of empty arrays ans objects. (\\[] and {} instead of null)\n\n## [2.0.2] - 2013-02-15\n\n### Fixed\n\n*   Fixed input validation: tabs are printable characters.\n\n## [2.0.1] - 2013-02-09\n\n### Fixed\n\n*   Fixed error, when options not passed to function cass\n\n## [2.0.0] - 2013-02-09\n\n### Changed\n\n*   Full rewrite. New architecture. Fast one-stage parsing.\n*   Changed custom types API.\n*   Added YAML dumper.\n\n## [1.0.3] - 2012-11-05\n\n### Fixed\n\n*   Fixed utf-8 files loading.\n\n## [1.0.2] - 2012-08-02\n\n### Fixed\n\n*   Pull out hand-written shims. Use ES5-Shims for old browsers support. See #44.\n*   Fix timstamps incorectly parsed in local time when no time part specified.\n\n## [1.0.1] - 2012-07-07\n\n### Fixed\n\n*   Fixes `TypeError: 'undefined' is not an object` under Safari. Thanks Phuong.\n*   Fix timestamps incorrectly parsed in local time. Thanks @caolan. Closes #46.\n\n## [1.0.0] - 2012-07-01\n\n### Changed\n\n*   `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n    Fixes #42.\n*   `require(filename)` now returns a single document and throws an Error if\n    file contains more than one document.\n*   CLI was merged back from js-yaml.bin\n\n## [0.3.7] - 2012-02-28\n\n### Fixed\n\n*   Fix export of `addConstructor()`. Closes #39.\n\n## [0.3.6] - 2012-02-22\n\n### Changed\n\n*   Removed AMD parts - too buggy to use. Need help to rewrite from scratch\n\n### Fixed\n\n*   Removed YUI compressor warning (renamed `double` variable). Closes #40.\n\n## [0.3.5] - 2012-01-10\n\n### Fixed\n\n*   Workagound for .npmignore fuckup under windows. Thanks to airportyh.\n\n## [0.3.4] - 2011-12-24\n\n### Fixed\n\n*   Fixes str\\[] for oldIEs support.\n*   Adds better has change support for browserified demo.\n*   improves compact output of Error. Closes #33.\n\n## [0.3.3] - 2011-12-20\n\n### Added\n\n*   adds `compact` stringification of Errors.\n\n### Changed\n\n*   jsyaml executable moved to separate module.\n\n## [0.3.2] - 2011-12-16\n\n### Added\n\n*   Added jsyaml executable.\n*   Added !!js/function support. Closes #12.\n\n### Fixed\n\n*   Fixes ug with block style scalars. Closes #26.\n*   All sources are passing JSLint now.\n*   Fixes bug in Safari. Closes #28.\n*   Fixes bug in Opers. Closes #29.\n*   Improves browser support. Closes #20.\n\n## [0.3.1] - 2011-11-18\n\n### Added\n\n*   Added AMD support for browserified version.\n*   Added permalinks for online demo YAML snippets. Now we have YPaste service, lol.\n*   Added !!js/regexp and !!js/undefined types. Partially solves #12.\n\n### Changed\n\n*   Wrapped browserified js-yaml into closure.\n\n### Fixed\n\n*   Fixed the resolvement of non-specific tags. Closes #17.\n*   Fixed !!set mapping.\n*   Fixed month parse in dates. Closes #19.\n\n## [0.3.0] - 2011-11-09\n\n### Added\n\n*   Added browserified version. Closes #13.\n*   Added live demo of browserified version.\n*   Ported some of the PyYAML tests. See #14.\n\n### Fixed\n\n*   Removed JS.Class dependency. Closes #3.\n*   Fixed timestamp bug when fraction was given.\n\n## [0.2.2] - 2011-11-06\n\n### Fixed\n\n*   Fixed crash on docs without ---. Closes #8.\n*   Fixed multiline string parse\n*   Fixed tests/comments for using array as key\n\n## [0.2.1] - 2011-11-02\n\n### Fixed\n\n*   Fixed short file read (<4k). Closes #9.\n\n## [0.2.0] - 2011-11-02\n\n### Changed\n\n*   First public release\n\n[4.1.0]: https://github.com/nodeca/js-yaml/compare/4.0.0...4.1.0\n\n[4.0.0]: https://github.com/nodeca/js-yaml/compare/3.14.0...4.0.0\n\n[3.14.0]: https://github.com/nodeca/js-yaml/compare/3.13.1...3.14.0\n\n[3.13.1]: https://github.com/nodeca/js-yaml/compare/3.13.0...3.13.1\n\n[3.13.0]: https://github.com/nodeca/js-yaml/compare/3.12.2...3.13.0\n\n[3.12.2]: https://github.com/nodeca/js-yaml/compare/3.12.1...3.12.2\n\n[3.12.1]: https://github.com/nodeca/js-yaml/compare/3.12.0...3.12.1\n\n[3.12.0]: https://github.com/nodeca/js-yaml/compare/3.11.0...3.12.0\n\n[3.11.0]: https://github.com/nodeca/js-yaml/compare/3.10.0...3.11.0\n\n[3.10.0]: https://github.com/nodeca/js-yaml/compare/3.9.1...3.10.0\n\n[3.9.1]: https://github.com/nodeca/js-yaml/compare/3.9.0...3.9.1\n\n[3.9.0]: https://github.com/nodeca/js-yaml/compare/3.8.4...3.9.0\n\n[3.8.4]: https://github.com/nodeca/js-yaml/compare/3.8.3...3.8.4\n\n[3.8.3]: https://github.com/nodeca/js-yaml/compare/3.8.2...3.8.3\n\n[3.8.2]: https://github.com/nodeca/js-yaml/compare/3.8.1...3.8.2\n\n[3.8.1]: https://github.com/nodeca/js-yaml/compare/3.8.0...3.8.1\n\n[3.8.0]: https://github.com/nodeca/js-yaml/compare/3.7.0...3.8.0\n\n[3.7.0]: https://github.com/nodeca/js-yaml/compare/3.6.1...3.7.0\n\n[3.6.1]: https://github.com/nodeca/js-yaml/compare/3.6.0...3.6.1\n\n[3.6.0]: https://github.com/nodeca/js-yaml/compare/3.5.5...3.6.0\n\n[3.5.5]: https://github.com/nodeca/js-yaml/compare/3.5.4...3.5.5\n\n[3.5.4]: https://github.com/nodeca/js-yaml/compare/3.5.3...3.5.4\n\n[3.5.3]: https://github.com/nodeca/js-yaml/compare/3.5.2...3.5.3\n\n[3.5.2]: https://github.com/nodeca/js-yaml/compare/3.5.1...3.5.2\n\n[3.5.1]: https://github.com/nodeca/js-yaml/compare/3.5.0...3.5.1\n\n[3.5.0]: https://github.com/nodeca/js-yaml/compare/3.4.6...3.5.0\n\n[3.4.6]: https://github.com/nodeca/js-yaml/compare/3.4.5...3.4.6\n\n[3.4.5]: https://github.com/nodeca/js-yaml/compare/3.4.4...3.4.5\n\n[3.4.4]: https://github.com/nodeca/js-yaml/compare/3.4.3...3.4.4\n\n[3.4.3]: https://github.com/nodeca/js-yaml/compare/3.4.2...3.4.3\n\n[3.4.2]: https://github.com/nodeca/js-yaml/compare/3.4.1...3.4.2\n\n[3.4.1]: https://github.com/nodeca/js-yaml/compare/3.4.0...3.4.1\n\n[3.4.0]: https://github.com/nodeca/js-yaml/compare/3.3.1...3.4.0\n\n[3.3.1]: https://github.com/nodeca/js-yaml/compare/3.3.0...3.3.1\n\n[3.3.0]: https://github.com/nodeca/js-yaml/compare/3.2.7...3.3.0\n\n[3.2.7]: https://github.com/nodeca/js-yaml/compare/3.2.6...3.2.7\n\n[3.2.6]: https://github.com/nodeca/js-yaml/compare/3.2.5...3.2.6\n\n[3.2.5]: https://github.com/nodeca/js-yaml/compare/3.2.4...3.2.5\n\n[3.2.4]: https://github.com/nodeca/js-yaml/compare/3.2.3...3.2.4\n\n[3.2.3]: https://github.com/nodeca/js-yaml/compare/3.2.2...3.2.3\n\n[3.2.2]: https://github.com/nodeca/js-yaml/compare/3.2.1...3.2.2\n\n[3.2.1]: https://github.com/nodeca/js-yaml/compare/3.2.0...3.2.1\n\n[3.2.0]: https://github.com/nodeca/js-yaml/compare/3.1.0...3.2.0\n\n[3.1.0]: https://github.com/nodeca/js-yaml/compare/3.0.2...3.1.0\n\n[3.0.2]: https://github.com/nodeca/js-yaml/compare/3.0.1...3.0.2\n\n[3.0.1]: https://github.com/nodeca/js-yaml/compare/3.0.0...3.0.1\n\n[3.0.0]: https://github.com/nodeca/js-yaml/compare/2.1.3...3.0.0\n\n[2.1.3]: https://github.com/nodeca/js-yaml/compare/2.1.2...2.1.3\n\n[2.1.2]: https://github.com/nodeca/js-yaml/compare/2.1.1...2.1.2\n\n[2.1.1]: https://github.com/nodeca/js-yaml/compare/2.1.0...2.1.1\n\n[2.1.0]: https://github.com/nodeca/js-yaml/compare/2.0.5...2.1.0\n\n[2.0.5]: https://github.com/nodeca/js-yaml/compare/2.0.4...2.0.5\n\n[2.0.4]: https://github.com/nodeca/js-yaml/compare/2.0.3...2.0.4\n\n[2.0.3]: https://github.com/nodeca/js-yaml/compare/2.0.2...2.0.3\n\n[2.0.2]: https://github.com/nodeca/js-yaml/compare/2.0.1...2.0.2\n\n[2.0.1]: https://github.com/nodeca/js-yaml/compare/2.0.0...2.0.1\n\n[2.0.0]: https://github.com/nodeca/js-yaml/compare/1.0.3...2.0.0\n\n[1.0.3]: https://github.com/nodeca/js-yaml/compare/1.0.2...1.0.3\n\n[1.0.2]: https://github.com/nodeca/js-yaml/compare/1.0.1...1.0.2\n\n[1.0.1]: https://github.com/nodeca/js-yaml/compare/1.0.0...1.0.1\n\n[1.0.0]: https://github.com/nodeca/js-yaml/compare/0.3.7...1.0.0\n\n[0.3.7]: https://github.com/nodeca/js-yaml/compare/0.3.6...0.3.7\n\n[0.3.6]: https://github.com/nodeca/js-yaml/compare/0.3.5...0.3.6\n\n[0.3.5]: https://github.com/nodeca/js-yaml/compare/0.3.4...0.3.5\n\n[0.3.4]: https://github.com/nodeca/js-yaml/compare/0.3.3...0.3.4\n\n[0.3.3]: https://github.com/nodeca/js-yaml/compare/0.3.2...0.3.3\n\n[0.3.2]: https://github.com/nodeca/js-yaml/compare/0.3.1...0.3.2\n\n[0.3.1]: https://github.com/nodeca/js-yaml/compare/0.3.0...0.3.1\n\n[0.3.0]: https://github.com/nodeca/js-yaml/compare/0.2.2...0.3.0\n\n[0.2.2]: https://github.com/nodeca/js-yaml/compare/0.2.1...0.2.2\n\n[0.2.1]: https://github.com/nodeca/js-yaml/compare/0.2.0...0.2.1\n\n[0.2.0]: https://github.com/nodeca/js-yaml/releases/tag/0.2.0\n"},{"text":"# JS-YAML - YAML 1.2 parser / writer for JavaScript\n\n[![CI](https://github.com/nodeca/js-yaml/workflows/CI/badge.svg?branch=master)](https://github.com/nodeca/js-yaml/actions)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n**[Online Demo](http://nodeca.github.com/js-yaml/)**\n\nThis is an implementation of [YAML](http://yaml.org/), a human-friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n## Installation\n\n### YAML module for node.js\n\n    npm install js-yaml\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n    npm install -g js-yaml\n\n#### Usage\n\n    usage: js-yaml [-h] [-v] [-c] [-t] file\n\n    Positional arguments:\n      file           File with YAML document(s)\n\n    Optional arguments:\n      -h, --help     Show this help message and exit.\n      -v, --version  Show program's version number and exit.\n      -c, --compact  Display errors in compact mode\n      -t, --trace    Show stack trace on error\n\n## API\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [examples](https://github.com/nodeca/js-yaml/tree/master/examples)\nfor more info.\n\n```javascript\nconst yaml = require('js-yaml');\nconst fs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n### load (string \\[ , options ])\n\nParses `string` as single YAML document. Returns either a\nplain object, a string, a number, `null` or `undefined`, or throws `YAMLException` on error. By default, does\nnot support regexps, functions and undefined.\n\noptions:\n\n*   `filename` *(default: null)* - string to be used as a file path in\n    error/warning messages.\n*   `onWarning` *(default: null)* - function to call on warning messages.\n    Loader will call this function with an instance of `YAMLException` for each warning.\n*   `schema` *(default: `DEFAULT_SCHEMA`)* - specifies a schema to use.\n    *   `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n        http://www.yaml.org/spec/1.2/spec.html#id2802346\n    *   `JSON_SCHEMA` - all JSON-supported types:\n        http://www.yaml.org/spec/1.2/spec.html#id2803231\n    *   `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n        http://www.yaml.org/spec/1.2/spec.html#id2804923\n    *   `DEFAULT_SCHEMA` - all supported YAML types.\n*   `json` *(default: false)* - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, the JSON schema is not as strictly defined in the YAML specification.\nIt allows numbers in any notation, use `Null` and `NULL` as `null`, etc.\nThe core schema also has no such restrictions. It allows binary notation for integers.\n\n### loadAll (string \\[, iterator] \\[, options ])\n\nSame as `load()`, but understands multi-document sources. Applies\n`iterator` to each document if specified, or returns array of documents.\n\n```javascript\nconst yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n### dump (object \\[ , options ])\n\nSerializes `object` as a YAML document. Uses `DEFAULT_SCHEMA`, so it will\nthrow an exception if you try to dump regexps or functions. However, you can\ndisable exceptions by setting the `skipInvalid` option to `true`.\n\noptions:\n\n*   `indent` *(default: 2)* - indentation width to use (in spaces).\n*   `noArrayIndent` *(default: false)* - when true, will not add an indentation level to array elements\n*   `skipInvalid` *(default: false)* - do not throw on invalid types (like function\n    in the safe schema) and skip pairs and single values with such types.\n*   `flowLevel` *(default: -1)* - specifies level of nesting, when to switch from\n    block to flow style for collections. -1 means block style everwhere\n*   `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n*   `schema` *(default: `DEFAULT_SCHEMA`)* specifies a schema to use.\n*   `sortKeys` *(default: `false`)* - if `true`, sort keys when dumping YAML. If a\n    function, use the function to sort the keys.\n*   `lineWidth` *(default: `80`)* - set max line width. Set `-1` for unlimited width.\n*   `noRefs` *(default: `false`)* - if `true`, don't convert duplicate objects into references\n*   `noCompatMode` *(default: `false`)* - if `true` don't try to be compatible with older\n    yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1\n*   `condenseFlow` *(default: `false`)* - if `true` flow sequences will be condensed, omitting the space between `a, b`. Eg. `'[a,b]'`, and omitting the space between `key: value` and quoting the key. Eg. `'{\"a\":b}'` Can be useful when using yaml for pretty URL query params as spaces are %-encoded.\n*   `quotingType` *(`'` or `\"`, default: `'`)* - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters.\n*   `forceQuotes` *(default: `false`)* - if `true`, all non-key strings will be quoted even if they normally don't need to.\n*   `replacer` - callback `function (key, value)` called recursively on each key/value in source object (see `replacer` docs for `JSON.stringify`).\n\nThe following table show availlable styles (e.g. \"canonical\",\n\"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\noutput is shown on the right side after `=>` (default setting) or `->`:\n\n```none\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"0o1\", \"0o52\", \"0o16172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\nExample:\n\n```javascript\ndump(object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n## Supported YAML types\n\nThe list of standard YAML tags and corresponding JavaScript types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n    !!null ''                   # null\n    !!bool 'yes'                # bool\n    !!int '3...'                # number\n    !!float '3.14...'           # number\n    !!binary '...base64...'     # buffer\n    !!timestamp 'YYYY-...'      # date\n    !!omap [ ... ]              # array of key-value pairs\n    !!pairs [ ... ]             # array or array pairs\n    !!set { ... }               # array of objects with given keys and null values\n    !!str '...'                 # string\n    !!seq [ ... ]               # array\n    !!map { ... }               # object\n\n**JavaScript-specific tags**\n\nSee [js-yaml-js-types](https://github.com/nodeca/js-yaml-js-types) for\nextra types.\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS does not allow objects\nor arrays as keys, and stringifies (by calling `toString()` method) them at the\nmoment of adding them.\n\n```yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n```javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n```yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## js-yaml for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-js-yaml?utm_source=npm-js-yaml\\&utm_medium=referral\\&utm_campaign=enterprise\\&utm_term=repo)\n"},{"text":"<div align=\"center\">\n  <img src=\"shots/logo.png\" alt=\"kleur\" height=\"120\" />\n</div>\n\n<div align=\"center\">\n  <a href=\"https://npmjs.org/package/kleur\">\n    <img src=\"https://badgen.now.sh/npm/v/kleur\" alt=\"version\" />\n  </a>\n  <a href=\"https://github.com/lukeed/kleur/actions?query=workflow%3ACI\">\n    <img src=\"https://github.com/lukeed/kleur/workflows/CI/badge.svg?event=push\" alt=\"CI\" />\n  </a>\n  <a href=\"https://npmjs.org/package/kleur\">\n    <img src=\"https://badgen.now.sh/npm/dm/kleur\" alt=\"downloads\" />\n  </a>\n  <a href=\"https://packagephobia.now.sh/result?p=kleur\">\n    <img src=\"https://packagephobia.now.sh/badge?p=kleur\" alt=\"install size\" />\n  </a>\n</div>\n\n<div align=\"center\">The fastest Node.js library for formatting terminal text with ANSI colors~!</div>\n\n## Features\n\n*   No dependencies\n*   Super [lightweight](#load-time) & [performant](#performance)\n*   Supports [nested](#nested-methods) & [chained](#chained-methods) colors\n*   No `String.prototype` modifications\n*   Conditional [color support](#conditional-support)\n*   [Fully treeshakable](#individual-colors)\n*   Familiar [API](#api)\n\n***\n\nAs of `v3.0` the Chalk-style syntax (magical getter) is no longer used.<br>Please visit [History](#history) for migration paths supporting that syntax.\n\n***\n\n## Install\n\n    $ npm install --save kleur\n\n## Usage\n\n```js\nimport kleur from 'kleur';\n\n// basic usage\nkleur.red('red text');\n\n// chained methods\nkleur.blue().bold().underline('howdy partner');\n\n// nested methods\nkleur.bold(`${ white().bgRed('[ERROR]') } ${ kleur.red().italic('Something happened')}`);\n```\n\n### Chained Methods\n\n```js\nconst { bold, green } = require('kleur');\n\nconsole.log(bold().red('this is a bold red message'));\nconsole.log(bold().italic('this is a bold italicized message'));\nconsole.log(bold().yellow().bgRed().italic('this is a bold yellow italicized message'));\nconsole.log(green().bold().underline('this is a bold green underlined message'));\n```\n\n<img src=\"shots/1.png\" width=\"300\" />\n\n### Nested Methods\n\n```js\nconst { yellow, red, cyan } = require('kleur');\n\nconsole.log(yellow(`foo ${red().bold('red')} bar ${cyan('cyan')} baz`));\nconsole.log(yellow('foo ' + red().bold('red') + ' bar ' + cyan('cyan') + ' baz'));\n```\n\n<img src=\"shots/2.png\" width=\"300\" />\n\n### Conditional Support\n\nToggle color support as needed; `kleur` includes simple auto-detection which may not cover all cases.\n\n> **Note:** Both `kleur` and `kleur/colors` share the same detection logic.\n\n```js\nimport kleur from 'kleur';\n\n// manually disable\nkleur.enabled = false;\n\n// or use another library to detect support\nkleur.enabled = require('color-support').level > 0;\n\nconsole.log(kleur.red('I will only be colored red if the terminal supports colors'));\n```\n\n> **Important:** <br>Colors will be disabled automatically in non [TTY contexts](https://nodejs.org/api/process.html#process_a_note_on_process_i_o). For example, spawning another process or piping output into another process will disable colorization automatically. To force colors in your piped output, you may do so with the `FORCE_COLOR=1` environment variable:\n\n```sh\n$ node app.js #=> COLORS\n$ node app.js > log.txt  #=> NO COLORS\n$ FORCE_COLOR=1 node app.js > log.txt #=> COLORS\n$ FORCE_COLOR=0 node app.js > log.txt #=> NO COLORS\n```\n\n## API\n\nAny `kleur` method returns a `String` when invoked with input; otherwise chaining is expected.\n\n> It's up to the developer to pass the output to destinations like `console.log`, `process.stdout.write`, etc.\n\nThe methods below are grouped by type for legibility purposes only. They each can be [chained](#chained-methods) or [nested](#nested-methods) with one another.\n\n***Colors:***\n\n> black — red — green — yellow — blue — magenta — cyan — white — gray — grey\n\n***Backgrounds:***\n\n> bgBlack — bgRed — bgGreen — bgYellow — bgBlue — bgMagenta — bgCyan — bgWhite\n\n***Modifiers:***\n\n> reset — bold — dim — italic\\* — underline — inverse — hidden — strikethrough\\*\n\n<sup>\\* <em>Not widely supported</em></sup>\n\n## Individual Colors\n\nWhen you only need a few colors, it doesn't make sense to import *all* of `kleur` because, as small as it is, `kleur` is not treeshakeable, and so most of its code will be doing nothing. In order to fix this, you can import from the `kleur/colors` submodule which *fully* supports tree-shaking.\n\nThe caveat with this approach is that color functions **are not** chainable~!<br>Each function receives and colorizes its input. You may combine colors, backgrounds, and modifiers by nesting function calls within other functions.\n\n```js\n// or: import * as kleur from 'kleur/colors';\nimport { red, underline, bgWhite } from 'kleur/colors';\n\nred('red text');\n//~> kleur.red('red text');\n\nunderline(red('red underlined text'));\n//~> kleur.underline().red('red underlined text');\n\nbgWhite(underline(red('red underlined text w/ white background')));\n//~> kleur.bgWhite().underline().red('red underlined text w/ white background');\n```\n\n> **Note:** All the same [colors, backgrounds, and modifiers](#api) are available.\n\n***Conditional Support***\n\nThe `kleur/colors` submodule also allows you to toggle color support, as needed.<br>\nIt includes the same initial assumptions as `kleur`, in an attempt to have colors enabled by default.\n\nUnlike `kleur`, this setting exists as `kleur.$.enabled` instead of `kleur.enabled`:\n\n```js\nimport * as kleur from 'kleur/colors';\n// or: import { $, red } from 'kleur/colors';\n\n// manually disabled\nkleur.$.enabled = false;\n\n// or use another library to detect support\nkleur.$.enabled = require('color-support').level > 0;\n\nconsole.log(red('I will only be colored red if the terminal supports colors'));\n```\n\n## Benchmarks\n\n> Using Node v10.13.0\n\n### Load time\n\n    chalk        :: 5.303ms\n    kleur        :: 0.488ms\n    kleur/colors :: 0.369ms\n    ansi-colors  :: 1.504ms\n\n### Performance\n\n    # All Colors\n      ansi-colors      x 177,625 ops/sec ±1.47% (92 runs sampled)\n      chalk            x 611,907 ops/sec ±0.20% (92 runs sampled)\n      kleur            x 742,509 ops/sec ±1.47% (93 runs sampled)\n      kleur/colors     x 881,742 ops/sec ±0.19% (98 runs sampled)\n\n    # Stacked colors\n      ansi-colors      x  23,331 ops/sec ±1.81% (94 runs sampled)\n      chalk            x 337,178 ops/sec ±0.20% (98 runs sampled)\n      kleur            x  78,299 ops/sec ±1.01% (97 runs sampled)\n      kleur/colors     x 104,431 ops/sec ±0.22% (97 runs sampled)\n\n    # Nested colors\n      ansi-colors      x  67,181 ops/sec ±1.15% (92 runs sampled)\n      chalk            x 116,361 ops/sec ±0.63% (94 runs sampled)\n      kleur            x 139,514 ops/sec ±0.76% (95 runs sampled)\n      kleur/colors     x 145,716 ops/sec ±0.97% (97 runs sampled)\n\n## History\n\nThis project originally forked [`ansi-colors`](https://github.com/doowb/ansi-colors).\n\nBeginning with `kleur@3.0`, the Chalk-style syntax (magical getter) has been replaced with function calls per key:\n\n```js\n// Old:\nc.red.bold.underline('old');\n\n// New:\nc.red().bold().underline('new');\n```\n\n> <sup><em>As I work more with Rust, the newer syntax feels so much better & more natural!</em></sup>\n\nIf you prefer the old syntax, you may migrate to `ansi-colors` or newer `chalk` releases.<br>Versions below `kleur@3.0` have been officially deprecated.\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n"},{"text":"# longest-streak\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nGet the count of the longest repeating streak of `character` in `value`.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`longestStreak(value, character)`](#longeststreakvalue-character)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install longest-streak\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {longestStreak} from 'https://cdn.skypack.dev/longest-streak@3?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {longestStreak} from 'https://cdn.skypack.dev/longest-streak@3?min'\n</script>\n```\n\n## Use\n\n```js\nimport {longestStreak} from 'longest-streak'\n\nlongestStreak('` foo `` bar `', '`') // => 2\n```\n\n## API\n\nThis package exports the following identifiers: `longestStreak`.\nThere is no default export.\n\n### `longestStreak(value, character)`\n\nGet the count of the longest repeating streak of `character` in `value`.\n\n###### Parameters\n\n*   `value` (`string`) — content to search in\n*   `character` (`string`) — single character to look for\n\n###### Returns\n\n`number` — count of most frequent adjacent `character`s in `value`.\n\n###### Throws\n\n*   `Error` — when `character` is not a single character string\n\n## Types\n\nThis package is fully typed with [TypeScript][].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Related\n\n*   [`wooorm/ccount`](https://github.com/wooorm/ccount)\n    — count characters\n*   [`wooorm/direction`](https://github.com/wooorm/direction)\n    — detect directionality: left-to-right, right-to-left, or neutral\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/longest-streak/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/longest-streak/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/longest-streak.svg\n\n[coverage]: https://codecov.io/github/wooorm/longest-streak\n\n[downloads-badge]: https://img.shields.io/npm/dm/longest-streak.svg\n\n[downloads]: https://www.npmjs.com/package/longest-streak\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/longest-streak.svg\n\n[size]: https://bundlephobia.com/result?p=longest-streak\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n"},{"text":"# markdown-table\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nGenerate a markdown ([GFM][]) table.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`markdownTable(table[, options])`](#markdowntabletable-options)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Inspiration](#inspiration)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis is a simple package that takes table data and generates a [GitHub flavored\nmarkdown (GFM)][gfm] table.\n\n## When should I use this?\n\nYou can use this package when you want to generate the source code of a GFM\ntable from some data.\n\nThis is a simple solution in that it doesn’t handle escapes or HTML or any of\nthat.\nFor a complete but heavier solution, build an AST and serialize it with\n[`mdast-util-to-markdown`][mdast-util-to-markdown] (with\n[`mdast-util-gfm`][mdast-util-gfm]).\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install markdown-table\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {markdownTable} from 'https://cdn.skypack.dev/markdown-table@3?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {markdownTable} from 'https://cdn.skypack.dev/markdown-table@3?min'\n</script>\n```\n\n## Use\n\nTypical usage (defaults to align left):\n\n```js\nimport {markdownTable} from 'markdown-table'\n\nmarkdownTable([\n  ['Branch', 'Commit'],\n  ['main', '0123456789abcdef'],\n  ['staging', 'fedcba9876543210']\n])\n```\n\nYields:\n\n```markdown\n| Branch  | Commit           |\n| ------- | ---------------- |\n| main    | 0123456789abcdef |\n| staging | fedcba9876543210 |\n```\n\nWith align:\n\n```js\nmarkdownTable(\n  [\n    ['Beep', 'No.', 'Boop'],\n    ['beep', '1024', 'xyz'],\n    ['boop', '3388450', 'tuv'],\n    ['foo', '10106', 'qrstuv'],\n    ['bar', '45', 'lmno']\n  ],\n  {align: ['l', 'c', 'r']}\n)\n```\n\nYields:\n\n```markdown\n| Beep |   No.   |   Boop |\n| :--- | :-----: | -----: |\n| beep |   1024  |    xyz |\n| boop | 3388450 |    tuv |\n| foo  |  10106  | qrstuv |\n| bar  |    45   |   lmno |\n```\n\n## API\n\nThis package exports the following identifiers: `markdownTable`.\nThere is no default export.\n\n### `markdownTable(table[, options])`\n\nGenerate a markdown table from table data (matrix of strings).\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.align`\n\nOne style for all columns, or styles for their respective columns (`string` or\n`Array<string>`).\nEach style is either `'l'` (left), `'r'` (right), or `'c'` (center).\nOther values are treated as `''`, which doesn’t place the colon in the alignment\nrow but does align left.\n*Only the lowercased first character is used, so `Right` is fine.*\n\n###### `options.padding`\n\nWhether to add a space of padding between delimiters and cells (`boolean`,\ndefault: `true`).\n\nWhen `true`, there is padding:\n\n```markdown\n| Alpha | B     |\n| ----- | ----- |\n| C     | Delta |\n```\n\nWhen `false`, there is no padding:\n\n```markdown\n|Alpha|B    |\n|-----|-----|\n|C    |Delta|\n```\n\n###### `options.delimiterStart`\n\nWhether to begin each row with the delimiter (`boolean`, default: `true`).\n\n> 👉 **Note**: please don’t use this: it could create fragile structures that\n> aren’t understandable to some markdown parsers.\n\nWhen `true`, there are starting delimiters:\n\n```markdown\n| Alpha | B     |\n| ----- | ----- |\n| C     | Delta |\n```\n\nWhen `false`, there are no starting delimiters:\n\n```markdown\nAlpha | B     |\n----- | ----- |\nC     | Delta |\n```\n\n###### `options.delimiterEnd`\n\nWhether to end each row with the delimiter (`boolean`, default: `true`).\n\n> 👉 **Note**: please don’t use this: it could create fragile structures that\n> aren’t understandable to some markdown parsers.\n\nWhen `true`, there are ending delimiters:\n\n```markdown\n| Alpha | B     |\n| ----- | ----- |\n| C     | Delta |\n```\n\nWhen `false`, there are no ending delimiters:\n\n```markdown\n| Alpha | B\n| ----- | -----\n| C     | Delta\n```\n\n###### `options.alignDelimiters`\n\nWhether to align the delimiters (`boolean`, default: `true`).\nBy default, they are aligned:\n\n```markdown\n| Alpha | B     |\n| ----- | ----- |\n| C     | Delta |\n```\n\nPass `false` to make them staggered:\n\n```markdown\n| Alpha | B |\n| - | - |\n| C | Delta |\n```\n\n###### `options.stringLength`\n\nFunction to detect the length of table cell content (`Function`, default:\n`s => s.length`).\nThis is used when aligning the delimiters (`|`) between table cells.\nFull-width characters and emoji mess up delimiter alignment when viewing the\nmarkdown source.\nTo fix this, you can pass this function, which receives the cell content and\nreturns its “visible” size.\nNote that what is and isn’t visible depends on where the text is displayed.\n\nWithout such a function, the following:\n\n```js\nmarkdownTable([\n  ['Alpha', 'Bravo'],\n  ['中文', 'Charlie'],\n  ['👩‍❤️‍👩', 'Delta']\n])\n```\n\nYields:\n\n```markdown\n| Alpha | Bravo |\n| - | - |\n| 中文 | Charlie |\n| 👩‍❤️‍👩 | Delta |\n```\n\nWith [`string-width`][string-width]:\n\n```js\nimport stringWidth from 'string-width'\n\nmarkdownTable(\n  [\n    ['Alpha', 'Bravo'],\n    ['中文', 'Charlie'],\n    ['👩‍❤️‍👩', 'Delta']\n  ],\n  {stringLength: stringWidth}\n)\n```\n\nYields:\n\n```markdown\n| Alpha | Bravo   |\n| ----- | ------- |\n| 中文  | Charlie |\n| 👩‍❤️‍👩    | Delta   |\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports additional `Options` type that models its respective interface.\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Inspiration\n\nThe original idea and basic implementation was inspired by James Halliday’s\n[`text-table`][text-table] library.\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/markdown-table/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/markdown-table/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/markdown-table.svg\n\n[coverage]: https://codecov.io/github/wooorm/markdown-table\n\n[downloads-badge]: https://img.shields.io/npm/dm/markdown-table.svg\n\n[downloads]: https://www.npmjs.com/package/markdown-table\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/markdown-table.svg\n\n[size]: https://bundlephobia.com/result?p=markdown-table\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[gfm]: https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables\n\n[text-table]: https://github.com/substack/text-table\n\n[string-width]: https://github.com/sindresorhus/string-width\n\n[mdast-util-to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[mdast-util-gfm]: https://github.com/syntax-tree/mdast-util-gfm\n"},{"text":"# mdast-util-from-markdown\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[mdast][]** utility to parse markdown.\n\n## When to use this\n\nUse this if you want to use **[micromark][]** but need an AST.\nUse **[remark][]** instead, which includes both to provide a nice interface and\nhundreds of plugins.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install mdast-util-from-markdown\n```\n\n## Use\n\nSay we have the following markdown file, `example.md`:\n\n```markdown\n## Hello, *World*!\n```\n\nAnd our script, `example.js`, looks as follows:\n\n```js\nimport fs from 'node:fs'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\nconst doc = fs.readFileSync('example.md')\n\nconst tree = fromMarkdown(doc)\n\nconsole.log(tree)\n```\n\nNow, running `node example` yields (positional info removed for brevity):\n\n```js\n{\n  type: 'root',\n  children: [\n    {\n      type: 'heading',\n      depth: 2,\n      children: [\n        {type: 'text', value: 'Hello, '},\n        {\n          type: 'emphasis',\n          children: [{type: 'text', value: 'World'}]\n        },\n        {type: 'text', value: '!'}\n      ]\n    }\n  ]\n}\n```\n\n## API\n\nThis package exports the following identifier: `fromMarkdown`.\nThere is no default export.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\n\n### `fromMarkdown(doc[, encoding][, options])`\n\nParse markdown to a **[mdast][]** tree.\n\n##### Parameters\n\n###### `doc`\n\nValue to parse (`string` or [`Buffer`][buffer]).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `doc` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.extensions`\n\nArray of syntax extensions (`Array<MicromarkSyntaxExtension>`, default: `[]`).\nPassed to [`micromark` as `extensions`][micromark-extensions].\n\n###### `options.mdastExtensions`\n\nArray of mdast extensions (`Array<MdastExtension>`, default: `[]`).\n\n##### Returns\n\n[`Root`][root].\n\n## List of extensions\n\n*   [`syntax-tree/mdast-util-directive`](https://github.com/syntax-tree/mdast-util-directive)\n    — parse directives\n*   [`syntax-tree/mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-frontmatter)\n    — parse frontmatter (YAML, TOML, more)\n*   [`syntax-tree/mdast-util-gfm`](https://github.com/syntax-tree/mdast-util-gfm)\n    — parse GFM\n*   [`syntax-tree/mdast-util-gfm-autolink-literal`](https://github.com/syntax-tree/mdast-util-gfm-autolink-literal)\n    — parse GFM autolink literals\n*   [`syntax-tree/mdast-util-gfm-footnote`](https://github.com/syntax-tree/mdast-util-gfm-footnote)\n    — parse GFM footnotes\n*   [`syntax-tree/mdast-util-gfm-strikethrough`](https://github.com/syntax-tree/mdast-util-gfm-strikethrough)\n    — parse GFM strikethrough\n*   [`syntax-tree/mdast-util-gfm-table`](https://github.com/syntax-tree/mdast-util-gfm-table)\n    — parse GFM tables\n*   [`syntax-tree/mdast-util-gfm-task-list-item`](https://github.com/syntax-tree/mdast-util-gfm-task-list-item)\n    — parse GFM task list items\n*   [`syntax-tree/mdast-util-math`](https://github.com/syntax-tree/mdast-util-math)\n    — parse math\n*   [`syntax-tree/mdast-util-mdx`](https://github.com/syntax-tree/mdast-util-mdx)\n    — parse MDX or MDX.js\n*   [`syntax-tree/mdast-util-mdx-expression`](https://github.com/syntax-tree/mdast-util-mdx-expression)\n    — parse MDX or MDX.js expressions\n*   [`syntax-tree/mdast-util-mdx-jsx`](https://github.com/syntax-tree/mdast-util-mdx-jsx)\n    — parse MDX or MDX.js JSX\n*   [`syntax-tree/mdast-util-mdxjs-esm`](https://github.com/syntax-tree/mdast-util-mdxjs-esm)\n    — parse MDX.js ESM\n\n## Security\n\nAs markdown is sometimes used for HTML, and improper use of HTML can open you up\nto a [cross-site scripting (XSS)][xss] attack, use of `mdast-util-from-markdown`\ncan also be unsafe.\nWhen going to HTML, use this utility in combination with\n[`hast-util-sanitize`][sanitize] to make the tree safe.\n\n## Related\n\n*   [`micromark/micromark`](https://github.com/micromark/micromark)\n    — the smallest commonmark-compliant markdown parser that exists\n*   [`remarkjs/remark`](https://github.com/remarkjs/remark)\n    — markdown processor powered by plugins\n*   [`syntax-tree/mdast-util-to-markdown`](https://github.com/syntax-tree/mdast-util-to-markdown)\n    — serialize mdast to markdown\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-from-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-from-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-from-markdown.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-from-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-from-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-from-markdown\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-from-markdown.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-from-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[root]: https://github.com/syntax-tree/mdast#root\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[micromark]: https://github.com/micromark/micromark\n\n[micromark-extensions]: https://github.com/micromark/micromark#optionsextensions\n\n[remark]: https://github.com/remarkjs/remark\n"},{"text":"# mdast-util-frontmatter\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nExtension for [`mdast-util-from-markdown`][from-markdown] and/or\n[`mdast-util-to-markdown`][to-markdown] to support frontmatter in **[mdast][]**.\nWhen parsing (`from-markdown`), must be combined with\n[`micromark-extension-frontmatter`][extension].\n\n## When to use this\n\nUse this if you’re dealing with the AST manually.\nIt’s probably nicer to use [`remark-frontmatter`][remark-frontmatter] with\n**[remark][]**, which includes this but provides a nicer interface and\nmakes it easier to combine with hundreds of plugins.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install mdast-util-frontmatter\n```\n\n## Use\n\nSay we have the following file, `example.md`:\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\nAnd our module, `example.js`, looks as follows:\n\n```js\nimport fs from 'node:fs'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toMarkdown} from 'mdast-util-to-markdown'\nimport {frontmatter} from 'micromark-extension-frontmatter'\nimport {frontmatterFromMarkdown, frontmatterToMarkdown} from 'mdast-util-frontmatter'\n\nconst doc = fs.readFileSync('example.md')\n\nconst tree = fromMarkdown(doc, {\n  extensions: [frontmatter(['yaml', 'toml'])],\n  mdastExtensions: [frontmatterFromMarkdown(['yaml', 'toml'])]\n})\n\nconsole.log(tree)\n\nconst out = toMarkdown(tree, {extensions: [frontmatterToMarkdown(['yaml', 'toml'])]})\n\nconsole.log(out)\n```\n\nNow, running `node example` yields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'toml', value: 'title = \"New Website\"'},\n    {\n      type: 'heading',\n      depth: 1,\n      children: [{type: 'text', value: 'Other markdown'}]\n    }\n  ]\n}\n```\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\n## API\n\nThis package exports the following identifiers: `frontmatterFromMarkdown`,\n`frontmatterToMarkdown`.\nThere is no default export.\n\n### `frontmatterFromMarkdown([options])`\n\n### `frontmatterToMarkdown([options])`\n\nSupport frontmatter (YAML, TOML, and more).\nThese functions can be called with options and return extensions, respectively\nfor [`mdast-util-from-markdown`][from-markdown] and\n[`mdast-util-to-markdown`][to-markdown].\n\nOptions are the same as [`micromark-extension-frontmatter`][options].\n\n## Related\n\n*   [`remarkjs/remark`][remark]\n    — markdown processor powered by plugins\n*   [`remarkjs/remark-frontmatter`][remark-frontmatter]\n    — remark plugin to support frontmatter\n*   [`micromark/micromark`][micromark]\n    — the smallest commonmark-compliant markdown parser that exists\n*   [`micromark/micromark-extension-frontmatter`][extension]\n    — micromark extension to parse frontmatter\n*   [`syntax-tree/mdast-util-from-markdown`][from-markdown]\n    — mdast parser using `micromark` to create mdast from markdown\n*   [`syntax-tree/mdast-util-to-markdown`][to-markdown]\n    — mdast serializer to create markdown from mdast\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-frontmatter/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-frontmatter/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-frontmatter.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-frontmatter\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-frontmatter.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-frontmatter\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-frontmatter.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-frontmatter\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[remark]: https://github.com/remarkjs/remark\n\n[remark-frontmatter]: https://github.com/remarkjs/remark-frontmatter\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[micromark]: https://github.com/micromark/micromark\n\n[extension]: https://github.com/micromark/micromark-extension-frontmatter\n\n[options]: https://github.com/micromark/micromark-extension-frontmatter#options\n"},{"text":"# mdast-util-to-markdown\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[mdast][]** utility that turns a syntax tree into markdown.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`toMarkdown(tree[, options])`](#tomarkdowntree-options)\n*   [List of extensions](#list-of-extensions)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility that takes an [mdast][] syntax tree as input and turns\nit into serialized markdown.\n\nThis utility is a low level project.\nIt’s used in [`remark-stringify`][remark-stringify], which focusses on making it\neasier to transform content by abstracting these internals away.\n\n## When should I use this?\n\nIf you want to handle syntax trees manually, use this.\nFor an easier time processing content, use the **[remark][]** ecosystem instead.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install mdast-util-to-markdown\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {toMarkdown} from 'https://cdn.skypack.dev/mdast-util-to-markdown@1?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {toMarkdown} from 'https://cdn.skypack.dev/mdast-util-to-markdown@1?min'\n</script>\n```\n\n## Use\n\nSay our module `example.js` looks as follows:\n\n```js\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/** @type {import('mdast').Root} */\nconst tree = {\n  type: 'root',\n  children: [\n    {\n      type: 'blockquote',\n      children: [\n        {type: 'thematicBreak'},\n        {\n          type: 'paragraph',\n          children: [\n            {type: 'text', value: '- a\\nb !'},\n            {\n              type: 'link',\n              url: 'example.com',\n              children: [{type: 'text', value: 'd'}]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\nconsole.log(toMarkdown(tree))\n```\n\n…now running `node example.js` yields:\n\n```markdown\n> ***\n>\n> \\- a\n> b \\![d](example.com)\n```\n\n> 👉 **Note**: observe the properly escaped characters which would otherwise\n> turn into a list and image respectively.\n\n## API\n\nThis package exports the following identifier: `toMarkdown`.\nThere is no default export.\n\n### `toMarkdown(tree[, options])`\n\nTurn an **[mdast][]** syntax tree into markdown.\n\n##### Formatting options\n\n###### `options.bullet`\n\nMarker to use for bullets of items in unordered lists (`'*'`, `'+'`, or `'-'`,\ndefault: `'*'`).\n\n###### `options.bulletOther`\n\nMarker to use in certain cases where the primary bullet doesn’t work (`'*'`,\n`'+'`, or `'-'`, default: depends).\n\nThere are three cases where the primary bullet can’t be used:\n\n*   When three list items are on their own, the last one is empty, and `bullet`\n    is also a valid `rule`: `* - +`.\n    This would turn into a thematic break if serialized with three primary\n    bullets.\n    As this is an edge case unlikely to appear in normal markdown, the last list\n    item will be given a different bullet.\n*   When a thematic break is the first child of one of the list items, and\n    `bullet` is the same character as `rule`: `- ***`.\n    This would turn into a single thematic break if serialized with primary\n    bullets.\n    As this is an edge case unlikely to appear in normal markdown this markup is\n    always fixed, even if `bulletOther` is not passed\n*   When two unordered lists appear next to each other: `* a\\n- b`.\n    CommonMark sees different bullets as different lists, but several markdown\n    parsers parse it as one list.\n    To solve for both, we instead inject an empty comment between the two lists:\n    `* a\\n<!---->\\n* b`, but if `bulletOther` is given explicitly, it will be\n    used instead\n\n###### `options.bulletOrdered`\n\nMarker to use for bullets of items in ordered lists (`'.'` or `')'`, default:\n`'.'`).\n\n###### `options.bulletOrderedOther`\n\nMarker to use in certain cases where the primary bullet for ordered items\ndoesn’t work (`'.'` or `')'`, default: none).\n\nThere is one case where the primary bullet for ordered items can’t be used:\n\n*   When two ordered lists appear next to each other: `1. a\\n2) b`.\n    CommonMark added support for `)` as a marker, but other markdown parsers\n    do not support it.\n    To solve for both, we instead inject an empty comment between the two lists:\n    `1. a\\n<!---->\\n1. b`, but if `bulletOrderedOther` is given explicitly, it\n    will be used instead\n\n###### `options.closeAtx`\n\nWhether to add the same number of number signs (`#`) at the end of an ATX\nheading as the opening sequence (`boolean`, default: `false`).\n\n###### `options.emphasis`\n\nMarker to use for emphasis (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.fence`\n\nMarker to use for fenced code (``'`'`` or `'~'`, default: ``'`'``).\n\n###### `options.fences`\n\nWhether to use fenced code always (`boolean`, default: `false`).\nThe default is to use fenced code if there is a language defined, if the code is\nempty, or if it starts or ends in blank lines.\n\n###### `options.incrementListMarker`\n\nWhether to increment the counter of ordered lists items (`boolean`, default:\n`true`).\n\n###### `options.listItemIndent`\n\nHow to indent the content of list items (`'one'`, `'tab'`, or `'mixed'`,\ndefault: `'tab'`).\nEither with the size of the bullet plus one space (when `'one'`), a tab stop\n(`'tab'`), or depending on the item and its parent list (`'mixed'`, uses `'one'`\nif the item and list are tight and `'tab'` otherwise).\n\n###### `options.quote`\n\nMarker to use for titles (`'\"'` or `\"'\"`, default: `'\"'`).\n\n###### `options.resourceLink`\n\nWhether to always use resource links (`boolean`, default: `false`).\nThe default is to use autolinks (`<https://example.com>`) when possible\nand resource links (`[text](url)`) otherwise.\n\n###### `options.rule`\n\nMarker to use for thematic breaks (`'*'`, `'-'`, or `'_'`, default: `'*'`).\n\n###### `options.ruleRepetition`\n\nNumber of markers to use for thematic breaks (`number`, default: `3`, min: `3`).\n\n###### `options.ruleSpaces`\n\nWhether to add spaces between markers in thematic breaks (`boolean`, default:\n`false`).\n\n###### `options.setext`\n\nWhether to use setext headings when possible (`boolean`, default: `false`).\nThe default is to always use ATX headings (`# heading`) instead of setext\nheadings (`heading\\n=======`).\nSetext headings can’t be used for empty headings or headings with a rank of\nthree or more.\n\n###### `options.strong`\n\nMarker to use for strong (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.tightDefinitions`\n\nWhether to join definitions without a blank line (`boolean`, default: `false`).\nThe default is to add blank lines between any flow (“block”) construct.\nTurning this option on is a shortcut for a join function like so:\n\n```js\nfunction joinTightDefinitions(left, right) {\n  if (left.type === 'definition' && right.type === 'definition') {\n    return 0\n  }\n}\n```\n\n###### `options.handlers`\n\nObject mapping node types to custom handlers (`Record<string, Handle>`, default:\n`{}`).\nUseful for syntax extensions.\n\nThis option is a bit advanced.\nIt’s recommended to look at the code in [`lib/handle/`][handlers] for examples.\n\n###### `options.join`\n\nList of functions used to determine what to place between two flow nodes\n(`Array<Join>`, default: `[]`).\n\n“Blocks” are typically joined by one blank line.\nSometimes it’s nicer to have them flush next to each other, yet other times\nthey can’t occur together at all.\nJoin functions receive two adjacent siblings and their parent and can return\n`number` or `boolean`, to signal how many blank lines to use between them.\nA return value of `true` is as passing `1`.\nA return value of `false` means the nodes cannot be joined by a blank line, such\nas two adjacent block quotes or indented code after a list, in which case a\ncomment will be injected to break them up:\n\n```markdown\n> Quote 1\n\n<!---->\n\n> Quote 2\n```\n\n###### `options.unsafe`\n\nList of patterns to escape (`Array<Unsafe>`).\nUseful for syntax extensions.\n\nThis option is quite advanced.\nIt’s recommended to look at the code in [`lib/unsafe.js`][unsafe] for examples.\n\n##### Extension options\n\n###### `options.extensions`\n\nList of extensions (`Array<ToMarkdownExtension>`, default: `[]`).\nEach `ToMarkdownExtension` is an object with the same interface as `options`\nhere.\n\n##### Returns\n\nSerialized markdown (`string`).\n\n## List of extensions\n\n*   [`syntax-tree/mdast-util-directive`](https://github.com/syntax-tree/mdast-util-directive)\n    — directives\n*   [`syntax-tree/mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-frontmatter)\n    — frontmatter (YAML, TOML, more)\n*   [`syntax-tree/mdast-util-gfm`](https://github.com/syntax-tree/mdast-util-gfm)\n    — GFM\n*   [`syntax-tree/mdast-util-gfm-autolink-literal`](https://github.com/syntax-tree/mdast-util-gfm-autolink-literal)\n    — GFM autolink literals\n*   [`syntax-tree/mdast-util-gfm-footnote`](https://github.com/syntax-tree/mdast-util-gfm-footnote)\n    — GFM footnotes\n*   [`syntax-tree/mdast-util-gfm-strikethrough`](https://github.com/syntax-tree/mdast-util-gfm-strikethrough)\n    — GFM strikethrough\n*   [`syntax-tree/mdast-util-gfm-table`](https://github.com/syntax-tree/mdast-util-gfm-table)\n    — GFM tables\n*   [`syntax-tree/mdast-util-gfm-task-list-item`](https://github.com/syntax-tree/mdast-util-gfm-task-list-item)\n    — GFM task list items\n*   [`syntax-tree/mdast-util-math`](https://github.com/syntax-tree/mdast-util-math)\n    — math\n*   [`syntax-tree/mdast-util-mdx`](https://github.com/syntax-tree/mdast-util-mdx)\n    — MDX\n*   [`syntax-tree/mdast-util-mdx-expression`](https://github.com/syntax-tree/mdast-util-mdx-expression)\n    — MDX expressions\n*   [`syntax-tree/mdast-util-mdx-jsx`](https://github.com/syntax-tree/mdast-util-mdx-jsx)\n    — MDX JSX\n*   [`syntax-tree/mdast-util-mdxjs-esm`](https://github.com/syntax-tree/mdast-util-mdxjs-esm)\n    — MDX ESM\n\n## Syntax\n\nMarkdown is serialized according to CommonMark but care is taken to format in\nsuch a way that the resulting markdown should work with most markdown parsers.\nExtensions can add support for custom syntax.\n\n## Syntax tree\n\nThe syntax tree is [mdast][].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the types `Options`, `Map`, `Unsafe`, `Join`, `Handlers`, `Handle`,\n`Context`, `SafeOptions`, which model the interfaces used by options and\nextensions.\n\n## Security\n\n`mdast-util-to-markdown` will do its best to serialize markdown to match the\nsyntax tree, but there are several cases where that is impossible.\nIt’ll do its best, but complete roundtripping is impossible given that any value\ncould be injected into the tree.\n\nAs markdown is sometimes used for HTML, and improper use of HTML can open you up\nto a [cross-site scripting (XSS)][xss] attack, use of `mdast-util-to-markdown`\nand parsing it again later could potentially be unsafe.\nWhen parsing markdown afterwards and then going to HTML, use something like\n[`hast-util-sanitize`][hast-util-sanitize] to make the tree safe.\n\n## Related\n\n*   [`syntax-tree/mdast-util-from-markdown`](https://github.com/syntax-tree/mdast-util-from-markdown)\n    — parse markdown to mdast\n*   [`micromark/micromark`](https://github.com/micromark/micromark)\n    — parse markdown\n*   [`remarkjs/remark`](https://github.com/remarkjs/remark)\n    — process markdown\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-to-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-to-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-to-markdown.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-to-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-to-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-to-markdown\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-to-markdown.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-to-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[hast-util-sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[handlers]: lib/handle\n\n[unsafe]: lib/unsafe.js\n\n[remark]: https://github.com/remarkjs/remark\n\n[remark-stringify]: https://github.com/remarkjs/remark/tree/main/packages/remark-stringify\n"},{"text":"# mdast-util-to-string\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[mdast][]** utility to get the plain text content of a node.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install mdast-util-to-string\n```\n\n## Use\n\n```js\nimport unified from 'unified'\nimport remarkParse from 'remark-parse'\nimport {toString} from 'mdast-util-to-string'\n\nvar tree = unified()\n  .use(remarkParse)\n  .parse('Some _emphasis_, **importance**, and `code`.')\n\nconsole.log(toString(tree)) // => 'Some emphasis, importance, and code.'\n```\n\n## API\n\nThis package exports the following identifiers: `toString`.\nThere is no default export.\n\n### `toString(node[, options])`\n\nGet the text content of a [node][] or list of nodes.\n\nThe algorithm checks `value` of `node` and then `alt`.\nIf no value is found, the algorithm checks the children of `node` and joins them\n(without spaces or newlines).\n\n> This is not a markdown to plain-text library.\n> Use [`strip-markdown`][strip-markdown] for that.\n\n###### `options.includeImageAlt`\n\nWhether to use `alt` (`boolean`, default: `true`)\n\n## Security\n\nUse of `mdast-util-to-string` does not involve **[hast][]**, user content, or\nchange the tree, so there are no openings for [cross-site scripting (XSS)][xss]\nattacks.\n\n## Related\n\n*   [`nlcst-to-string`](https://github.com/syntax-tree/nlcst-to-string)\n    — Get text content in nlcst\n*   [`hast-util-to-string`](https://github.com/wooorm/rehype-minify/tree/HEAD/packages/hast-util-to-string)\n    — Get text content in hast\n*   [`hast-util-to-text`](https://github.com/syntax-tree/hast-util-to-text)\n    — Get text content in hast according to the `innerText` algorithm\n*   [`hast-util-from-string`](https://github.com/wooorm/rehype-minify/tree/HEAD/packages/hast-util-from-string)\n    — Set text content in hast\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-to-string/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-to-string/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-to-string.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-to-string\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-to-string.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-to-string\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-to-string.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-to-string\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[node]: https://github.com/syntax-tree/mdast#nodes\n\n[strip-markdown]: https://github.com/remarkjs/strip-markdown\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[hast]: https://github.com/syntax-tree/hast\n"},{"text":"# merge2\n\nMerge multiple streams into one stream in sequence or parallel.\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Downloads][downloads-image]][downloads-url]\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/merge2)\n\n```sh\nnpm install merge2\n```\n\n## Usage\n\n```js\nconst gulp = require('gulp')\nconst merge2 = require('merge2')\nconst concat = require('gulp-concat')\nconst minifyHtml = require('gulp-minify-html')\nconst ngtemplate = require('gulp-ngtemplate')\n\ngulp.task('app-js', function () {\n  return merge2(\n      gulp.src('static/src/tpl/*.html')\n        .pipe(minifyHtml({empty: true}))\n        .pipe(ngtemplate({\n          module: 'genTemplates',\n          standalone: true\n        })\n      ), gulp.src([\n        'static/src/js/app.js',\n        'static/src/js/locale_zh-cn.js',\n        'static/src/js/router.js',\n        'static/src/js/tools.js',\n        'static/src/js/services.js',\n        'static/src/js/filters.js',\n        'static/src/js/directives.js',\n        'static/src/js/controllers.js'\n      ])\n    )\n    .pipe(concat('app.js'))\n    .pipe(gulp.dest('static/dist/js/'))\n})\n```\n\n```js\nconst stream = merge2([stream1, stream2], stream3, {end: false})\n//...\nstream.add(stream4, stream5)\n//..\nstream.end()\n```\n\n```js\n// equal to merge2([stream1, stream2], stream3)\nconst stream = merge2()\nstream.add([stream1, stream2])\nstream.add(stream3)\n```\n\n```js\n// merge order:\n//   1. merge `stream1`;\n//   2. merge `stream2` and `stream3` in parallel after `stream1` merged;\n//   3. merge 'stream4' after `stream2` and `stream3` merged;\nconst stream = merge2(stream1, [stream2, stream3], stream4)\n\n// merge order:\n//   1. merge `stream5` and `stream6` in parallel after `stream4` merged;\n//   2. merge 'stream7' after `stream5` and `stream6` merged;\nstream.add([stream5, stream6], stream7)\n```\n\n```js\n// nest merge\n// equal to merge2(stream1, stream2, stream6, stream3, [stream4, stream5]);\nconst streamA = merge2(stream1, stream2)\nconst streamB = merge2(stream3, [stream4, stream5])\nconst stream = merge2(streamA, streamB)\nstreamA.add(stream6)\n```\n\n## API\n\n```js\nconst merge2 = require('merge2')\n```\n\n### merge2()\n\n### merge2(options)\n\n### merge2(stream1, stream2, ..., streamN)\n\n### merge2(stream1, stream2, ..., streamN, options)\n\n### merge2(stream1, \\[stream2, stream3, ...], streamN, options)\n\nreturn a duplex stream (mergedStream). streams in array will be merged in parallel.\n\n### mergedStream.add(stream)\n\n### mergedStream.add(stream1, \\[stream2, stream3, ...], ...)\n\nreturn the mergedStream.\n\n### mergedStream.on('queueDrain', function() {})\n\nIt will emit 'queueDrain' when all streams merged. If you set `end === false` in options, this event give you a notice that should add more streams to merge or end the mergedStream.\n\n#### stream\n\n*option*\nType: `Readable` or `Duplex` or `Transform` stream.\n\n#### options\n\n*option*\nType: `Object`.\n\n*   **end** - `Boolean` - if `end === false` then mergedStream will not be auto ended, you should end by yourself. **Default:** `undefined`\n\n*   **pipeError** - `Boolean` - if `pipeError === true` then mergedStream will emit `error` event from source streams. **Default:** `undefined`\n\n*   **objectMode** - `Boolean` . **Default:** `true`\n\n`objectMode` and other options(`highWaterMark`, `defaultEncoding` ...) is same as Node.js `Stream`.\n\n## License\n\nMIT © [Teambition](https://www.teambition.com)\n\n[npm-url]: https://npmjs.org/package/merge2\n\n[npm-image]: http://img.shields.io/npm/v/merge2.svg\n\n[travis-url]: https://travis-ci.org/teambition/merge2\n\n[travis-image]: http://img.shields.io/travis/teambition/merge2.svg\n\n[downloads-url]: https://npmjs.org/package/merge2\n\n[downloads-image]: http://img.shields.io/npm/dm/merge2.svg?style=flat-square\n"},{"text":"<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/2e476c9/logo.svg?sanitize=true\" alt=\"micromark\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n## Feature highlights\n\n*   \\[x] **[compliant][commonmark]** (100% to CommonMark)\n*   \\[x] **[extensions][]** ([GFM][], [directives][], [frontmatter][], [math][],\n    [MDX.js][mdxjs])\n*   \\[x] **[safe][security]** (by default)\n*   \\[x] **[small][size]** (smallest CM parser that exists)\n*   \\[x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## When to use this\n\n*   If you *just* want to turn markdown into HTML (with maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n*   [Extensions](#extensions)\n    *   [List of extensions](#list-of-extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [Extending markdown](#extending-markdown)\n    *   [Creating a micromark extension](#creating-a-micromark-extension)\n*   [Architecture](#architecture)\n    *   [Overview](#overview)\n    *   [Preprocess](#preprocess)\n    *   [Parse](#parse)\n    *   [Postprocess](#postprocess)\n    *   [Compile](#compile)\n*   [Examples](#examples)\n    *   [GitHub flavored markdown (GFM)](#github-flavored-markdown-gfm)\n    *   [Math](#math)\n    *   [Syntax tree](#syntax-tree)\n*   [Markdown](#markdown)\n    *   [CommonMark](#commonmark)\n    *   [Grammar](#grammar)\n*   [Project](#project)\n    *   [Comparison](#comparison)\n    *   [Test](#test)\n    *   [Size & debug](#size--debug)\n    *   [Version](#version)\n    *   [Security](#security)\n    *   [Contribute](#contribute)\n    *   [Sponsor](#sponsor)\n    *   [Origin story](#origin-story)\n    *   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml()]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport fs from 'fs'\nimport {stream} from 'micromark/stream'\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the following identifier: `micromark`.\n`micromark/stream` exports the following identifier: `stream`.\nThere are no default exports.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `value`\n\nMarkdown to parse (`string` or `Buffer`).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `value` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `value` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\nSee [§ Security][security].\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\nSee [§ Security][security].\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\nSee [§ Extensions][extensions].\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\nSee [§ Extensions][extensions].\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `stream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nmicromark supports extensions.\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension],\nwhich change how markdown is parsed, and [`HtmlExtension`][html-extension],\nwhich change how it compiles.\nThey can be passed in [`options.extensions`][option-extensions] or\n[`options.htmlExtensions`][option-htmlextensions], respectively.\n\nAs a user of extensions, refer to each extension’s readme for more on how to use\nthem.\nAs a (potential) author of extensions, refer to\n[§ Extending markdown][extending-markdown] and\n[§ Creating a micromark extension][create-extension].\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-footnote`](https://github.com/micromark/micromark-extension-gfm-footnote)\n    — support GFM footnotes\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n#### Community extensions\n\n*   [`wataru-chocola/micromark-extension-definition-list`](https://github.com/wataru-chocola/micromark-extension-definition-list)\n    — support definition lists\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are typically the names of hooks,\nreferring to where constructs “hook” into.\nThe fields at such objects are character codes, mapping to constructs as values.\n\nThe built in [constructs][] are an example.\nSee it and [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are typically `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\n\nSee [existing extensions][extensions] for inspiration.\n\n### Extending markdown\n\nmicromark lets you change markdown syntax, yes, but there are alternatives.\nThe alternatives are often better.\n\nOver the years, many micromark and remark users have asked about their unique\ngoals for markdown.\nSome exemplary goals are:\n\n1.  I want to add `rel=\"nofollow\"` to external links\n2.  I want to add links from headings to themselves\n3.  I want line breaks in paragraphs to become hard breaks\n4.  I want to support embedded music sheets\n5.  I want authors to add arbitrary attributes\n6.  I want authors to mark certain blocks with meaning, such as tip, warning,\n    etc\n7.  I want to combine markdown with JS(X)\n8.  I want to support our legacy flavor of markdown-like syntax\n\nThese can be solved in different ways and which solution is best is both\nsubjective and dependant on unique needs.\nOften, there is already a solution in the form of an existing remark or rehype\nplugin.\nRespectively, their solutions are:\n\n1.  [`remark-external-links`](https://github.com/remarkjs/remark-external-links)\n2.  [`rehype-autolink-headings`](https://github.com/rehypejs/rehype-autolink-headings)\n3.  [`remark-breaks`](https://github.com/remarkjs/remark-breaks)\n4.  custom plugin similar to\n    [`rehype-katex`](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)\n    but integrating [`abcjs`](https://www.abcjs.net)\n5.  either [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    and a custom plugin or with\n    [`rehype-attr`](https://github.com/jaywcjlove/rehype-attr)\n6.  [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    combined with a custom plugin\n7.  combining the existing micromark MDX extensions however you please, such as\n    done by [`mdx-js/mdx`](https://github.com/mdx-js/mdx) or\n    [`xdm`](https://github.com/wooorm/xdm)\n8.  Writing a micromark extension\n\nLooking at these from a higher level, they can be categorized:\n\n*   **Changing the output by transforming syntax trees**\n    (1 and 2)\n\n    This category is nice as the format remains plain markdown that authors are\n    already familiar with and which will work with existing tools and platforms.\n\n    Implementations will deal with the syntax tree\n    ([`mdast`][mdast]) and the ecosystems\n    **[remark][]** and **[rehype][]**.\n    There are many existing\n    [utilities for working with that tree][utilities].\n    Many [remark plugins][] and [rehype plugins][] also exist.\n*   **Using and abusing markdown to add new meaning**\n    (3, 4, potentially 5)\n\n    This category is similar to *Changing the output by transforming syntax\n    trees*, but adds a new meaning to certain things which already have\n    semantics in markdown.\n\n    Some examples in pseudo code:\n\n    ````markdown\n    *   **A list item with the first paragraph bold**\n\n        And then more content, is turned into `<dl>` / `<dt>` / `<dd>` elements\n\n    Or, the title attributes on links or images is [overloaded](/url 'rel:nofollow')\n    with a new meaning.\n\n    ```csv\n    fenced,code,can,include,data\n    which,is,turned,into,a,graph\n    ```\n\n    ```js data can=\"be\" passed=true\n    // after the code language name\n    ```\n\n    HTML, especially comments, could be used as **markers**<!--id=\"markers\"-->\n    ````\n*   **Arbitrary extension mechanism**\n    (potentially 5; 6)\n\n    This category is nice when content should contain embedded “components”.\n    Often this means it’s required for authors to have some programming\n    experience.\n    There are three good ways to solve arbitrary extensions.\n\n    **HTML**: Markdown already has an arbitrary extension syntax.\n    It works in most places and authors are already familiar with the syntax,\n    but it’s reasonably hard to implement securely.\n    Certain platforms will remove HTML completely, others sanitize it to varying\n    degrees.\n    HTML also supports custom elements.\n    These could be used and enhanced by client side JavaScript or enhanced when\n    transforming the syntax tree.\n\n    **Generic directives**: although\n    [a proposal][directive-proposal]\n    and not supported on most platforms, directives do work with many tools\n    already.\n    They’re not the easiest to author compared to, say, a heading, but sometimes\n    that’s okay.\n    They do have potential: they nicely solve the need for an infinite number of\n    potential extensions to markdown in a single markdown-esque way.\n\n    **MDX** also adds support for components by swapping HTML out for JS(X).\n    JSX is an extension to JavaScript, so MDX is something along the lines of\n    literate programming.\n    This does require knowledge of React (or Vue) and JavaScript, excluding some\n    authors.\n*   **Extending markdown syntax**\n    (7 and 8)\n\n    Extend the syntax of markdown means:\n\n    *   Authors won’t be familiar with the syntax\n    *   Content won’t work in other places (such as on GitHub)\n    *   Defeating the purpose of markdown: being simple to author and looking\n        like what it means\n\n    …and it’s hard to do as it requires some in-depth knowledge of JavaScript\n    and parsing.\n    But it’s possible and in certain cases very powerful.\n\n### Creating a micromark extension\n\nThis section shows how to create an extension for micromark that parses\n“variables” (a way to render some data) and one to turn a default construct off.\n\n> Stuck?\n> See [`support.md`][support].\n\n#### Prerequisites\n\n*   You should possess an intermediate to high understanding of JavaScript:\n    it’s going to get a bit complex\n*   Read the readme of [unified][] (until you hit the API section) to better\n    understand where micromark fits\n*   Read the [§ Architecture][architecture] section to understand how micromark\n    works\n*   Read the [§ Extending markdown][extending-markdown] section to understand\n    whether it’s a good idea to extend the syntax of markdown\n\n#### Extension basics\n\nmicromark supports two types of extensions.\nSyntax extensions change how markdown is parsed.\nHTML extensions change how it compiles.\n\nHTML extensions are not always needed, as micromark is often used through\n[`mdast-util-from-markdown`][from-markdown] to parse to a markdown syntax tree\nSo instead of an HTML extension a `from-markdown` utility is needed.\nThen, a [`mdast-util-to-markdown`][to-markdown] utility, which is responsible\nfor serializing syntax trees to markdown, is also needed.\n\nWhen developing something for internal use only, you can pick and choose which\nparts you need.\nWhen open sourcing your extensions, it should probably contain four parts:\nsyntax extension, HTML extension, `from-markdown` utility, and a `to-markdown`\nutility.\n\nOn to our first case!\n\n#### Case: variables\n\nLet’s first outline what we want to make: render some data, similar to how\n[Liquid](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and the\nlike work, in our markdown.\nIt could look like this:\n\n```markdown\nHello, {planet}!\n```\n\nTurned into:\n\n```html\n<p>Hello, Venus!</p>\n```\n\nAn opening curly brace, followed by one or more characters, and then a closing\nbrace.\nWe’ll then look up `planet` in some object and replace the variable with its\ncorresponding value, to get something like `Venus` out.\n\nIt looks simple enough, but with markdown there are often a couple more things\nto think about.\nFor this case, I can see the following:\n\n*   Is there a “block” version too?\n*   Are spaces allowed?\n    Line endings?\n    Should initial and final white space be ignored?\n*   Balanced nested braces?\n    Superfluous ones such as `{{planet}}` or meaningful ones such as\n    `{a {pla} net}`?\n*   Character escapes (`{pla\\}net}`) and character references\n    (`{pla&#x7d;net}`)?\n\nTo keep things as simple as possible, let’s not support a block syntax, see\nspaces as special, support line endings, or support nested braces.\nBut to learn interesting things, we *will* support character escapes and\n\\-references.\n\nNote that this particular case is already solved quite nicely by\n[`micromark-extension-mdx-expression`][mdx-expression].\nIt’s a bit more powerful and does more things, but it can be used to solve this\ncase and otherwise serve as inspiration.\n\n##### Setup\n\nCreate a new folder, enter it, and set up a new package:\n\n```sh\nmkdir example\ncd example\nnpm init -y\n```\n\nIn this example we’ll use ESM, so add `type: 'module'` to `package.json`:\n\n```diff\n@@ -2,6 +2,7 @@\n   \"name\": \"example\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n+  \"type\": \"module\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```\n\nAdd a markdown file, `example.md`, with the following text:\n\n```markdown\nHello, {planet}!\n\n{pla\\}net} and {pla&#x7d;net}.\n```\n\nTo check if our extension works, add an `example.js` module, with the following\ncode:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {micromark} from 'micromark'\nimport {variables} from './index.js'\n\nmain()\n\nasync function main() {\n  const buf = await fs.readFile('example.md')\n  const out = micromark(buf, {extensions: [variables]})\n  console.log(out)\n}\n```\n\nWhile working on the extension, run `node example` to see whether things work.\nFeel free to add more examples of the variables syntax in `example.md` if\nneeded.\n\nOur extension doesn’t work yet, for one because `micromark` is not installed:\n\n```sh\nnpm install micromark --save-dev\n```\n\n…and we need to write our extension.\nLet’s do that in `index.js`:\n\n```js\nexport const variables = {}\n```\n\nAlthough our extension doesn’t do anything, running `node example` now somewhat\nworks!\n\n##### Syntax extension\n\nMuch in micromark is based on character codes (see [§ Preprocess][preprocess]).\nFor this extension, the relevant codes are:\n\n*   `-5`\n    — M-0005 CARRIAGE RETURN (CR)\n*   `-4`\n    — M-0004 LINE FEED (LF)\n*   `-3`\n    — M-0003 CARRIAGE RETURN LINE FEED (CRLF)\n*   `null`\n    — EOF (end of the stream)\n*   `92`\n    — U+005C BACKSLASH (`\\`)\n*   `123`\n    — U+007B LEFT CURLY BRACE (`{`)\n*   `125`\n    — U+007D RIGHT CURLY BRACE (`}`)\n\nAlso relevant are the content types (see [§ Content types][content-types]).\nThis extension is a *text* construct, as it’s parsed alongsides links and such.\nThe content inside it (between the braces) is *string*, to support character\nescapes and -references.\n\nLet’s write our extension.\nAdd the following code to `index.js`:\n\n```js\nconst variableConstruct = {name: 'variable', tokenize: variableTokenize}\n\nexport const variables = {text: {123: variableConstruct}}\n\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    console.log('start:', effects, code);\n    return nok(code)\n  }\n}\n```\n\nThe above code exports an extension with the identifier `variables`.\nThe extension defines a *text* construct for the character code `123`.\nThe construct has a `name`, so that it can be turned off (optional, see next\ncase), and it has a `tokenize` function that sets up a state machine, which\nreceives `effects` and the `ok` and `nok` states.\n`ok` can be used when successful, `nok` when not, and so constructs are a bit\nsimilar to how promises can *resolve* or *reject*.\n`tokenize` returns the initial state, `start`, which itself receives the current\ncharacter code, prints some debugging information, and then returns a call\nto `nok`.\n\nEnsure that things work by running `node example` and see what it prints.\n\nNow we need to define our states and figure out how variables work.\nSome people prefer sketching a diagram of the flow.\nI often prefer writing it down in pseudo-code prose.\nI’ve also found that test driven development works well, where I write unit\ntests for how it should work, then write the state machine, and finally use a\ncode coverage tool to ensure I’ve thought of everything.\n\nIn prose, what we have to code looks like this:\n\n*   **start**:\n    Receive `123` as `code`, enter a token for the whole (let’s call it\n    `variable`), enter a token for the marker (`variableMarker`), consume\n    `code`, exit the marker token, enter a token for the contents\n    (`variableString`), switch to *begin*\n*   **begin**:\n    If `code` is `125`, reconsume in *nok*.\n    Else, reconsume in *inside*\n*   **inside**:\n    If `code` is `-5`, `-4`, `-3`, or `null`, reconsume in `nok`.\n    Else, if `code` is `125`, exit the string token, enter a `variableMarker`,\n    consume `code`, exit the marker token, exit the variable token, and switch\n    to *ok*.\n    Else, consume, and remain in *inside*.\n\nThat should be it!\nReplace `variableTokenize` with the following to include the needed states:\n\n```js\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('variable')\n    effects.enter('variableMarker')\n    effects.consume(code)\n    effects.exit('variableMarker')\n    effects.enter('variableString')\n    return begin\n  }\n\n  function begin(code) {\n    return code === 125 ? nok(code) : inside(code)\n  }\n\n  function inside(code) {\n    if (code === -5 || code === -4 || code === -3 || code === null) {\n      return nok(code)\n    }\n\n    if (code === 125) {\n      effects.exit('variableString')\n      effects.enter('variableMarker')\n      effects.consume(code)\n      effects.exit('variableMarker')\n      effects.exit('variable')\n      return ok\n    }\n\n    effects.consume(code)\n    return inside\n  }\n}\n```\n\nRun `node example` again and see what it prints!\nThe HTML compiler ignores things it doesn’t know, so variables are now removed.\n\nWe have our first syntax extension, and it sort of works, but we don’t handle\ncharacter escapes and -references yet.\nWe need to do two things to make that work:\na) skip over `\\\\` and `\\}` in our algorithm,\nb) tell micromark to parse them.\n\nChange the code in `index.js` to support escapes like so:\n\n```diff\n@@ -23,6 +23,11 @@ function variableTokenize(effects, ok, nok) {\n       return nok(code)\n     }\n\n+    if (code === 92) {\n+      effects.consume(code)\n+      return insideEscape\n+    }\n+\n     if (code === 125) {\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n@@ -35,4 +40,13 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     return inside\n   }\n+\n+  function insideEscape(code) {\n+    if (code === 92 || code === 125) {\n+      effects.consume(code)\n+      return inside\n+    }\n+\n+    return inside(code)\n+  }\n }\n```\n\nFinally add support for character references and character escapes between\nbraces by adding a special token that defines a content type:\n\n```diff\n@@ -11,6 +11,7 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     effects.exit('variableMarker')\n     effects.enter('variableString')\n+    effects.enter('chunkString', {contentType: 'string'})\n     return begin\n   }\n\n@@ -29,6 +30,7 @@ function variableTokenize(effects, ok, nok) {\n     }\n\n     if (code === 125) {\n+      effects.exit('chunkString')\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n       effects.consume(code)\n```\n\nTokens with a `contentType` will be replaced by *postprocess* (see\n[§ Postprocess][postprocess]) by the tokens belonging to that content type.\n\n##### HTML extension\n\nUp next is an HTML extension to replace variables with data.\nChange `example.js` to use one like so:\n\n```diff\n@@ -1,11 +1,12 @@\n import {promises as fs} from 'node:fs'\n import {micromark} from 'micromark'\n-import {variables} from './index.js'\n+import {variables, variablesHtml} from './index.js'\n\n main()\n\n async function main() {\n   const buf = await fs.readFile('example.md')\n-  const out = micromark(buf, {extensions: [variables]})\n+  const html = variablesHtml({planet: '1', 'pla}net': '2'})\n+  const out = micromark(buf, {extensions: [variables], htmlExtensions: [html]})\n   console.log(out)\n }\n```\n\nAnd add the HTML extension, `variablesHtml`, to `index.js` like so:\n\n```diff\n@@ -52,3 +52,19 @@ function variableTokenize(effects, ok, nok) {\n     return inside(code)\n   }\n }\n+\n+export function variablesHtml(data = {}) {\n+  return {\n+    enter: {variableString: enterVariableString},\n+    exit: {variableString: exitVariableString},\n+  }\n+\n+  function enterVariableString() {\n+    this.buffer()\n+  }\n+\n+  function exitVariableString() {\n+    var id = this.resume()\n+    if (id in data) {\n+      this.raw(this.encode(data[id]))\n+    }\n+  }\n+}\n```\n\n`variablesHtml` is a function that receives an object mapping “variables” to\nstrings and returns an HTML extension.\nThe extension hooks two functions to `variableString`, one when it starts,\nthe other when it ends.\nWe don’t need to do anything to handle the other tokens as they’re already\nignored by default.\n`enterVariableString` calls `buffer`, which is a function that “stashes” what\nwould otherwise be emitted.\n`exitVariableString` calls `resume`, which is the inverse of `buffer` and\nreturns the stashed value.\nIf the variable is defined, we ensure it’s made safe (with `this.encode`) and\nfinally output that (with `this.raw`).\n\n##### Further exercises\n\nIt works!\nWe’re done!\nOf course, it can be better, such as with the following potential features:\n\n*   Add support for empty variables\n*   Add support for spaces between markers and string\n*   Add support for line endings in variables\n*   Add support for nested braces\n*   Add support for blocks\n*   Add warnings on undefined variables\n*   Use `micromark-build`, and use `uvu/assert`, `debug`, and\n    `micromark-util-symbol` (see [§ Size & debug][size-debug])\n*   Add [`mdast-util-from-markdown`][from-markdown] and\n    [`mdast-util-to-markdown`][to-markdown] utilities to parse and serialize the\n    AST\n\n#### Case: turn off constructs\n\nSometimes it’s needed to turn a default construct off.\nThat’s possible through a syntax extension.\nNote that not everything can be turned off (such as paragraphs) and even if it’s\npossible to turn something off, it could break micromark (such as character\nescapes).\n\nTo disable constructs, refer to them by name in an array at the `disable.null`\nfield of an extension:\n\n```js\nimport {micromark} from 'micromark'\n\nconst extension = {disable: {null: ['codeIndented']}}\n\nconsole.log(micromark('\\ta', {extensions: [extension]}))\n```\n\nYields:\n\n```html\n<p>a</p>\n```\n\n## Architecture\n\nmicromark is maintained as a monorepo.\nMany of its internals, which are used in `micromark` (core) but also useful for\ndevelopers of extensions or integrations, are available as separate modules.\nEach module maintained here is available in [`packages/`][packages].\n\n### Overview\n\nThe naming scheme in [`packages/`][packages] is as follows:\n\n*   `micromark-build`\n    — Small CLI to build dev code into production code\n*   `micromark-core-commonmark`\n    — CommonMark constructs used in micromark\n*   `micromark-factory-*`\n    — Reusable subroutines used to parse parts of constructs\n*   `micromark-util-*`\n    — Reusable helpers often needed when parsing markdown\n*   `micromark`\n    — Core module\n\nmicromark has two interfaces: buffering (maintained in\n[`micromark/dev/index.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/index.js))\nand streaming (maintained in\n[`micromark/dev/stream.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/stream.js)).\nThe first takes all input at once whereas the last uses a Node.js stream to take\ninput separately.\nThey thinly wrap how data flows through micromark:\n\n```txt\n                                            micromark\n+-----------------------------------------------------------------------------------------------+\n|            +------------+         +-------+         +-------------+         +---------+       |\n| -markdown->+ preprocess +-chunks->+ parse +-events->+ postprocess +-events->+ compile +-html- |\n|            +------------+         +-------+         +-------------+         +---------+       |\n+-----------------------------------------------------------------------------------------------+\n```\n\n### Preprocess\n\nThe **preprocessor**\n([`micromark/dev/lib/preprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/preprocess.js))\ntakes markdown and turns it into chunks.\n\nA **chunk** is either a character code or a slice of a buffer in the form of a\nstring.\nChunks are used because strings are more efficient storage than character codes,\nbut limited in what they can represent.\nFor example, the input `ab\\ncd` is represented as `['ab', -4, 'cd']` in chunks.\n\nA character **code** is often the same as what `String#charCodeAt()` yields but\nmicromark adds meaning to certain other values.\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is replaced\nby one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL SPACE (VS)\ncharacters, depending on the column at which the tab occurred.\nFor example, the input `\\ta` is represented as `[-2, -1, -1, -1, 97]` and `a\\tb`\nas `[97, -2, -1, -1, 98]` in character codes.\n\nThe characters U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) are\nreplaced by virtual characters depending on whether they occur together: M-0003\nCARRIAGE RETURN LINE FEED (CRLF), M-0004 LINE FEED (LF), and M-0005 CARRIAGE\nRETURN (CR).\nFor example, the input `a\\r\\nb\\nc\\rd` is represented as\n`[97, -5, 98, -4, 99, -3, 100]` in character codes.\n\nThe `0` (U+0000 NUL) character code is replaced by U+FFFD REPLACEMENT CHARACTER\n(`�`).\n\nThe `null` code represents the end of the input stream (called *eof* for end of\nfile).\n\n### Parse\n\nThe **parser**\n([`micromark/dev/lib/parse.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/parse.js))\ntakes chunks and turns them into events.\n\nAn **event** is the start or end of a token amongst other events.\nTokens can “contain” other tokens, even though they are stored in a flat list,\nby entering before and exiting after them.\n\nA **token** is a span of one or more codes.\nTokens are most of what micromark produces: the built in HTML compiler or other\ntools can turn them into different things.\nTokens are essentially names attached to a slice, such as `lineEndingBlank` for\ncertain line endings, or `codeFenced` for a whole fenced code.\n\nSometimes, more info is attached to tokens, such as `_open` and `_close` by\n`attention` (strong, emphasis) to signal whether the sequence can open or close\nan attention run.\nThese fields have to do with how the parser works, which is complex and not\nalways pretty.\n\nCertain fields (`previous`, `next`, and `contentType`) are used in many cases:\nlinked tokens for subcontent.\nLinked tokens are used because outer constructs are parsed first.\nTake for example:\n\n```markdown\n- *a\n  b*.\n```\n\n1.  The list marker and the space after it is parsed first\n2.  The rest of the line is a `chunkFlow` token\n3.  The two spaces on the second line are a `linePrefix` of the list\n4.  The rest of the line is another `chunkFlow` token\n\nThe two `chunkFlow` tokens are linked together and the chunks they span are\npassed through the flow tokenizer.\nThere the chunks are seen as `chunkContent` and passed through the content\ntokenizer.\nThere the chunks are seen as a paragraph and seen as `chunkText` and passed\nthrough the text tokenizer.\nFinally, the attention (emphasis) and data (“raw” characters) is parsed there,\nand we’re done!\n\n#### Content types\n\nThe parser starts out with a document tokenizer.\n*Document* is the top-most content type, which includes containers such as block\nquotes and lists.\nContainers in markdown come from the margin and include more constructs\non the lines that define them.\n\n*Flow* represents the sections (block constructs such as ATX and setext\nheadings, HTML, indented and fenced code, thematic breaks), which like\n*document* are also parsed per line.\nAn example is HTML, which has a certain starting condition (such as `<script>`\non its own line), then continues for a while, until an end condition is found\n(such as `</style>`).\nIf that line with an end condition is never found, that flow goes until the end.\n\n*Content* is zero or more definitions, and then zero or one paragraph.\nIt’s a weird one, and needed to make certain edge cases around definitions spec\ncompliant.\nDefinitions are unlike other things in markdown, in that they behave like *text*\nin that they can contain arbitrary line endings, but *have* to end at a line\nending.\nIf they end in something else, the whole definition instead is seen as a\nparagraph.\n\nThe content in markdown first needs to be parsed up to this level to figure out\nwhich things are defined, for the whole document, before continuing on with\n*text*, as whether a link or image reference forms or not depends on whether\nit’s defined.\nThis unfortunately prevents a true streaming markdown parser.\n\n*Text* contains phrasing content (rich inline text: autolinks, character escapes\nand -references, code, hard breaks, HTML, images, links, emphasis, strong).\n\n*String* is a limited *text*-like content type which only allows character\nreferences and character escapes.\nIt exists in things such as identifiers (media references, definitions),\ntitles, or URLs and such.\n\n#### Constructs\n\nConstructs are the things that make up markdown.\nSome examples are lists, thematic breaks, or character references.\n\nNote that, as a general rule of thumb, markdown is *really weird*.\nIt’s essentially made up of edge cases rather than logical rules.\nWhen browsing the built in constructs, or venturing to build your own, you’ll\nfind confusing new things and run into complex custom hooks.\n\nOne more reasonable construct is the thematic break\n([see code](https://github.com/micromark/micromark/blob/main/packages/micromark-core-commonmark/dev/lib/thematic-break.js)).\nIt’s an object that defines a `name` and a `tokenize` function.\nMost of what constructs do is defined in their required `tokenize` function,\nwhich sets up a state machine to handle character codes streaming in.\n\n### Postprocess\n\nThe **postprocessor**\n([`micromark/dev/lib/postprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/postprocess.js))\nis a small step that takes events, ensures all their\nnested content is parsed, and returns the modified events.\n\n### Compile\n\nThe **compiler**\n([`micromark/dev/lib/compile.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/compile.js))\ntakes events and turns them into HTML.\nWhile micromark was created mostly to advance markdown parsing irrespective of\ncompiling to HTML, the common case of doing so is built in.\nA built in HTML compiler is useful because it allows us to check for compliancy\nto CommonMark, the de facto norm of markdown, specified in roughly 650\ninput/output cases.\nThe parsing parts can still be used separately to build ASTs, CSTs, or many\nother output formats.\n\nThe compiler has an interface that accepts lists of events instead of the whole\nat once, but because markdown can’t truly stream, events are buffered before\ncompiling and outputting the final result.\n\n## Examples\n\n### GitHub flavored markdown (GFM)\n\nTo support GFM (autolink literals, strikethrough, tables, and tasklists) use\n[`micromark-extension-gfm`][gfm].\nSay we have a file like this:\n\n```markdown\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Footnote\n\nA note[^1]\n\n[^1]: Big note.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tag filter\n\n<plaintext>\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [gfm()], htmlExtensions: [gfmHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<h1>GFM</h1>\n<h2>Autolink literals</h2>\n<p><a href=\"http://www.example.com\">www.example.com</a>, <a href=\"https://example.com\">https://example.com</a>, and <a href=\"mailto:contact@example.com\">contact@example.com</a>.</p>\n<h2>Footnote</h2>\n<p>A note<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup></p>\n<h2>Strikethrough</h2>\n<p><del>one</del> or <del>two</del> tildes.</p>\n<h2>Table</h2>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th align=\"left\">b</th>\n<th align=\"right\">c</th>\n<th align=\"center\">d</th>\n</tr>\n</thead>\n</table>\n<h2>Tag filter</h2>\n&lt;plaintext&gt;\n<h2>Tasklist</h2>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> to do</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n</ul>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>Big note. <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n```\n\n</details>\n\n### Math\n\nTo support math use [`micromark-extension-math`][math].\nSay we have a file like this:\n\n```markdown\nLift($L$) can be determined by Lift Coefficient ($C_L$) like the following equation.\n\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {math, mathHtml} from 'micromark-extension-math'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [math], htmlExtensions: [mathHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Lift(<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) can be determined by Lift Coefficient (<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) like the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\">…</span></span></div>\n```\n\n</details>\n\n### Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nimport fromMarkdown from 'mdast-util-from-markdown' // This wraps micromark.\n\nconst result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## Markdown\n\n### CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n### Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s [not a typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Project\n\n### Comparison\n\nThere are many other markdown parsers out there and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML easily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block, which means it’s fresh and well suited for\ncontemporary markdown needs, but it’s also battle-tested, and already the 3rd\nmost popular markdown parser in JavaScript.\n\nIf you’re looking for fine grained control, use micromark.\nIf you just want HTML from markdown, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree, and there’s *tons* of them.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nYou probably should use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, and\ndon’t care about perfect compatibility with CommonMark or GFM, but do appreciate\na small bundle size and stability, use [marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you need a couple of custom syntax extensions to your otherwise\nCommonMark-compliant markdown, and want to get HTML out, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant—but\nthat’s not always true.\nThis list is not supposed to be exhaustive (but it’s the most relevant ones).\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n### Test\n\nmicromark is tested with the ~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, which means that this project has\n100% code coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check either the\nunit tests, or both them and their coverage, respectively.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install `timeout` or remove that part temporarily from the script and\nmanually exit the program after a while.\n\n### Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with gzip and brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark.\nWhile developing, debugging, or testing your code, you *should* switch to use\ncode instrumented with assertions and debug messages:\n\n```sh\nnode --conditions development module.js\n```\n\nTo see debug messages, use a `DEBUG` env variable set to `micromark`:\n\n```sh\nDEBUG=\"*\" node --conditions development module.js\n```\n\n### Version\n\nmicromark adheres to [semver](https://semver.org) since 3.0.0.\n\n### Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nMarkdown itself is safe if it does not include embedded HTML or dangerous\nprotocols in links/images (such as `javascript:` or `data:`).\nmicromark makes any markdown safe by default, even if HTML is embedded or\ndangerous protocols are used, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother security aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n### Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n### Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n### Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n### License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: /packages/micromark/dev/lib/constructs.js\n\n[comparison]: #comparison\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[utilities]: https://github.com/syntax-tree/mdast#list-of-utilities\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[directive-proposal]: https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\n\n[architecture]: #architecture\n\n[extending-markdown]: #extending-markdown\n\n[create-extension]: #creating-a-micromark-extension\n\n[mdx-expression]: https://github.com/micromark/micromark-extension-mdx-expression\n\n[preprocess]: #preprocess\n\n[content-types]: https://github.com/micromark/micromark#content-types\n\n[postprocess]: https://github.com/micromark/micromark#postprocess\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[packages]: https://github.com/micromark/micromark/tree/main/packages\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n"},{"text":"# micromark-core-commonmark\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nThe core CommonMark constructs needed to tokenize markdown.\nSome of these can be [turned off][disable], but they are often essential to\nmarkdown and weird things might happen.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-core-commonmark\n```\n\n## Use\n\n```js\nimport {autolink} from 'micromark-core-commonmark'\n\nconsole.log(autolink) // Do things with `autolink`.\n```\n\n## API\n\nThis module exports the following identifiers: `attention`, `autolink`,\n`blankLine`, `blockQuote`, `characterEscape`, `characterReference`,\n`codeFenced`, `codeIndented`, `codeText`, `content`, `definition`,\n`hardBreakEscape`, `headingAtx`, `htmlFlow`, `htmlText`, `labelEnd`,\n`labelStartImage`, `labelStartLink`, `lineEnding`, `list`, `setextUnderline`,\n`thematicBreak`.\nThere is no default export.\n\nEach identifier refers to a [construct](https://github.com/micromark/micromark#constructs).\n\nSee the code for more on the exported constructs.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-core-commonmark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-core-commonmark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-core-commonmark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-core-commonmark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[disable]: https://github.com/micromark/micromark#case-turn-off-constructs\n"},{"text":"# micromark-extension-frontmatter\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[micromark][]** extension to support frontmatter (YAML, TOML, etc).\n\nAs there is no spec for frontmatter in markdown, this extension follows how YAML\nfrontmatter works on github.com.\nFor the HTML part, instead of rendering YAML, it is ignored.\nOther types of frontmatter can be parsed, which will by default also work the\nsame as on github.com.\n\nThis package provides the low-level modules for integrating with the micromark\ntokenizer and the micromark HTML compiler.\n\n## When to use this\n\nIf you’re using [`micromark`][micromark] or\n[`mdast-util-from-markdown`][from-markdown], use this package.\nAlternatively, if you’re using **[remark][]**, use\n[`remark-frontmatter`][remark-frontmatter].\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install micromark-extension-frontmatter\n```\n\n## Use\n\n```js\nimport {micromark} from 'micromark'\nimport {frontmatter, frontmatterHtml} from 'micromark-extension-frontmatter'\n\nconst output = micromark('---\\na: b\\n---\\n# c', {\n  extensions: [frontmatter()],\n  htmlExtensions: [frontmatterHtml()]\n})\n\nconsole.log(output)\n```\n\nYields:\n\n```html\n<h1>c</h1>\n```\n\n## API\n\nThis package exports the following identifiers: `frontmatter`,\n`frontmatterHtml`.\nThere is no default export.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\n\n### `frontmatter(options?)`\n\n### `frontmatterHtml(options?)`\n\n> Note: `syntax` is the default export of this module, `html` is available at\n> `micromark-extension-frontmatter/html`.\n\nSupport frontmatter (YAML, TOML, and more).\n\nTwo functions that can be called with options to get an extension for micromark\nto parse frontmatter (can be passed in `extensions`) and one to compile (ignore)\nthem (can be passed in `htmlExtensions`).\n\n##### `options`\n\nOne [`preset`][preset] or [`Matter`][matter], or an array of them, defining all\nthe supported frontmatters (default: `'yaml'`).\n\n##### `preset`\n\nEither `'yaml'` or `'toml'`:\n\n*   `'yaml'` — [`matter`][matter] defined as `{type: 'yaml', marker: '-'}`\n*   `'toml'` — [`matter`][matter] defined as `{type: 'toml', marker: '+'}`\n\n##### `Matter`\n\nAn object with a `type` and either a `marker` or a `fence`:\n\n*   `type` (`string`)\n    — Type to tokenize as\n*   `marker` (`string` or `{open: string, close: string}`)\n    — Character used to construct fences.\n    By providing an object with `open` and `close` different characters can be\n    used for opening and closing fences.\n    For example the character `'-'` will result in `'---'` being used as the\n    fence\n*   `fence` (`string` or `{open: string, close: string}`)\n    — String used as the complete fence.\n    By providing an object with `open` and `close` different values can be used\n    for opening and closing fences.\n    This can be used too if fences contain different characters or lengths other\n    than 3\n*   `anywhere` (`boolean`, default: `false`)\n    – if `true`, matter can be found anywhere in the document.\n    If `false` (default), only matter at the start of the document is recognized\n\n###### Example\n\nFor `{type: 'yaml', marker: '-'}`:\n\n```yaml\n---\nkey: value\n---\n```\n\nFor `{type: 'custom', marker: {open: '<', close: '>'}}`:\n\n```text\n<<<\ndata\n>>>\n```\n\nFor `{type: 'custom', fence: '+=+=+=+'}`:\n\n```text\n+=+=+=+\ndata\n+=+=+=+\n```\n\nFor `{type: 'json', fence: {open: '{', close: '}'}}`:\n\n```json\n{\n  \"key\": \"value\"\n}\n```\n\n## Related\n\n*   [`remarkjs/remark`][remark]\n    — markdown processor powered by plugins\n*   [`remarkjs/remark-frontmatter`][remark-frontmatter]\n    — remark plugin using this to support frontmatter\n*   [`micromark/micromark`][micromark]\n    — the smallest commonmark-compliant markdown parser that exists\n*   [`syntax-tree/mdast-util-frontmatter`][mdast-util-frontmatter]\n    — mdast utility to support frontmatter\n*   [`syntax-tree/mdast-util-from-markdown`][from-markdown]\n    — mdast parser using `micromark` to create mdast from markdown\n*   [`syntax-tree/mdast-util-to-markdown`][to-markdown]\n    — mdast serializer to create markdown from mdast\n\n## Contribute\n\nSee [`contributing.md` in `micromark/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark-extension-frontmatter/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark-extension-frontmatter/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark-extension-frontmatter.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark-extension-frontmatter\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-extension-frontmatter.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-extension-frontmatter\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-extension-frontmatter.svg\n\n[size]: https://bundlephobia.com/result?p=micromark-extension-frontmatter\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[micromark]: https://github.com/micromark/micromark\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[remark]: https://github.com/remarkjs/remark\n\n[mdast-util-frontmatter]: https://github.com/syntax-tree/mdast-util-frontmatter\n\n[remark-frontmatter]: https://github.com/remarkjs/remark-frontmatter\n\n[preset]: #preset\n\n[matter]: #matter\n"},{"text":"# micromark-factory-destination\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark factory to parse destinations (found in resources, definitions).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`factoryDestination(…)`](#factorydestination)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-factory-destination\n```\n\n## Use\n\n```js\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {codes} from 'micromark-util-symbol/codes'\nimport {types} from 'micromark-util-symbol/types'\n\n// A micromark tokenizer that uses the factory:\n/** @type {Tokenizer} */\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n\n  // …\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.rightParenthesis) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      types.resourceDestination,\n      types.resourceDestinationLiteral,\n      types.resourceDestinationLiteralMarker,\n      types.resourceDestinationRaw,\n      types.resourceDestinationString,\n      constants.linkResourceDestinationBalanceMax\n    )(code)\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `factoryDestination`.\nThere is no default export.\n\n### `factoryDestination(…)`\n\n###### Parameters\n\n*   `effects` (`Effects`) — Context\n*   `ok` (`State`) — State switched to when successful\n*   `nok` (`State`) — State switched to when not successful\n*   `type` (`string`) — Token type for whole (`<a>` or `b`)\n*   `literalType` (`string`) — Token type when enclosed (`<a>`)\n*   `literalMarkerType` (`string`) — Token type for enclosing (`<` and `>`)\n*   `rawType` (`string`) — Token type when not enclosed (`b`)\n*   `stringType` (`string`) — Token type for the URI (`a` or `b`)\n*   `max` (`number`, default: `Infinity`) — Max depth of nested parens\n\n###### Returns\n\n`State`.\n\n###### Examples\n\n```markdown\n<a>\n<a\\>b>\n<a b>\n<a)>\na\na\\)b\na(b)c\na(b)\n```\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-factory-destination.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-factory-destination\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-factory-destination.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-factory-destination\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-factory-label\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark factory to parse labels (found in media, definitions).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`factoryLabel(…)`](#factorylabel)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-factory-label\n```\n\n## Use\n\n```js\nimport {ok as assert} from 'uvu/assert'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {codes} from 'micromark-util-symbol/codes'\nimport {types} from 'micromark-util-symbol/types'\n\n// A micromark tokenizer that uses the factory:\n/** @type {Tokenizer} */\nfunction tokenizeDefinition(effects, ok, nok) {\n  return start\n\n  // …\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.definition)\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      types.definitionLabel,\n      types.definitionLabelMarker,\n      types.definitionLabelString\n    )(code)\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `factoryLabel`.\nThere is no default export.\n\n### `factoryLabel(…)`\n\nNote that labels in markdown are capped at 999 characters in the string.\n\n###### Parameters\n\n*   `this` (`TokenizeContext`) — Tokenize context\n*   `effects` (`Effects`) — Context\n*   `ok` (`State`) — State switched to when successful\n*   `nok` (`State`) — State switched to when not successful\n*   `type` (`string`) — Token type for whole (`[a]`)\n*   `markerType` (`string`) — Token type for the markers (`[` and `]`)\n*   `stringType` (`string`) — Token type for the identifier (`a`)\n\n###### Returns\n\n`State`.\n\n###### Examples\n\n```markdown\n[a]\n[a\nb]\n[a\\]b]\n```\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-factory-label.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-factory-label\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-factory-label.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-factory-label\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-factory-space\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark factory to parse [markdown space][markdown-space] (found in lots of\nplaces).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`factorySpace(…)`](#factoryspace)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-factory-space\n```\n\n## Use\n\n```js\nimport {factorySpace} from 'micromark-factory-space'\nimport {codes} from 'micromark-util-symbol/codes'\nimport {types} from 'micromark-util-symbol/types'\n\n// A micromark tokenizer that uses the factory:\n/** @type {Tokenizer} */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  return start\n\n  // …\n\n  /** @type {State} */\n  function info(code) {\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return factorySpace(effects, infoAfter, types.whitespace)(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `factorySpace`.\nThere is no default export.\n\n### `factorySpace(…)`\n\nNote that there is no `nok` parameter:\n\n*   spaces in markdown are often optional, in which case this factory can be\n    used and `ok` will be switched to whether spaces were found or not,\n*   One space character can be detected with\n    [markdownSpace(code)][markdown-space] right before using `factorySpace`\n\n###### Parameters\n\n*   `effects` (`Effects`) — Context\n*   `ok` (`State`) — State switched to when successful\n*   `type` (`string`) — Token type for whole (`' \\t'`)\n*   `max` (`number`, default: `Infinity`) — Max size of whitespace\n\n###### Returns\n\n`State`.\n\n###### Examples\n\nWhere `␉` represents a tab (plus how much it expands) and `␠` represents a\nsingle space.\n\n```markdown\n␉\n␠␠␠␠\n␉␠\n```\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-factory-space.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-factory-space\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-factory-space.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-factory-space\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[markdown-space]: https://github.com/micromark/micromark/tree/main/packages/micromark-util-character#markdownspacecode\n"},{"text":"# micromark-factory-title\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark factory to parse markdown titles (found in resources, definitions).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`factoryTitle(…)`](#factorytitle)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-factory-title\n```\n\n## Use\n\n```js\nimport {factoryTitle} from 'micromark-factory-title'\nimport {codes} from 'micromark-util-symbol/codes'\nimport {types} from 'micromark-util-symbol/types'\n\n// A micromark tokenizer that uses the factory:\n/** @type {Tokenizer} */\nfunction tokenizeDefinition(effects, ok, nok) {\n  return start\n\n  // …\n\n  /** @type {State} */\n  function before(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, types.whitespace),\n        nok,\n        types.definitionTitle,\n        types.definitionTitleMarker,\n        types.definitionTitleString\n      )(code)\n    }\n\n    return nok(code)\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `factoryTitle`.\nThere is no default export.\n\n### `factoryTitle(…)`\n\n###### Parameters\n\n*   `effects` (`Effects`) — Context\n*   `ok` (`State`) — State switched to when successful\n*   `nok` (`State`) — State switched to when not successful\n*   `type` (`string`) — Token type for whole (`\"a\"`, `'b'`, `(c)`)\n*   `markerType` (`string`) — Token type for the markers (`\"`, `'`, `(`, and\n    `)`)\n*   `stringType` (`string`) — Token type for the value (`a`)\n\n###### Returns\n\n`State`.\n\n###### Examples\n\n```markdown\n\"a\"\n'b'\n(c)\n\"a\nb\"\n'a\n    b'\n(a\\)b)\n```\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-factory-title.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-factory-title\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-factory-title.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-factory-title\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-factory-whitespace\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark factory to parse [markdown line endings or spaces][ws] (found in lots\nof places).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`factoryWhitespace(…)`](#factorywhitespace)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-factory-whitespace\n```\n\n## Use\n\n```js\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {codes} from 'micromark-util-symbol/codes'\nimport {types} from 'micromark-util-symbol/types'\n\n// A micromark tokenizer that uses the factory:\n/** @type {Tokenizer} */\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `factoryWhitespace`.\nThere is no default export.\n\n### `factoryWhitespace(…)`\n\nNote that there is no `nok` parameter:\n\n*   line endings or spaces in markdown are often optional, in which case this\n    factory can be used and `ok` will be switched to whether spaces were found\n    or not,\n*   One line ending or space can be detected with\n    [markdownLineEndingOrSpace(code)][ws] right before using `factoryWhitespace`\n\n###### Parameters\n\n*   `effects` (`Effects`) — Context\n*   `ok` (`State`) — State switched to when successful\n\n###### Returns\n\n`State`.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-factory-whitespace.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-factory-whitespace\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-factory-whitespace.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-factory-whitespace\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[ws]: https://github.com/micromark/micromark/tree/main/packages/micromark-util-character#markdownlineendingorspacecode\n"},{"text":"# micromark-util-character\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to handle [character codes](https://github.com/micromark/micromark#preprocess).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`asciiAlpha(code)`](#asciialphacode)\n    *   [`asciiDigit(code)`](#asciidigitcode)\n    *   [`asciiHexDigit(code)`](#asciihexdigitcode)\n    *   [`asciiAlphanumeric(code)`](#asciialphanumericcode)\n    *   [`asciiPunctuation(code)`](#asciipunctuationcode)\n    *   [`asciiAtext(code)`](#asciiatextcode)\n    *   [`asciiControl(code)`](#asciicontrolcode)\n    *   [`markdownLineEndingOrSpace(code)`](#markdownlineendingorspacecode)\n    *   [`markdownLineEnding(code)`](#markdownlineendingcode)\n    *   [`markdownSpace(code)`](#markdownspacecode)\n    *   [`unicodeWhitespace(code)`](#unicodewhitespacecode)\n    *   [`unicodePunctuation(code)`](#unicodepunctuationcode)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-character\n```\n\n## Use\n\n```js\nimport {asciiAlpha} from 'micromark-util-character'\n\nconsole.log(asciiAlpha(64)) // false\nconsole.log(asciiAlpha(65)) // true\n```\n\n## API\n\nThis module exports the following identifiers: `asciiAlpha`,\n`asciiAlphanumeric`, `asciiAtext`, `asciiControl`, `asciiDigit`,\n`asciiHexDigit`, `asciiPunctuation`, `markdownLineEnding`,\n`markdownLineEndingOrSpace`, `markdownSpace`, `unicodePunctuation`,\n`unicodeWhitespace`.\nThere is no default export.\n\n### `asciiAlpha(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents an ASCII alpha (`a` through `z`,\ncase insensitive).\n\nAn **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n\nAn **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\nto U+005A (`Z`).\n\nAn **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\nto U+007A (`z`).\n\n### `asciiDigit(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents an ASCII digit (`0` through `9`).\n\nAn **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\nU+0039 (`9`).\n\n### `asciiHexDigit(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents an ASCII hex digit (`a` through `f`, case insensitive, or `0` through\n`9`).\n\nAn **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\ndigit, or an ASCII lower hex digit.\n\nAn **ASCII upper hex digit** is a character in the inclusive range U+0041\n(`A`) to U+0046 (`F`).\n\nAn **ASCII lower hex digit** is a character in the inclusive range U+0061\n(`a`) to U+0066 (`f`).\n\n### `asciiAlphanumeric(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents an ASCII alphanumeric (`a` through `z`, case insensitive, or `0`\nthrough `9`).\n\nAn **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n(see `asciiAlpha`).\n\n### `asciiPunctuation(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents ASCII punctuation.\n\nAn **ASCII punctuation** is a character in the inclusive ranges U+0021\nEXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\nSIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n(`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n\n### `asciiAtext(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents an ASCII atext.\n\natext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\nthe inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\nU+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\nSLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\nCARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n(`{`) to U+007E TILDE (`~`) (**\\[RFC5322]**).\n\nSee **\\[RFC5322]**:\\\n[Internet Message Format](https://tools.ietf.org/html/rfc5322).\\\nP. Resnick.\\\nIETF.\n\n### `asciiControl(code)`\n\nCheck whether a\n[character code](https://github.com/micromark/micromark#preprocess)\nis an ASCII control character.\n\nAn **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\nto U+001F (US), or U+007F (DEL).\n\n### `markdownLineEndingOrSpace(code)`\n\nCheck whether a\n[character code](https://github.com/micromark/micromark#preprocess)\nis a markdown line ending (see `markdownLineEnding`) or markdown space (see\n`markdownSpace`).\n\n### `markdownLineEnding(code)`\n\nCheck whether a\n[character code](https://github.com/micromark/micromark#preprocess)\nis a markdown line ending.\n\nA **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\nLINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n\nIn micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\nRETURN (CR) are replaced by these virtual characters depending on whether\nthey occurred together.\n\n### `markdownSpace(code)`\n\nCheck whether a\n[character code](https://github.com/micromark/micromark#preprocess)\nis a markdown space.\n\nA **markdown space** is the concrete character U+0020 SPACE (SP) and the\nvirtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\nreplaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\nSPACE (VS) characters, depending on the column at which the tab occurred.\n\n### `unicodeWhitespace(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents Unicode whitespace.\n\nNote that this does handle micromark specific markdown whitespace characters.\nSee `markdownLineEndingOrSpace` to check that.\n\nA **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\nSpace) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\nU+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n\nSee **\\[UNICODE]**:\\\n[The Unicode Standard](https://www.unicode.org/versions/).\\\nUnicode Consortium.\n\n### `unicodePunctuation(code)`\n\nCheck whether the\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents Unicode punctuation.\n\nA **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\nConnector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n(Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n(Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\npunctuation (see `asciiPunctuation`) (**\\[UNICODE]**).\n\nSee **\\[UNICODE]**:\\\n[The Unicode Standard](https://www.unicode.org/versions/).\\\nUnicode Consortium.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-character.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-character\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-character.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-character\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-chunked\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to splice and push with giant arrays.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`push(list, items)`](#pushlist-items)\n    *   [`splice(list, start, remove, items)`](#splicelist-start-remove-items)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-chunked\n```\n\n## Use\n\n```js\nimport {push, splice} from 'micromark-util-chunked'\n\n// …\n\nnextEvents = push(nextEvents, [\n  ['enter', events[open][1], context],\n  ['exit', events[open][1], context]\n])\n\n// …\n\nsplice(events, open - 1, index - open + 3, nextEvents)\n\n// …\n```\n\n## API\n\nThis module exports the following identifiers: `push`, `splice`.\nThere is no default export.\n\n### `push(list, items)`\n\nAppend `items` (an array) at the end of `list` (another array).\nWhen `list` was empty, returns `items` instead.\n\nThis prevents a potentially expensive operation when `list` is empty,\nand adds items in batches to prevent V8 from hanging.\n\n###### Parameters\n\n*   `list` (`unknown[]`) — List to operate on\n*   `items` (`unknown[]`) — Items to add to `list`\n\n###### Returns\n\n`list` or `items`\n\n### `splice(list, start, remove, items)`\n\nLike `Array#splice`, but smarter for giant arrays.\n\n`Array#splice` takes all items to be inserted as individual argument which\ncauses a stack overflow in V8 when trying to insert 100k items for instance.\n\nOtherwise, this does not return the removed items, and takes `items` as an\narray instead of rest parameters.\n\n###### Parameters\n\n*   `list` (`unknown[]`) — List to operate on\n*   `start` (`number`) — Index to remove/insert at (can be negative)\n*   `remove` (`number`) — Number of items to remove\n*   `items` (`unknown[]`) — Items to inject into `list`\n\n###### Returns\n\n`void`\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-chunked.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-chunked\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-chunked.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-chunked\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-classify-character\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to classify whether a character is whitespace or punctuation.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`classifyCharacter(code)`](#classifycharactercode)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-classify-character\n```\n\n## Use\n\n```js\n/** @type {Tokenizer} */\nfunction tokenizeAttention(effects, ok) {\n  return start\n\n  // …\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      // …\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === constants.characterGroupPunctuation && before)\n    const close =\n      !before || (before === constants.characterGroupPunctuation && after)\n    // …\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `classifyCharacter`.\nThere is no default export.\n\n### `classifyCharacter(code)`\n\nClassify whether a\n[character code](https://github.com/micromark/micromark#preprocess)\nrepresents whitespace, punctuation, or\nsomething else.\nUsed for attention (emphasis, strong), whose sequences can open or close based\non the class of surrounding characters.\n\nNote that eof (`null`) is seen as whitespace.\n\n###### Returns\n\n`constants.characterGroupWhitespace`, `constants.characterGroupPunctuation`,\nor `undefined.`\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-classify-character.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-classify-character\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-classify-character.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-classify-character\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-combine-extensions\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to combine [syntax][] or [html][] extensions.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`combineExtensions(extensions)`](#combineextensionsextensions)\n    *   [`combineHtmlExtensions(htmlExtensions)`](#combinehtmlextensionshtmlextensions)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-combine-extensions\n```\n\n## Use\n\n```js\nimport {gfmAutolinkLiteral} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmStrikethrough} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable} from 'micromark-extension-gfm-table'\nimport {gfmTaskListItem} from 'micromark-extension-gfm-task-list-item'\nimport {combineExtensions} from 'micromark-util-combine-extensions'\n\nconst gfm = combineExtensions([gfmAutolinkLiteral, gfmStrikethrough(), gfmTable, gfmTaskListItem])\n```\n\n## API\n\nThis module exports the following identifiers: `combineExtensions`,\n`combineHtmlExtensions`.\nThere is no default export.\n\n### `combineExtensions(extensions)`\n\nCombine several syntax extensions into one.\n\n###### Parameters\n\n*   `extensions` (`Extension[]`) — List of syntax extensions\n\n###### Returns\n\nA single combined extension (`Extension`).\n\n### `combineHtmlExtensions(htmlExtensions)`\n\nCombine several html extensions into one.\n\n###### Parameters\n\n*   `htmlExtensions` (`HtmlExtension[]`) — List of html extensions\n\n###### Returns\n\nA single combined html extension (`HtmlExtension`).\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-combine-extensions.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-combine-extensions\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-combine-extensions.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-combine-extensions\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[syntax]: https://github.com/micromark/micromark#syntaxextension\n\n[html]: https://github.com/micromark/micromark#htmlextension\n"},{"text":"# micromark-util-decode-numeric-character-reference\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to decode numeric character references.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`decodeNumericCharacterReference(value)`](#decodenumericcharacterreferencevalue)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-decode-numeric-character-reference\n```\n\n## Use\n\n```js\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\n\ndecodeNumericCharacterReference('41', 16) // 'A'\ndecodeNumericCharacterReference('65', 10) // 'A'\ndecodeNumericCharacterReference('A', 16) // '\\n'\ndecodeNumericCharacterReference('7F', 16) // '�' - Control\ndecodeNumericCharacterReference('110000', 16) // '�' - Out of range\n```\n\n## API\n\nThis module exports the following identifiers:\n`decodeNumericCharacterReference`.\nThere is no default export.\n\n### `decodeNumericCharacterReference(value)`\n\nSort of like `String.fromCharCode(Number.parseInt(value, base))`,\nbut makes non-characters and control characters safe.\n\n###### Parameters\n\n*   `value` (`string`) — Value to decode.\n*   `base` (`number`, probably `10` or `16`) — Numeric base.\n\n###### Returns\n\n`string` — Character code.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-normalize-identifier.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-normalize-identifier\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-normalize-identifier.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-normalize-identifier\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-decode-string\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to decode markdown strings.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`decodeString(value)`](#decodestringvalue)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-decode-string\n```\n\n## Use\n\n```js\nimport {decodeString} from 'micromark-util-decode-string'\n\ndecodeString('a &semi; b') // 'a ; b'\ndecodeString('a \\\\; b') // 'a ; b'\ndecodeString('a ; b') // 'a ; b'\n```\n\n## API\n\nThis module exports the following identifiers: `decodeString`.\nThere is no default export.\n\n### `decodeString(value)`\n\nmicromark utility to decode markdown strings (which occur in places such as\nfenced code info strings, destinations, labels, and titles).\nThe “string” content type allows character escapes and -references.\nThis decodes those.\n\n###### Parameters\n\n*   `value` (`string`) — Value to decode.\n\n###### Returns\n\n`string` — Decoded value.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-normalize-identifier.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-normalize-identifier\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-normalize-identifier.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-normalize-identifier\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-encode\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to encode dangerous html characters.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`encode(value)`](#encodevalue)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-encode\n```\n\n## Use\n\n```js\nimport {encode} from 'micromark-util-encode'\n\nencode('<3') // '&lt;3'\n```\n\n## API\n\nThis module exports the following identifiers: `encode`.\nThere is no default export.\n\n### `encode(value)`\n\nEncode only the dangerous HTML characters.\n\nThis ensures that certain characters which have special meaning in HTML are\ndealt with.\nTechnically, we can skip `>` and `\"` in many cases, but CM includes them.\n\n###### Parameters\n\n*   `value` (`string`) — Value to encode.\n\n###### Returns\n\n`string` — Encoded value.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-encode.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-encode\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-encode.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-encode\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-html-tag-name\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility with list of html tag names.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`htmlBlockNames`](#htmlblocknames)\n    *   [`htmlRawNames`](#htmlrawnames)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-html-tag-name\n```\n\n## Use\n\n```js\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\n\nconsole.log(htmlBlockNames) // ['address', 'article', …]\nconsole.log(htmlRawNames) // ['pre', 'script', …]\n```\n\n## API\n\nThis module exports the following identifiers: `htmlBlockNames`,\n`htmlRawNames`.\nThere is no default export.\n\n### `htmlBlockNames`\n\nList of lowercase HTML tag names (`string[]`) which when parsing HTML (flow),\nresult in more relaxed rules (condition 6): because they are known blocks, the\nHTML-like syntax doesn’t have to be strictly parsed.\nFor tag names not in this list, a more strict algorithm (condition 7) is used\nto detect whether the HTML-like syntax is seen as HTML (flow) or not.\n\nThis is copied from: <https://spec.commonmark.org/0.29/#html-blocks>.\n\n### `htmlRawNames`\n\nList of lowercase HTML tag names (`string[]`) which when parsing HTML (flow),\nresult in HTML that can include lines w/o exiting, until a closing tag also in\nthis list is found (condition 1).\n\nThis is copied from:\n<https://spec.commonmark.org/0.29/#html-blocks>.\n\nNote that `textarea` is not available in `CommonMark@0.29` but has been merged\nto the primary branch and is slated to be released in the next release of\nCommonMark.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-html-tag-name.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-html-tag-name\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-html-tag-name.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-html-tag-name\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-normalize-identifier\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility normalize identifiers (as found in references, definitions).\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`normalizeIdentifier(value)`](#normalizeidentifiervalue)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-normalize-identifier\n```\n\n## Use\n\n```js\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nnormalizeIdentifier(' a ') // 'A'\nnormalizeIdentifier('a\\t\\r\\nb') // 'A B'\nnormalizeIdentifier('ТОЛПОЙ') // 'ТОЛПОЙ'\nnormalizeIdentifier('Толпой') // 'ТОЛПОЙ'\n```\n\n## API\n\nThis module exports the following identifiers: `normalizeIdentifier`.\nThere is no default export.\n\n### `normalizeIdentifier(value)`\n\nNormalize an identifier (such as used in definitions).\nCollapse Markdown whitespace, trim, and then lower- and uppercase.\n\nSome characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\nlowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\nuppercase character (U+0398 (`Θ`)).\nHence, to get that form, we perform both lower- and uppercase.\n\nUsing uppercase last makes sure keys will not interact with default prototypal\nmethods: no method is uppercase.\n\n###### Parameters\n\n*   `value` (`string`) — Identifier to normalize.\n\n###### Returns\n\n`string` — Normalized value.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-normalize-identifier.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-normalize-identifier\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-normalize-identifier.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-normalize-identifier\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-resolve-all\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to resolve subtokens.\n\n[Resolvers][resolver] are functions that take events and manipulate them.\nThis is needed for example because media (links, images) and attention (strong,\nitalic) aren’t parsed left-to-right.\nInstead, their openings and closings are parsed, and when done, their openings\nand closings are matched, and left overs are turned into plain text.\nBecause media and attention can’t overlap, we need to perform that operation\nwhen one closing matches an opening, too.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`resolveAll(constructs, events, context)`](#resolveallconstructs-events-context)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-resolve-all\n```\n\n## Use\n\n```js\nimport {push} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  // …\n\n  // Walk through all events.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          // …\n        ) {\n          // …\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            // …\n          ])\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            // …\n          ])\n\n          // …\n        }\n      }\n    }\n  }\n\n  // …\n}\n```\n\n## API\n\nThis module exports the following identifiers: `resolveAll`.\nThere is no default export.\n\n### `resolveAll(constructs, events, context)`\n\nCall all `resolveAll`s in `constructs`.\n\n###### Parameters\n\n*   `constructs` (`Construct[]`) — List of constructs, optionally with\n    `resolveAll`s\n*   `events` (`Event[]`) — List of events\n*   `context` (`TokenizeContext`) — Context used by `tokenize`\n\n###### Returns\n\n`Events[]` — Changed events.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-resolve-all.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-resolve-all\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-resolve-all.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-resolve-all\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[resolver]: https://github.com/micromark/micromark/blob/a571c09/packages/micromark-util-types/index.js#L219\n"},{"text":"# micromark-util-sanitize-uri\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to sanitize urls.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`sanitizeUri(url[, pattern])`](#sanitizeuriurl-pattern)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-sanitize-uri\n```\n\n## Use\n\n```js\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\nsanitizeUri('https://example.com/a&amp;b') // 'https://example.com/a&amp;amp;b'\nsanitizeUri('https://example.com/a%b') // 'https://example.com/a%25b'\nsanitizeUri('https://example.com/a%20b') // 'https://example.com/a%20b'\nsanitizeUri('https://example.com/👍') // 'https://example.com/%F0%9F%91%8D'\nsanitizeUri('https://example.com/', /^https?$/i) // 'https://example.com/'\nsanitizeUri('javascript:alert(1)', /^https?$/i) // ''\nsanitizeUri('./example.jpg', /^https?$/i) // './example.jpg'\nsanitizeUri('#a', /^https?$/i) // '#a'\n```\n\n## API\n\nThis module exports the following identifiers: `sanitizeUri`.\nThere is no default export.\n\n### `sanitizeUri(url[, pattern])`\n\nMake a value safe for injection as a URL.\n\nThis encodes unsafe characters with percent-encoding and skips already\nencoded sequences (see `normalizeUri` internally).\nFurther unsafe characters are encoded as character references (see\n`micromark-util-encode`).\n\nA regex of allowed protocols can be given, in which case the URL is sanitized.\nFor example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n`/^https?$/i` for `img[src]` (this is what `github.com` allows).\nIf the URL includes an unknown protocol (one not matched by `protocol`, such\nas a dangerous example, `javascript:`), the value is ignored.\n\n###### Parameters\n\n*   `url` (`string`) — URI to sanitize.\n*   `pattern` (`RegExp`, optional) — Allowed protocols.\n\n###### Returns\n\n`string` — Sanitized URI.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-sanitize-uri.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-sanitize-uri\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-sanitize-uri.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-sanitize-uri\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-subtokenize\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility to tokenize subtokens.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`subtokenize(events)`](#subtokenizeevents)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-subtokenize\n```\n\n## Use\n\n```js\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n```\n\n## API\n\nThis module exports the following identifiers: `subtokenize`.\nThere is no default export.\n\n### `subtokenize(events)`\n\nTokenize subcontent.\n\n###### Parameters\n\n*   `events` (`Event[]`) — List of events\n\n###### Returns\n\n`boolean` — Whether subtokens were found.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-subtokenize.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-subtokenize\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-subtokenize.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-subtokenize\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# micromark-util-symbol\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility with symbols.\n\nIt’s useful to reference these by name instead of value while developing.\n[`micromark-build`][micromark-build] compiles them away for production code.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-symbol\n```\n\n## Use\n\n```js\nimport {codes} from 'micromark-util-symbol/codes'\nimport {constants} from 'micromark-util-symbol/constants'\nimport {types} from 'micromark-util-symbol/types'\nimport {values} from 'micromark-util-symbol/values'\n\nconsole.log(codes.atSign) // 64\nconsole.log(constants.characterReferenceNamedSizeMax) // 31\nconsole.log(types.definitionDestinationRaw) // 'definitionDestinationRaw'\nconsole.log(values.atSign) // '@'\n```\n\n## API\n\nThis package has four entries in its export map: `micromark-util-symbol/codes`,\n`micromark-util-symbol/constants`, `micromark-util-symbol/types`,\n`micromark-util-symbol/values`.\n\nEach module exports an identifier with the same name (for example,\n`micromark-util-symbol/codes` has `codes`), which is an object mapping strings\nto other values.\n\nTake a peek at the code to learn more!\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-symbol.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-symbol\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-symbol.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-symbol\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[micromark-build]: https://github.com/micromark/micromark/tree/main/packages/micromark-build\n"},{"text":"# micromark-util-types\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nmicromark utility with a couple of typescript types.\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark-util-types\n```\n\n## Use\n\n```js\n/**\n * @typedef {import('micromark-util-types').Point} Point\n */\n```\n\n## API\n\nThis module exports no identifiers.\nThere is no default export.\n\nSee\n[the code](https://github.com/micromark/micromark/blob/main/packages/micromark-util-types/index.js)\nfor all about the exposed types.\n\n## Security\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark-util-encode.svg\n\n[downloads]: https://www.npmjs.com/package/micromark-util-encode\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark-util-encode.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark-util-encode\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n"},{"text":"# Release history\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n<details>\n  <summary><strong>Guiding Principles</strong></summary>\n\n*   Changelogs are for humans, not machines.\n*   There should be an entry for every single version.\n*   The same types of changes should be grouped.\n*   Versions and sections should be linkable.\n*   The latest version comes first.\n*   The release date of each versions is displayed.\n*   Mention whether you follow Semantic Versioning.\n\n</details>\n\n<details>\n  <summary><strong>Types of changes</strong></summary>\n\nChangelog entries are classified using the following labels *(from [keep-a-changelog](http://keepachangelog.com/)*):\n\n*   `Added` for new features.\n*   `Changed` for changes in existing functionality.\n*   `Deprecated` for soon-to-be removed features.\n*   `Removed` for now removed features.\n*   `Fixed` for any bug fixes.\n*   `Security` in case of vulnerabilities.\n\n</details>\n\n## \\[4.0.0] - 2019-03-20\n\n### Added\n\n*   Adds support for `options.onMatch`. See the readme for details\n*   Adds support for `options.onIgnore`. See the readme for details\n*   Adds support for `options.onResult`. See the readme for details\n\n### Breaking changes\n\n*   Require Node.js >= 8.6\n*   Removed support for passing an array of brace patterns to `micromatch.braces()`.\n*   To strictly enforce closing brackets (for `{`, `[`, and `(`), you must now use `strictBrackets=true` instead of `strictErrors`.\n*   `cache` - caching and all related options and methods have been removed\n*   `options.unixify` was renamed to `options.windows`\n*   `options.nodupes` Was removed. Duplicates are always removed by default. You can override this with custom behavior by using the `onMatch`, `onResult` and `onIgnore` functions.\n*   `options.snapdragon` was removed, as snapdragon is no longer used.\n*   `options.sourcemap` was removed, as snapdragon is no longer used, which provided sourcemap support.\n\n## \\[3.0.0] - 2017-04-11\n\nComplete overhaul, with 36,000+ new unit tests validated against actual output generated by Bash and minimatch. More specifically, 35,000+ of the tests:\n\n*   micromatch results are directly compared to bash results\n*   in rare cases, when micromatch and bash disagree, micromatch's results are compared to minimatch's results\n*   micromatch is much more accurate than minimatch, so there were cases where I had to make assumptions. I'll try to document these.\n\nThis refactor introduces a parser and compiler that are supersets of more granular parsers and compilers from other sub-modules. Each of these sub-modules has a singular responsibility and focuses on a certain type of matching that aligns with a specific part of the Bash \"expansion\" API.\n\nThese sub-modules work like plugins to seamlessly create the micromatch parser/compiler, so that strings are parsed in one pass, an [AST is created](https://gist.github.com/jonschlinkert/099c8914f56529f75bc757cc9e5e8e2a), then a new string is generated by the compiler.\n\nHere are those sub-modules with links to related prs on those modules if you want to see how they contribute to this code:\n\n[nanomatch](https://github.com/jonschlinkert/nanomatch) (new library) - glob expansion (`*`, `**`, `?` and `[...]`))\n[braces](https://github.com/jonschlinkert/braces/pull/10) - brace expansion (`{1..10}`, `{a,b,c}`, etc)\n[extglob](https://github.com/jonschlinkert/extglob/pull/5) - extended globs (`!(a|b)`, `@(!(foo|bar))`, etc)\n[expand-brackets](https://github.com/jonschlinkert/expand-brackets/pull/5) - POSIX character classes `[[:alpha:][:digit:]]`\n\n**Added**\n\n*   source map support (optionally created when using parse or compile - I have no idea what the use case is yet, but they come for free) (note that source maps are not generated for brace expansion at present, since the braces compiler uses a different strategy. I'll update if/when this changes).\n*   parser is exposed, so that implementors can customize or override specific micromatch parsers if necessary\n*   compiler is exposed, so that implementors can customize or override specific micromatch compilers if necessary\n\n**Fixed**\n\n*   more accurate matching (passes 100% of Bash 4.3 of the brace expansion and extglob unit tests, as well as all Bash glob tests that are relevant to node.js usage, all minimatch tests, all brace-expansion tests, and also passes a couple of tests that bash fails)\n*   even safer - micromatch has always generated optimized patterns so it's not subject to DoS exploits like minimatch (completely different than the regex DoS issue, minimatch and multimatch are still openly exposed to being used for DoS attacks), but more safeguards were built into this refactor\n\n**Changed**\n\n*   the public API of this library did not change in this version and should be safe to upgrade without changing implentor code. However, we have released this as a major version for the following reasons:\n    *   out of an abundance of caution due to the large amount of code changed in this release\n    *   we have improved parser accuracy to such a degree that some implementors using invalid globs have noted change in behavior. If this is the case for you, please check that you are using a valid glob expression before logging a bug with this library\n\n## \\[1.0.1] - 2016-12-12\n\n**Added**\n\n*   Support for windows path edge cases where backslashes are used in brackets or other unusual combinations.\n\n## \\[1.0.0] - 2016-12-12\n\nStable release.\n\n## \\[0.1.0] - 2016-10-08\n\nFirst release.\n\n[Unreleased]: https://github.com/jonschlinkert/micromatch/compare/0.1.0...HEAD\n\n[0.2.0]: https://github.com/jonschlinkert/micromatch/compare/0.1.0...0.2.0\n\n[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog\n"},{"text":"# micromatch [![NPM version](https://img.shields.io/npm/v/micromatch.svg?style=flat)](https://www.npmjs.com/package/micromatch) [![NPM monthly downloads](https://img.shields.io/npm/dm/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![NPM total downloads](https://img.shields.io/npm/dt/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![Linux Build Status](https://img.shields.io/travis/micromatch/micromatch.svg?style=flat\\&label=Travis)](https://travis-ci.org/micromatch/micromatch)\n\n> Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n*   [Install](#install)\n*   [Quickstart](#quickstart)\n*   [Why use micromatch?](#why-use-micromatch)\n    *   [Matching features](#matching-features)\n*   [Switching to micromatch](#switching-to-micromatch)\n    *   [From minimatch](#from-minimatch)\n    *   [From multimatch](#from-multimatch)\n*   [API](#api)\n*   [Options](#options)\n*   [Options Examples](#options-examples)\n    *   [options.basename](#optionsbasename)\n    *   [options.bash](#optionsbash)\n    *   [options.expandRange](#optionsexpandrange)\n    *   [options.format](#optionsformat)\n    *   [options.ignore](#optionsignore)\n    *   [options.matchBase](#optionsmatchbase)\n    *   [options.noextglob](#optionsnoextglob)\n    *   [options.nonegate](#optionsnonegate)\n    *   [options.noglobstar](#optionsnoglobstar)\n    *   [options.nonull](#optionsnonull)\n    *   [options.nullglob](#optionsnullglob)\n    *   [options.onIgnore](#optionsonignore)\n    *   [options.onMatch](#optionsonmatch)\n    *   [options.onResult](#optionsonresult)\n    *   [options.posixSlashes](#optionsposixslashes)\n    *   [options.unescape](#optionsunescape)\n*   [Extended globbing](#extended-globbing)\n    *   [Extglobs](#extglobs)\n    *   [Braces](#braces)\n    *   [Regex character classes](#regex-character-classes)\n    *   [Regex groups](#regex-groups)\n    *   [POSIX bracket expressions](#posix-bracket-expressions)\n*   [Notes](#notes)\n    *   [Bash 4.3 parity](#bash-43-parity)\n    *   [Backslashes](#backslashes)\n*   [Benchmarks](#benchmarks)\n    *   [Running benchmarks](#running-benchmarks)\n    *   [Latest results](#latest-results)\n*   [Contributing](#contributing)\n*   [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save micromatch\n```\n\n## Quickstart\n\n```js\nconst micromatch = require('micromatch');\n// micromatch(list, patterns[, options]);\n```\n\nThe [main export](#micromatch) takes a list of strings and one or more glob patterns:\n\n```js\nconsole.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['f*', 'b*'])) //=> ['foo', 'bar', 'baz']\nconsole.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['*', '!b*'])) //=> ['foo', 'qux']\n```\n\nUse [.isMatch()](#ismatch) to for boolean matching:\n\n```js\nconsole.log(micromatch.isMatch('foo', 'f*')) //=> true\nconsole.log(micromatch.isMatch('foo', ['b*', 'f*'])) //=> true\n```\n\n[Switching](#switching-to-micromatch) from minimatch and multimatch is easy!\n\n<br>\n\n## Why use micromatch?\n\n> micromatch is a [replacement](#switching-to-micromatch) for minimatch and multimatch\n\n*   Supports all of the same matching features as [minimatch](https://github.com/isaacs/minimatch) and [multimatch](https://github.com/sindresorhus/multimatch)\n*   More complete support for the Bash 4.3 specification than minimatch and multimatch. Micromatch passes *all of the spec tests* from bash, including some that bash still fails.\n*   **Fast & Performant** - Loads in about 5ms and performs [fast matches](#benchmarks).\n*   **Glob matching** - Using wildcards (`*` and `?`), globstars (`**`) for nested directories\n*   **[Advanced globbing](#extended-globbing)** - Supports [extglobs](#extglobs), [braces](#braces-1), and [POSIX brackets](#posix-bracket-expressions), and support for escaping special characters with `\\` or quotes.\n*   **Accurate** - Covers more scenarios [than minimatch](https://github.com/yarnpkg/yarn/pull/3339)\n*   **Well tested** - More than 5,000 [test assertions](./test)\n*   **Windows support** - More reliable windows support than minimatch and multimatch.\n*   **[Safe](https://github.com/micromatch/braces#braces-is-safe)** - Micromatch is not subject to DoS with brace patterns like minimatch and multimatch.\n\n### Matching features\n\n*   Support for multiple glob patterns (no need for wrappers like multimatch)\n*   Wildcards (`**`, `*.js`)\n*   Negation (`'!a/*.js'`, `'*!(b).js']`)\n*   [extglobs](#extglobs) (`+(x|y)`, `!(a|b)`)\n*   [POSIX character classes](#posix-bracket-expressions) (`[[:alpha:][:digit:]]`)\n*   [brace expansion](https://github.com/micromatch/braces) (`foo/{1..5}.md`, `bar/{a,b,c}.js`)\n*   regex character classes (`foo-[1-5].js`)\n*   regex logical \"or\" (`foo/(abc|xyz).js`)\n\nYou can mix and match these features to create whatever patterns you need!\n\n## Switching to micromatch\n\n*(There is one notable difference between micromatch and minimatch in regards to how backslashes are handled. See [the notes about backslashes](#backslashes) for more information.)*\n\n### From minimatch\n\nUse [micromatch.isMatch()](#ismatch) instead of `minimatch()`:\n\n```js\nconsole.log(micromatch.isMatch('foo', 'b*')); //=> false\n```\n\nUse [micromatch.match()](#match) instead of `minimatch.match()`:\n\n```js\nconsole.log(micromatch.match(['foo', 'bar'], 'b*')); //=> 'bar'\n```\n\n### From multimatch\n\nSame signature:\n\n```js\nconsole.log(micromatch(['foo', 'bar', 'baz'], ['f*', '*z'])); //=> ['foo', 'baz']\n```\n\n## API\n\n**Params**\n\n*   `list` **{String|Array<string>}**: List of strings to match.\n*   `patterns` **{String|Array<string>}**: One or more glob patterns to use for matching.\n*   `options` **{Object}**: See available [options](#options)\n*   `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm(list, patterns[, options]);\n\nconsole.log(mm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n### [.matcher](index.js#L104)\n\nReturns a matcher function from the given glob `pattern` and `options`. The returned function takes a string to match as its only argument and returns true if the string is a match.\n\n**Params**\n\n*   `pattern` **{String}**: Glob pattern\n*   `options` **{Object}**\n*   `returns` **{Function}**: Returns a matcher function.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.matcher(pattern[, options]);\n\nconst isMatch = mm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a')); //=> false\nconsole.log(isMatch('a.b')); //=> true\n```\n\n### [.isMatch](index.js#L123)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n*   `str` **{String}**: The string to test.\n*   `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n*   `[options]` **{Object}**: See available [options](#options).\n*   `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.isMatch(string, patterns[, options]);\n\nconsole.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\nconsole.log(mm.isMatch('a.a', 'b.*')); //=> false\n```\n\n### [.not](index.js#L148)\n\nReturns a list of strings that ***do not match any*** of the given `patterns`.\n\n**Params**\n\n*   `list` **{Array}**: Array of strings to match.\n*   `patterns` **{String|Array}**: One or more glob pattern to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Array}**: Returns an array of strings that **do not match** the given patterns.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.not(list, patterns[, options]);\n\nconsole.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n### [.contains](index.js#L188)\n\nReturns true if the given `string` contains the given pattern. Similar to [.isMatch](#isMatch) but the pattern can match any part of the string.\n\n**Params**\n\n*   `str` **{String}**: The string to match.\n*   `patterns` **{String|Array}**: Glob pattern to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Boolean}**: Returns true if any of the patterns matches any part of `str`.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\n// mm.contains(string, pattern[, options]);\n\nconsole.log(mm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(mm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matchKeys](index.js#L230)\n\nFilter the keys of the given object with the given `glob` pattern and `options`. Does not attempt to match nested keys. If you need this feature, use [glob-object](https://github.com/jonschlinkert/glob-object) instead.\n\n**Params**\n\n*   `object` **{Object}**: The object with keys to filter.\n*   `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Object}**: Returns an object with only keys that match the given patterns.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.matchKeys(object, patterns[, options]);\n\nconst obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(mm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n### [.some](index.js#L259)\n\nReturns true if some of the strings in the given `list` match any of the given glob `patterns`.\n\n**Params**\n\n*   `list` **{String|Array}**: The string or array of strings to test. Returns as soon as the first match is found.\n*   `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Boolean}**: Returns true if any `patterns` matches any of the strings in `list`\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.some(list, patterns[, options]);\n\nconsole.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.every](index.js#L295)\n\nReturns true if every string in the given `list` matches any of the given glob `patterns`.\n\n**Params**\n\n*   `list` **{String|Array}**: The string or array of strings to test.\n*   `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Boolean}**: Returns true if all `patterns` matches all of the strings in `list`\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.every(list, patterns[, options]);\n\nconsole.log(mm.every('foo.js', ['foo.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.all](index.js#L334)\n\nReturns true if **all** of the given `patterns` match the specified string.\n\n**Params**\n\n*   `str` **{String|Array}**: The string to test.\n*   `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.all(string, patterns[, options]);\n\nconsole.log(mm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(mm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n### [.capture](index.js#L361)\n\nReturns an array of matches captured by `pattern` in `string, or`null\\` if the pattern did not match.\n\n**Params**\n\n*   `glob` **{String}**: Glob pattern to use for matching.\n*   `input` **{String}**: String to match\n*   `options` **{Object}**: See available [options](#options) for changing how matches are performed\n*   `returns` **{Array|null}**: Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.capture(pattern, string[, options]);\n\nconsole.log(mm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(mm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L387)\n\nCreate a regular expression from the given glob `pattern`.\n\n**Params**\n\n*   `pattern` **{String}**: A glob pattern to convert to regex.\n*   `options` **{Object}**\n*   `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\n// mm.makeRe(pattern[, options]);\n\nconsole.log(mm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n### [.scan](index.js#L403)\n\nScan a glob pattern to separate the pattern into segments. Used by the [split](#split) method.\n\n**Params**\n\n*   `pattern` **{String}**\n*   `options` **{Object}**\n*   `returns` **{Object}**: Returns an object with\n\n**Example**\n\n```js\nconst mm = require('micromatch');\nconst state = mm.scan(pattern[, options]);\n```\n\n### [.parse](index.js#L419)\n\nParse a glob pattern to create the source string for a regular expression.\n\n**Params**\n\n*   `glob` **{String}**\n*   `options` **{Object}**\n*   `returns` **{Object}**: Returns an object with useful properties and output to be used as regex source string.\n\n**Example**\n\n```js\nconst mm = require('micromatch');\nconst state = mm(pattern[, options]);\n```\n\n### [.braces](index.js#L446)\n\nProcess the given brace `pattern`.\n\n**Params**\n\n*   `pattern` **{String}**: String with brace pattern to process.\n*   `options` **{Object}**: Any [options](#options) to change how expansion is performed. See the [braces](https://github.com/micromatch/braces) library for all available options.\n*   `returns` **{Array}**\n\n**Example**\n\n```js\nconst { braces } = require('micromatch');\nconsole.log(braces('foo/{a,b,c}/bar'));\n//=> [ 'foo/(a|b|c)/bar' ]\n\nconsole.log(braces('foo/{a,b,c}/bar', { expand: true }));\n//=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n```\n\n## Options\n\n| **Option** | **Type** | **Default value** | **Description** |\n| --- | --- | --- | --- |\n| `basename`            | `boolean`      | `false`     | If set, then patterns without slashes will be matched against the basename of the path if it contains slashes.  For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. |\n| `bash`                | `boolean`      | `false`     | Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (`**`). |\n| `capture`             | `boolean`      | `undefined` | Return regex matches in supporting methods. |\n| `contains`            | `boolean`      | `undefined` | Allows glob to match any part of the given string(s). |\n| `cwd`                 | `string`       | `process.cwd()` | Current working directory. Used by `picomatch.split()` |\n| `debug`               | `boolean`      | `undefined` | Debug regular expressions when an error is thrown. |\n| `dot`                 | `boolean`      | `false`     | Match dotfiles. Otherwise dotfiles are ignored unless a `.` is explicitly defined in the pattern. |\n| `expandRange`         | `function`     | `undefined` | Custom function for expanding ranges in brace patterns, such as `{a..z}`. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. This option is overridden by the `expandBrace` option. |\n| `failglob`            | `boolean`      | `false`     | Similar to the `failglob` behavior in Bash, throws an error when no matches are found. Based on the bash option of the same name. |\n| `fastpaths`           | `boolean`      | `true`      | To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to `false`. |\n| `flags`               | `boolean`      | `undefined` | Regex flags to use in the generated regex. If defined, the `nocase` option will be overridden. |\n| [format](#optionsformat) | `function` | `undefined` | Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. |\n| `ignore`              | `array\\|string` | `undefined` | One or more glob patterns for excluding strings that should not be matched from the result. |\n| `keepQuotes`          | `boolean`      | `false`     | Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes.  |\n| `literalBrackets`     | `boolean`      | `undefined` | When `true`, brackets in the glob pattern will be escaped so that only literal brackets will be matched. |\n| `lookbehinds`         | `boolean`      | `true`      | Support regex positive and negative lookbehinds. Note that you must be using Node 8.1.10 or higher to enable regex lookbehinds. |\n| `matchBase`           | `boolean`      | `false`     | Alias for `basename` |\n| `maxLength`           | `boolean`      | `65536`     | Limit the max length of the input string. An error is thrown if the input string is longer than this value. |\n| `nobrace`             | `boolean`      | `false`     | Disable brace matching, so that `{a,b}` and `{1..3}` would be treated as literal characters. |\n| `nobracket`           | `boolean`      | `undefined` | Disable matching with regex brackets. |\n| `nocase`              | `boolean`      | `false`     | Perform case-insensitive matching. Equivalent to the regex `i` flag. Note that this option is ignored when the `flags` option is defined. |\n| `nodupes`             | `boolean`      | `true`      | Deprecated, use `nounique` instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. |\n| `noext`               | `boolean`      | `false`     | Alias for `noextglob` |\n| `noextglob`           | `boolean`      | `false`     | Disable support for matching with [extglobs](#extglobs) (like `+(a\\|b)`) |\n| `noglobstar`          | `boolean`      | `false`     | Disable support for matching nested directories with globstars (`**`) |\n| `nonegate`            | `boolean`      | `false`     | Disable support for negating with leading `!` |\n| `noquantifiers`       | `boolean`      | `false`     | Disable support for regex quantifiers (like `a{1,2}`) and treat them as brace patterns to be expanded. |\n| [onIgnore](#optionsonIgnore) | `function` | `undefined` | Function to be called on ignored items. |\n| [onMatch](#optionsonMatch) | `function` | `undefined` | Function to be called on matched items. |\n| [onResult](#optionsonResult) | `function` | `undefined` | Function to be called on all items, regardless of whether or not they are matched or ignored. |\n| `posix`               | `boolean`      | `false`     | Support [POSIX character classes](#posix-bracket-expressions) (\"posix brackets\"). |\n| `posixSlashes`        | `boolean`      | `undefined` | Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself |\n| `prepend`             | `string`       | `undefined` | String to prepend to the generated regex used for matching. |\n| `regex`               | `boolean`      | `false`     | Use regular expression rules for `+` (instead of matching literal `+`), and for stars that follow closing parentheses or brackets (as in `)*` and `]*`). |\n| `strictBrackets`      | `boolean`      | `undefined` | Throw an error if brackets, braces, or parens are imbalanced. |\n| `strictSlashes`       | `boolean`      | `undefined` | When true, picomatch won't match trailing slashes with single stars. |\n| `unescape`            | `boolean`      | `undefined` | Remove preceding backslashes from escaped glob characters before creating the regular expression to perform matches. |\n| `unixify`             | `boolean`      | `undefined` | Alias for `posixSlashes`, for backwards compatitibility. |\n\n## Options Examples\n\n### options.basename\n\nAllow glob patterns without slashes to match a file path based on its basename. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `matchBase`.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n**Example**\n\n```js\nmicromatch(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nmicromatch(['a/b.js', 'a/c.md'], '*.js', { basename: true });\n//=> ['a/b.js']\n```\n\n### options.bash\n\nEnabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression **does not repeat the bracketed characters**. Instead, the star is treated the same as any other star.\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Example**\n\n```js\nconst files = ['abc', 'ajz'];\nconsole.log(micromatch(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(micromatch(files, '[a-c]*', { bash: false }));\n```\n\n### options.expandRange\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nCustom function for expanding ranges in brace patterns. The [fill-range](https://github.com/jonschlinkert/fill-range) library is ideal for this purpose, or you can use custom code to do whatever you need.\n\n**Example**\n\nThe following example shows how to create a glob that matches a numeric folder name between `01` and `25`, with leading zeros.\n\n```js\nconst fill = require('fill-range');\nconst regex = micromatch.makeRe('foo/{01..25}/bar', {\n  expandRange(a, b) {\n    return `(${fill(a, b, { toRegex: true })})`;\n  }\n});\n\nconsole.log(regex)\n//=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/\n\nconsole.log(regex.test('foo/00/bar')) // false\nconsole.log(regex.test('foo/01/bar')) // true\nconsole.log(regex.test('foo/10/bar')) // true\nconsole.log(regex.test('foo/22/bar')) // true\nconsole.log(regex.test('foo/25/bar')) // true\nconsole.log(regex.test('foo/26/bar')) // false\n```\n\n### options.format\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nCustom function for formatting strings before they're matched.\n\n**Example**\n\n```js\n// strip leading './' from strings\nconst format = str => str.replace(/^\\.\\//, '');\nconst isMatch = picomatch('foo/*.js', { format });\nconsole.log(isMatch('./foo/bar.js')) //=> true\n```\n\n### options.ignore\n\nString or array of glob patterns to match files to ignore.\n\n**Type**: `String|Array`\n\n**Default**: `undefined`\n\n```js\nconst isMatch = micromatch.matcher('*', { ignore: 'f*' });\nconsole.log(isMatch('foo')) //=> false\nconsole.log(isMatch('bar')) //=> true\nconsole.log(isMatch('baz')) //=> true\n```\n\n### options.matchBase\n\nAlias for [options.basename](#options-basename).\n\n### options.noextglob\n\nDisable extglob support, so that [extglobs](#extglobs) are regarded as literal characters.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Examples**\n\n```js\nconsole.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)'));\n//=> ['a/b', 'a/!(z)']\n\nconsole.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)', { noextglob: true }));\n//=> ['a/!(z)'] (matches only as literal characters)\n```\n\n### options.nonegate\n\nDisallow negation (`!`) patterns, and treat leading `!` as a literal character to match.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.noglobstar\n\nDisable matching with globstars (`**`).\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n```js\nmicromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nmicromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n### options.nonull\n\nAlias for [options.nullglob](#options-nullglob).\n\n### options.nullglob\n\nIf `true`, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nonull`.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.onIgnore\n\n```js\nconst onIgnore = ({ glob, regex, input, output }) => {\n  console.log({ glob, regex, input, output });\n  // { glob: '*', regex: /^(?:(?!\\.)(?=.)[^\\/]*?\\/?)$/, input: 'foo', output: 'foo' }\n};\n\nconst isMatch = micromatch.matcher('*', { onIgnore, ignore: 'f*' });\nisMatch('foo');\nisMatch('bar');\nisMatch('baz');\n```\n\n### options.onMatch\n\n```js\nconst onMatch = ({ glob, regex, input, output }) => {\n  console.log({ input, output });\n  // { input: 'some\\\\path', output: 'some/path' }\n  // { input: 'some\\\\path', output: 'some/path' }\n  // { input: 'some\\\\path', output: 'some/path' }\n};\n\nconst isMatch = micromatch.matcher('**', { onMatch, posixSlashes: true });\nisMatch('some\\\\path');\nisMatch('some\\\\path');\nisMatch('some\\\\path');\n```\n\n### options.onResult\n\n```js\nconst onResult = ({ glob, regex, input, output }) => {\n  console.log({ glob, regex, input, output });\n};\n\nconst isMatch = micromatch('*', { onResult, ignore: 'f*' });\nisMatch('foo');\nisMatch('bar');\nisMatch('baz');\n```\n\n### options.posixSlashes\n\nConvert path separators on returned files to posix/unix-style forward slashes. Aliased as `unixify` for backwards compatibility.\n\n**Type**: `Boolean`\n\n**Default**: `true` on windows, `false` everywhere else.\n\n**Example**\n\n```js\nconsole.log(micromatch.match(['a\\\\b\\\\c'], 'a/**'));\n//=> ['a/b/c']\n\nconsole.log(micromatch.match(['a\\\\b\\\\c'], { posixSlashes: false }));\n//=> ['a\\\\b\\\\c']\n```\n\n### options.unescape\n\nRemove backslashes from escaped glob characters before creating the regular expression to perform matches.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Example**\n\nIn this example we want to match a literal `*`:\n\n```js\nconsole.log(micromatch.match(['abc', 'a\\\\*c'], 'a\\\\*c'));\n//=> ['a\\\\*c']\n\nconsole.log(micromatch.match(['abc', 'a\\\\*c'], 'a\\\\*c', { unescape: true }));\n//=> ['a*c']\n```\n\n<br>\n<br>\n\n## Extended globbing\n\nMicromatch supports the following extended globbing features.\n\n### Extglobs\n\nExtended globbing, as described by the bash man page:\n\n| **pattern** | **regex equivalent** | **description** |\n| --- | --- | --- |\n| `?(pattern)` | `(pattern)?` | Matches zero or one occurrence of the given patterns |\n| `*(pattern)` | `(pattern)*` | Matches zero or more occurrences of the given patterns |\n| `+(pattern)` | `(pattern)+` | Matches one or more occurrences of the given patterns |\n| `@(pattern)` | `(pattern)` <sup>\\*</sup> | Matches one of the given patterns |\n| `!(pattern)` | N/A (equivalent regex is much more complicated) | Matches anything except one of the given patterns |\n\n<sup><strong>\\*</strong></sup> Note that `@` isn't a regex character.\n\n### Braces\n\nBrace patterns can be used to match specific ranges or sets of characters.\n\n**Example**\n\nThe pattern `{f,b}*/{1..3}/{b,q}*` would match any of following strings:\n\n    foo/1/bar\n    foo/2/bar\n    foo/3/bar\n    baz/1/qux\n    baz/2/qux\n    baz/3/qux\n\nVisit [braces](https://github.com/micromatch/braces) to see the full range of features and options related to brace expansion, or to create brace matching or expansion related issues.\n\n### Regex character classes\n\nGiven the list: `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n*   `[ac].js`: matches both `a` and `c`, returning `['a.js', 'c.js']`\n*   `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']`\n*   `a/[A-Z].js`: matches and uppercase letter, returning `['a/E.md']`\n\nLearn about [regex character classes](http://www.regular-expressions.info/charclass.html).\n\n### Regex groups\n\nGiven `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n*   `(a|c).js`: would match either `a` or `c`, returning `['a.js', 'c.js']`\n*   `(b|d).js`: would match either `b` or `d`, returning `['b.js', 'd.js']`\n*   `(b|[A-Z]).js`: would match either `b` or an uppercase letter, returning `['b.js', 'E.js']`\n\nAs with regex, parens can be nested, so patterns like `((a|b)|c)/b` will work. Although brace expansion might be friendlier to use, depending on preference.\n\n### POSIX bracket expressions\n\nPOSIX brackets are intended to be more user-friendly than regex character classes. This of course is in the eye of the beholder.\n\n**Example**\n\n```js\nconsole.log(micromatch.isMatch('a1', '[[:alpha:][:digit:]]')) //=> true\nconsole.log(micromatch.isMatch('a1', '[[:alpha:][:alpha:]]')) //=> false\n```\n\n***\n\n## Notes\n\n### Bash 4.3 parity\n\nWhenever possible matching behavior is based on behavior Bash 4.3, which is mostly consistent with minimatch.\n\nHowever, it's suprising how many edge cases and rabbit holes there are with glob matching, and since there is no real glob specification, and micromatch is more accurate than both Bash and minimatch, there are cases where best-guesses were made for behavior. In a few cases where Bash had no answers, we used wildmatch (used by git) as a fallback.\n\n### Backslashes\n\nThere is an important, notable difference between minimatch and micromatch *in regards to how backslashes are handled* in glob patterns.\n\n*   Micromatch exclusively and explicitly reserves backslashes for escaping characters in a glob pattern, even on windows, which is consistent with bash behavior. *More importantly, unescaping globs can result in unsafe regular expressions*.\n*   Minimatch converts all backslashes to forward slashes, which means you can't use backslashes to escape any characters in your glob patterns.\n\nWe made this decision for micromatch for a couple of reasons:\n\n*   Consistency with bash conventions.\n*   Glob patterns are not filepaths. They are a type of [regular language](https://en.wikipedia.org/wiki/Regular_language) that is converted to a JavaScript regular expression. Thus, when forward slashes are defined in a glob pattern, the resulting regular expression will match windows or POSIX path separators just fine.\n\n**A note about joining paths to globs**\n\nNote that when you pass something like `path.join('foo', '*')` to micromatch, you are creating a filepath and expecting it to still work as a glob pattern. This causes problems on windows, since the `path.sep` is `\\\\`.\n\nIn other words, since `\\\\` is reserved as an escape character in globs, on windows `path.join('foo', '*')` would result in `foo\\\\*`, which tells micromatch to match `*` as a literal character. This is the same behavior as bash.\n\nTo solve this, you might be inspired to do something like `'foo\\\\*'.replace(/\\\\/g, '/')`, but this causes another, potentially much more serious, problem.\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dependencies for running benchmarks:\n\n```sh\n$ cd bench && npm install\n```\n\nRun the benchmarks:\n\n```sh\n$ npm run bench\n```\n\n### Latest results\n\nAs of April 10, 2021 (longer bars are better):\n\n```sh\n# .makeRe star\n  micromatch x 2,232,802 ops/sec ±2.34% (89 runs sampled))\n  minimatch x 781,018 ops/sec ±6.74% (92 runs sampled))\n\n# .makeRe star; dot=true\n  micromatch x 1,863,453 ops/sec ±0.74% (93 runs sampled)\n  minimatch x 723,105 ops/sec ±0.75% (93 runs sampled)\n\n# .makeRe globstar\n  micromatch x 1,624,179 ops/sec ±2.22% (91 runs sampled)\n  minimatch x 1,117,230 ops/sec ±2.78% (86 runs sampled))\n\n# .makeRe globstars\n  micromatch x 1,658,642 ops/sec ±0.86% (92 runs sampled)\n  minimatch x 741,224 ops/sec ±1.24% (89 runs sampled))\n\n# .makeRe with leading star\n  micromatch x 1,525,014 ops/sec ±1.63% (90 runs sampled)\n  minimatch x 561,074 ops/sec ±3.07% (89 runs sampled)\n\n# .makeRe - braces\n  micromatch x 172,478 ops/sec ±2.37% (78 runs sampled)\n  minimatch x 96,087 ops/sec ±2.34% (88 runs sampled)))\n\n# .makeRe braces - range (expanded)\n  micromatch x 26,973 ops/sec ±0.84% (89 runs sampled)\n  minimatch x 3,023 ops/sec ±0.99% (90 runs sampled))\n\n# .makeRe braces - range (compiled)\n  micromatch x 152,892 ops/sec ±1.67% (83 runs sampled)\n  minimatch x 992 ops/sec ±3.50% (89 runs sampled)d))\n\n# .makeRe braces - nested ranges (expanded)\n  micromatch x 15,816 ops/sec ±13.05% (80 runs sampled)\n  minimatch x 2,953 ops/sec ±1.64% (91 runs sampled)\n\n# .makeRe braces - nested ranges (compiled)\n  micromatch x 110,881 ops/sec ±1.85% (82 runs sampled)\n  minimatch x 1,008 ops/sec ±1.51% (91 runs sampled)\n\n# .makeRe braces - set (compiled)\n  micromatch x 134,930 ops/sec ±3.54% (63 runs sampled))\n  minimatch x 43,242 ops/sec ±0.60% (93 runs sampled)\n\n# .makeRe braces - nested sets (compiled)\n  micromatch x 94,455 ops/sec ±1.74% (69 runs sampled))\n  minimatch x 27,720 ops/sec ±1.84% (93 runs sampled))\n```\n\n## Contributing\n\nAll contributions are welcome! Please read [the contributing guide](.github/contributing.md) to get started.\n\n**Bug reports**\n\nPlease create an issue if you encounter a bug or matching behavior that doesn't seem correct. If you find a matching-related issue, please:\n\n*   [research existing issues first](../../issues) (open and closed)\n*   visit the [GNU Bash documentation](https://www.gnu.org/software/bash/manual/) to see how Bash deals with the pattern\n*   visit the [minimatch](https://github.com/isaacs/minimatch) documentation to cross-check expected behavior in node.js\n*   if all else fails, since there is no real specification for globs we will probably need to discuss expected behavior and decide how to resolve it. which means any detail you can provide to help with this discussion would be greatly appreciated.\n\n**Platform issues**\n\nIt's important to us that micromatch work consistently on all platforms. If you encounter any platform-specific matching or path related issues, please let us know (pull requests are also greatly appreciated).\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n*   [braces](https://www.npmjs.com/package/braces): Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… [more](https://github.com/micromatch/braces) | [homepage](https://github.com/micromatch/braces \"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n*   [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/micromatch/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n*   [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n*   [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n*   [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/micromatch/nanomatch) | [homepage](https://github.com/micromatch/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributors\n\n| **Commits** | **Contributor** |\\\n| --- | --- |\\\n| 508 | [jonschlinkert](https://github.com/jonschlinkert) |\\\n| 12  | [es128](https://github.com/es128) |\\\n| 8   | [doowb](https://github.com/doowb) |\\\n| 6   | [paulmillr](https://github.com/paulmillr) |\\\n| 5   | [mrmlnc](https://github.com/mrmlnc) |\\\n| 4   | [danez](https://github.com/danez) |\\\n| 3   | [DrPizza](https://github.com/DrPizza) |\\\n| 2   | [TrySound](https://github.com/TrySound) |\\\n| 2   | [mceIdo](https://github.com/mceIdo) |\\\n| 2   | [Glazy](https://github.com/Glazy) |\\\n| 2   | [MartinKolarik](https://github.com/MartinKolarik) |\\\n| 2   | [Tvrqvoise](https://github.com/Tvrqvoise) |\\\n| 1   | [amilajack](https://github.com/amilajack) |\\\n| 1   | [Cslove](https://github.com/Cslove) |\\\n| 1   | [devongovett](https://github.com/devongovett) |\\\n| 1   | [DianeLooney](https://github.com/DianeLooney) |\\\n| 1   | [UltCombo](https://github.com/UltCombo) |\\\n| 1   | [frangio](https://github.com/frangio) |\\\n| 1   | [juszczykjakub](https://github.com/juszczykjakub) |\\\n| 1   | [muescha](https://github.com/muescha) |\\\n| 1   | [sebdeckers](https://github.com/sebdeckers) |\\\n| 1   | [tomByrer](https://github.com/tomByrer) |\\\n| 1   | [fidian](https://github.com/fidian) |\\\n| 1   | [simlu](https://github.com/simlu) |\\\n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\\\n| 1   | [yvele](https://github.com/yvele) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright © 2021, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 10, 2021.*\n"},{"text":"The MIT License (MIT)\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"},{"text":"# mri [![CI](https://github.com/lukeed/mri/workflows/CI/badge.svg?branch=master\\&event=push)](https://github.com/lukeed/mri/actions)\n\n> Quickly scan for CLI flags and arguments\n\nThis is a [fast](#benchmarks) and lightweight alternative to [`minimist`](https://github.com/substack/minimist) and [`yargs-parser`](https://github.com/yargs/yargs-parser).\n\nIt only exists because I find that I usually don't need most of what `minimist` and `yargs-parser` have to offer. However, `mri` is similar *enough* that it might function as a \"drop-in replacement\" for you, too!\n\nSee [Comparisons](#comparisons) for more info.\n\n## Install\n\n```sh\n$ npm install --save mri\n```\n\n## Usage\n\n```sh\n$ demo-cli --foo --bar=baz -mtv -- hello world\n```\n\n```js\nconst mri = require('mri');\n\nconst argv = process.argv.slice(2);\n\nmri(argv);\n//=> { _: ['hello', 'world'], foo:true, bar:'baz', m:true, t:true, v:true }\n\nmri(argv, { boolean:['bar'] });\n//=> { _: ['baz', 'hello', 'world'], foo:true, bar:true, m:true, t:true, v:true }\n\nmri(argv, {\n  alias: {\n    b: 'bar',\n    foo: ['f', 'fuz']\n  }\n});\n//=> { _: ['hello', 'world'], foo:true, f:true, fuz:true, b:'baz', bar:'baz', m:true, t:true, v:true }\n```\n\n## API\n\n### mri(args, options)\n\nReturn: `Object`\n\n#### args\n\nType: `Array`<br>\nDefault: `[]`\n\nAn array of arguments to parse. For CLI usage, send `process.argv.slice(2)`. See [`process.argv`](https://nodejs.org/docs/latest/api/process.html#process_process_argv) for info.\n\n#### options.alias\n\nType: `Object`<br>\nDefault: `{}`\n\nAn object of keys whose values are `String`s or `Array<String>` of aliases. These will be added to the parsed output with matching values.\n\n#### options.boolean\n\nType: `Array|String`<br>\nDefault: `[]`\n\nA single key (or array of keys) that should be parsed as `Boolean`s.\n\n#### options.default\n\nType: `Object`<br>\nDefault: `{}`\n\nAn `key:value` object of defaults. If a default is provided for a key, its type (`typeof`) will be used to cast parsed arguments.\n\n```js\nmri(['--foo', 'bar']);\n//=> { _:[], foo:'bar' }\n\nmri(['--foo', 'bar'], {\n  default: { foo:true, baz:'hello', bat:42 }\n});\n//=> { _:['bar'], foo:true, baz:'hello', bat:42 }\n```\n\n> **Note:** Because `--foo` has a default of `true`, its output is cast to a Boolean. This means that `foo=true`, making `'bar'` an extra argument (`_` key).\n\n#### options.string\n\nType: `Array|String`<br>\nDefault: `[]`\n\nA single key (or array of keys) that should be parsed as `String`s.\n\n#### options.unknown\n\nType: `Function`<br>\nDefault: `undefined`\n\nCallback that is run when a parsed flag has not been defined as a known key or alias. Its only parameter is the unknown flag itself; eg `--foobar` or `-f`.\n\nOnce an unknown flag is encountered, parsing will terminate, regardless of your return value.\n\n> **Note:** `mri` *only* checks for unknown flags if `options.unknown` **and** `options.alias` are populated. Otherwise, everything will be accepted.\n\n## Comparisons\n\n#### minimist\n\n*   `mri` is 5x faster (see [benchmarks](#benchmarks))\n*   Numerical values are cast as `Number`s when possible\n    *   A key (and its aliases) will always honor `opts.boolean` or `opts.string`\n*   Short flag groups are treated as `Boolean`s by default:\n    ```js\n    minimist(['-abc', 'hello']);\n    //=> { _:[], a:'', b:'', c:'hello' }\n\n    mri(['-abc', 'hello']);\n    //=> { _:[], a:true, b:true, c:'hello' }\n    ```\n*   The `opts.unknown` behaves differently:\n    *   Unlike `minimist`, `mri` will not continue continue parsing after encountering an unknown flag\n*   Missing `options`:\n    *   `opts.stopEarly`\n    *   `opts['--']`\n*   Ignores newlines (`\\n`) within args (see [test](https://github.com/substack/minimist/blob/master/test/parse.js#L69-L80))\n*   Ignores slashBreaks within args (see [test](https://github.com/substack/minimist/blob/master/test/parse.js#L147-L157))\n*   Ignores dot-nested flags (see [test](https://github.com/substack/minimist/blob/master/test/parse.js#L180-L197))\n\n#### yargs-parser\n\n*   `mri` is 40x faster (see [benchmarks](#benchmarks))\n*   Numerical values are cast as `Number`s when possible\n    *   A key (and its aliases) will always honor `opts.boolean` or `opts.string`\n*   Missing `options`:\n    *   `opts.array`\n    *   `opts.config`\n    *   `opts.coerce`\n    *   `opts.count`\n    *   `opts.envPrefix`\n    *   `opts.narg`\n    *   `opts.normalize`\n    *   `opts.configuration`\n    *   `opts.number`\n    *   `opts['--']`\n*   Missing [`parser.detailed()`](https://github.com/yargs/yargs-parser#requireyargs-parserdetailedargs-opts) method\n*   No [additional configuration](https://github.com/yargs/yargs-parser#configuration) object\n*   Added [`options.unknown`](#optionsunknown) feature\n\n## Benchmarks\n\n> Running Node.js v10.13.0\n\n    Load Times:\n      nopt          3.179ms\n      yargs-parser  2.137ms\n      minimist      0.746ms\n      mri           0.517ms\n\n    Benchmark:\n      minimist      x    328,747 ops/sec ±1.09% (89 runs sampled)\n      mri           x  1,622,801 ops/sec ±0.94% (92 runs sampled)\n      nopt          x    888,223 ops/sec ±0.22% (92 runs sampled)\n      yargs-parser  x     30,538 ops/sec ±0.81% (91 runs sampled)\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n"},{"text":"The MIT License (MIT)\n\nCopyright (c) 2016 Zeit, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"},{"text":"# ms\n\n[![Build Status](https://travis-ci.org/zeit/ms.svg?branch=master)](https://travis-ci.org/zeit/ms)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/zeit)\n\nUse this package to easily convert various time formats to milliseconds.\n\n## Examples\n\n```js\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n```\n\n### Convert from Milliseconds\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n### Time Format Written-Out\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n```\n\n## Features\n\n*   Works both in [Node.js](https://nodejs.org) and in the browser\n*   If a number is supplied to `ms`, a string with a unit is returned\n*   If a string that contains the number is supplied, it returns it as a number (e.g.: it returns `100` for `'100'`)\n*   If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned\n\n## Related Packages\n\n*   [ms.macro](https://github.com/knpwrs/ms.macro) - Run `ms` as a macro at build-time.\n\n## Caught a Bug?\n\n1.  [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2.  Link the package to the global module directory: `npm link`\n3.  Within the module you want to test your local development instance of ms, just link it to the dependencies: `npm link ms`. Instead of the default one from npm, Node.js will now use your clone of ms!\n\nAs always, you can run the tests using: `npm test`\n"},{"text":"# path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type)\n\n> Check if a path is a file, directory, or symlink\n\n## Install\n\n    $ npm install path-type\n\n## Usage\n\n```js\nconst {isFile} = require('path-type');\n\n(async () => {\n\tconsole.log(await isFile('package.json'));\n\t//=> true\n})();\n```\n\n## API\n\n### isFile(path)\n\nCheck whether the passed `path` is a file.\n\nReturns a `Promise<boolean>`.\n\n#### path\n\nType: `string`\n\nThe path to check.\n\n### isDirectory(path)\n\nCheck whether the passed `path` is a directory.\n\nReturns a `Promise<boolean>`.\n\n### isSymlink(path)\n\nCheck whether the passed `path` is a symlink.\n\nReturns a `Promise<boolean>`.\n\n### isFileSync(path)\n\nSynchronously check whether the passed `path` is a file.\n\nReturns a `boolean`.\n\n### isDirectorySync(path)\n\nSynchronously check whether the passed `path` is a directory.\n\nReturns a `boolean`.\n\n### isSymlinkSync(path)\n\nSynchronously check whether the passed `path` is a symlink.\n\nReturns a `boolean`.\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n"},{"text":"# Release history\n\n**All notable changes to this project will be documented in this file.**\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n<details>\n  <summary><strong>Guiding Principles</strong></summary>\n\n*   Changelogs are for humans, not machines.\n*   There should be an entry for every single version.\n*   The same types of changes should be grouped.\n*   Versions and sections should be linkable.\n*   The latest version comes first.\n*   The release date of each versions is displayed.\n*   Mention whether you follow Semantic Versioning.\n\n</details>\n\n<details>\n  <summary><strong>Types of changes</strong></summary>\n\nChangelog entries are classified using the following labels *(from [keep-a-changelog](http://keepachangelog.com/)*):\n\n*   `Added` for new features.\n*   `Changed` for changes in existing functionality.\n*   `Deprecated` for soon-to-be removed features.\n*   `Removed` for now removed features.\n*   `Fixed` for any bug fixes.\n*   `Security` in case of vulnerabilities.\n\n</details>\n\n## 2.3.1 (2022-01-02)\n\n### Fixed\n\n*   Fixes bug when a pattern containing an expression after the closing parenthesis (`/!(*.d).{ts,tsx}`) was incorrectly converted to regexp ([9f241ef](https://github.com/micromatch/picomatch/commit/9f241ef)).\n\n### Changed\n\n*   Some documentation improvements ([f81d236](https://github.com/micromatch/picomatch/commit/f81d236), [421e0e7](https://github.com/micromatch/picomatch/commit/421e0e7)).\n\n## 2.3.0 (2021-05-21)\n\n### Fixed\n\n*   Fixes bug where file names with two dots were not being matched consistently with negation extglobs containing a star ([56083ef](https://github.com/micromatch/picomatch/commit/56083ef))\n\n## 2.2.3 (2021-04-10)\n\n### Fixed\n\n*   Do not skip pattern seperator for square brackets ([fb08a30](https://github.com/micromatch/picomatch/commit/fb08a30)).\n*   Set negatedExtGlob also if it does not span the whole pattern ([032e3f5](https://github.com/micromatch/picomatch/commit/032e3f5)).\n\n## 2.2.2 (2020-03-21)\n\n### Fixed\n\n*   Correctly handle parts of the pattern after parentheses in the `scan` method ([e15b920](https://github.com/micromatch/picomatch/commit/e15b920)).\n\n## 2.2.1 (2020-01-04)\n\n*   Fixes [#49](https://github.com/micromatch/picomatch/issues/49), so that braces with no sets or ranges are now propertly treated as literals.\n\n## 2.2.0 (2020-01-04)\n\n*   Disable fastpaths mode for the parse method ([5b8d33f](https://github.com/micromatch/picomatch/commit/5b8d33f))\n*   Add `tokens`, `slashes`, and `parts` to the object returned by `picomatch.scan()`.\n\n## 2.1.0 (2019-10-31)\n\n*   add benchmarks for scan ([4793b92](https://github.com/micromatch/picomatch/commit/4793b92))\n*   Add eslint object-curly-spacing rule ([707c650](https://github.com/micromatch/picomatch/commit/707c650))\n*   Add prefer-const eslint rule ([5c7501c](https://github.com/micromatch/picomatch/commit/5c7501c))\n*   Add support for nonegate in scan API ([275c9b9](https://github.com/micromatch/picomatch/commit/275c9b9))\n*   Change lets to consts. Move root import up. ([4840625](https://github.com/micromatch/picomatch/commit/4840625))\n*   closes https://github.com/micromatch/picomatch/issues/21 ([766bcb0](https://github.com/micromatch/picomatch/commit/766bcb0))\n*   Fix \"Extglobs\" table in readme ([eb19da8](https://github.com/micromatch/picomatch/commit/eb19da8))\n*   fixes https://github.com/micromatch/picomatch/issues/20 ([9caca07](https://github.com/micromatch/picomatch/commit/9caca07))\n*   fixes https://github.com/micromatch/picomatch/issues/26 ([fa58f45](https://github.com/micromatch/picomatch/commit/fa58f45))\n*   Lint test ([d433a34](https://github.com/micromatch/picomatch/commit/d433a34))\n*   lint unit tests ([0159b55](https://github.com/micromatch/picomatch/commit/0159b55))\n*   Make scan work with noext ([6c02e03](https://github.com/micromatch/picomatch/commit/6c02e03))\n*   minor linting ([c2a2b87](https://github.com/micromatch/picomatch/commit/c2a2b87))\n*   minor parser improvements ([197671d](https://github.com/micromatch/picomatch/commit/197671d))\n*   remove eslint since it... ([07876fa](https://github.com/micromatch/picomatch/commit/07876fa))\n*   remove funding file ([8ebe96d](https://github.com/micromatch/picomatch/commit/8ebe96d))\n*   Remove unused funks ([cbc6d54](https://github.com/micromatch/picomatch/commit/cbc6d54))\n*   Run eslint during pretest, fix existing eslint findings ([0682367](https://github.com/micromatch/picomatch/commit/0682367))\n*   support `noparen` in scan ([3d37569](https://github.com/micromatch/picomatch/commit/3d37569))\n*   update changelog ([7b34e77](https://github.com/micromatch/picomatch/commit/7b34e77))\n*   update travis ([777f038](https://github.com/micromatch/picomatch/commit/777f038))\n*   Use eslint-disable-next-line instead of eslint-disable ([4e7c1fd](https://github.com/micromatch/picomatch/commit/4e7c1fd))\n\n## 2.0.7 (2019-05-14)\n\n*   2.0.7 ([9eb9a71](https://github.com/micromatch/picomatch/commit/9eb9a71))\n*   supports lookbehinds ([1f63f7e](https://github.com/micromatch/picomatch/commit/1f63f7e))\n*   update .verb.md file with typo change ([2741279](https://github.com/micromatch/picomatch/commit/2741279))\n*   fix: typo in README ([0753e44](https://github.com/micromatch/picomatch/commit/0753e44))\n\n## 2.0.4 (2019-04-10)\n\n### Fixed\n\n*   Readme link [fixed](https://github.com/micromatch/picomatch/pull/13/commits/a96ab3aa2b11b6861c23289964613d85563b05df) by @danez.\n*   `options.capture` now works as expected when fastpaths are enabled. See https://github.com/micromatch/picomatch/pull/12/commits/26aefd71f1cfaf95c37f1c1fcab68a693b037304. Thanks to @DrPizza.\n\n## 2.0.0 (2019-04-10)\n\n### Added\n\n*   Adds support for `options.onIgnore`. See the readme for details\n*   Adds support for `options.onResult`. See the readme for details\n\n### Breaking changes\n\n*   The unixify option was renamed to `windows`\n*   caching and all related options and methods have been removed\n\n## 1.0.0 (2018-11-05)\n\n*   adds `.onMatch` option\n*   improvements to `.scan` method\n*   numerous improvements and optimizations for matching and parsing\n*   better windows path handling\n\n## 0.1.0 - 2017-04-13\n\nFirst release.\n\n[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog\n"},{"text":"<h1 align=\"center\">Picomatch</h1>\n\n<p align=\"center\">\n<a href=\"https://npmjs.org/package/picomatch\">\n<img src=\"https://img.shields.io/npm/v/picomatch.svg\" alt=\"version\">\n</a>\n<a href=\"https://github.com/micromatch/picomatch/actions?workflow=Tests\">\n<img src=\"https://github.com/micromatch/picomatch/workflows/Tests/badge.svg\" alt=\"test status\">\n</a>\n<a href=\"https://coveralls.io/github/micromatch/picomatch\">\n<img src=\"https://img.shields.io/coveralls/github/micromatch/picomatch/master.svg\" alt=\"coverage status\">\n</a>\n<a href=\"https://npmjs.org/package/picomatch\">\n<img src=\"https://img.shields.io/npm/dm/picomatch.svg\" alt=\"downloads\">\n</a>\n</p>\n\n<br>\n<br>\n\n<p align=\"center\">\n<strong>Blazing fast and accurate glob matcher written in JavaScript.</strong></br>\n<em>No dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions.</em>\n</p>\n\n<br>\n<br>\n\n## Why picomatch?\n\n*   **Lightweight** - No dependencies\n*   **Minimal** - Tiny API surface. Main export is a function that takes a glob pattern and returns a matcher function.\n*   **Fast** - Loads in about 2ms (that's several times faster than a [single frame of a HD movie](http://www.endmemo.com/sconvert/framespersecondframespermillisecond.php) at 60fps)\n*   **Performant** - Use the returned matcher function to speed up repeat matching (like when watching files)\n*   **Accurate matching** - Using wildcards (`*` and `?`), globstars (`**`) for nested directories, [advanced globbing](#advanced-globbing) with extglobs, braces, and POSIX brackets, and support for escaping special characters with `\\` or quotes.\n*   **Well tested** - Thousands of unit tests\n\nSee the [library comparison](#library-comparisons) to other libraries.\n\n<br>\n<br>\n\n## Table of Contents\n\n<details><summary> Click to expand </summary>\n\n*   [Install](#install)\n*   [Usage](#usage)\n*   [API](#api)\n    *   [picomatch](#picomatch)\n    *   [.test](#test)\n    *   [.matchBase](#matchbase)\n    *   [.isMatch](#ismatch)\n    *   [.parse](#parse)\n    *   [.scan](#scan)\n    *   [.compileRe](#compilere)\n    *   [.makeRe](#makere)\n    *   [.toRegex](#toregex)\n*   [Options](#options)\n    *   [Picomatch options](#picomatch-options)\n    *   [Scan Options](#scan-options)\n    *   [Options Examples](#options-examples)\n*   [Globbing features](#globbing-features)\n    *   [Basic globbing](#basic-globbing)\n    *   [Advanced globbing](#advanced-globbing)\n    *   [Braces](#braces)\n    *   [Matching special characters as literals](#matching-special-characters-as-literals)\n*   [Library Comparisons](#library-comparisons)\n*   [Benchmarks](#benchmarks)\n*   [Philosophies](#philosophies)\n*   [About](#about)\n    *   [Author](#author)\n    *   [License](#license)\n\n*(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))*\n\n</details>\n\n<br>\n<br>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\nnpm install --save picomatch\n```\n\n<br>\n\n## Usage\n\nThe main export is a function that takes a glob pattern and an options object and returns a function for matching strings.\n\n```js\nconst pm = require('picomatch');\nconst isMatch = pm('*.js');\n\nconsole.log(isMatch('abcd')); //=> false\nconsole.log(isMatch('a.js')); //=> true\nconsole.log(isMatch('a.md')); //=> false\nconsole.log(isMatch('a/b.js')); //=> false\n```\n\n<br>\n\n## API\n\n### [picomatch](lib/picomatch.js#L32)\n\nCreates a matcher function from one or more glob patterns. The returned function takes a string to match as its first argument, and returns true if the string is a match. The returned matcher function also takes a boolean as the second argument that, when true, returns an object with additional information.\n\n**Params**\n\n*   `globs` **{String|Array}**: One or more glob patterns.\n*   `options` **{Object=}**\n*   `returns` **{Function=}**: Returns a matcher function.\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch(glob[, options]);\n\nconst isMatch = picomatch('*.!(*a)');\nconsole.log(isMatch('a.a')); //=> false\nconsole.log(isMatch('a.b')); //=> true\n```\n\n### [.test](lib/picomatch.js#L117)\n\nTest `input` with the given `regex`. This is used by the main `picomatch()` function to test the input string.\n\n**Params**\n\n*   `input` **{String}**: String to test.\n*   `regex` **{RegExp}**\n*   `returns` **{Object}**: Returns an object with matching info.\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch.test(input, regex[, options]);\n\nconsole.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n// { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n```\n\n### [.matchBase](lib/picomatch.js#L161)\n\nMatch the basename of a filepath.\n\n**Params**\n\n*   `input` **{String}**: String to test.\n*   `glob` **{RegExp|String}**: Glob pattern or regex created by [.makeRe](#makeRe).\n*   `returns` **{Boolean}**\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch.matchBase(input, glob[, options]);\nconsole.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n```\n\n### [.isMatch](lib/picomatch.js#L183)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n*   **{String|Array}**: str The string to test.\n*   **{String|Array}**: patterns One or more glob patterns to use for matching.\n*   **{Object}**: See available [options](#options).\n*   `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch.isMatch(string, patterns[, options]);\n\nconsole.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\nconsole.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n```\n\n### [.parse](lib/picomatch.js#L199)\n\nParse a glob pattern to create the source string for a regular expression.\n\n**Params**\n\n*   `pattern` **{String}**\n*   `options` **{Object}**\n*   `returns` **{Object}**: Returns an object with useful properties and output to be used as a regex source string.\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\nconst result = picomatch.parse(pattern[, options]);\n```\n\n### [.scan](lib/picomatch.js#L231)\n\nScan a glob pattern to separate the pattern into segments.\n\n**Params**\n\n*   `input` **{String}**: Glob pattern to scan.\n*   `options` **{Object}**\n*   `returns` **{Object}**: Returns an object with\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch.scan(input[, options]);\n\nconst result = picomatch.scan('!./foo/*.js');\nconsole.log(result);\n{ prefix: '!./',\n  input: '!./foo/*.js',\n  start: 3,\n  base: 'foo',\n  glob: '*.js',\n  isBrace: false,\n  isBracket: false,\n  isGlob: true,\n  isExtglob: false,\n  isGlobstar: false,\n  negated: true }\n```\n\n### [.compileRe](lib/picomatch.js#L245)\n\nCompile a regular expression from the `state` object returned by the\n[parse()](#parse) method.\n\n**Params**\n\n*   `state` **{Object}**\n*   `options` **{Object}**\n*   `returnOutput` **{Boolean}**: Intended for implementors, this argument allows you to return the raw output from the parser.\n*   `returnState` **{Boolean}**: Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n*   `returns` **{RegExp}**\n\n### [.makeRe](lib/picomatch.js#L286)\n\nCreate a regular expression from a parsed glob pattern.\n\n**Params**\n\n*   `state` **{String}**: The object returned from the `.parse` method.\n*   `options` **{Object}**\n*   `returnOutput` **{Boolean}**: Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n*   `returnState` **{Boolean}**: Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n*   `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\nconst state = picomatch.parse('*.js');\n// picomatch.compileRe(state[, options]);\n\nconsole.log(picomatch.compileRe(state));\n//=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n```\n\n### [.toRegex](lib/picomatch.js#L321)\n\nCreate a regular expression from the given regex source string.\n\n**Params**\n\n*   `source` **{String}**: Regular expression source string.\n*   `options` **{Object}**\n*   `returns` **{RegExp}**\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\n// picomatch.toRegex(source[, options]);\n\nconst { output } = picomatch.parse('*.js');\nconsole.log(picomatch.toRegex(output));\n//=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n```\n\n<br>\n\n## Options\n\n### Picomatch options\n\nThe following options may be used with the main `picomatch()` function or any of the methods on the picomatch API.\n\n| **Option** | **Type** | **Default value** | **Description** |\n| --- | --- | --- | --- |\n| `basename`            | `boolean`      | `false`     | If set, then patterns without slashes will be matched against the basename of the path if it contains slashes.  For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`. |\n| `bash`                | `boolean`      | `false`     | Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (`**`). |\n| `capture`             | `boolean`      | `undefined` | Return regex matches in supporting methods. |\n| `contains`            | `boolean`      | `undefined` | Allows glob to match any part of the given string(s). |\n| `cwd`                 | `string`       | `process.cwd()` | Current working directory. Used by `picomatch.split()` |\n| `debug`               | `boolean`      | `undefined` | Debug regular expressions when an error is thrown. |\n| `dot`                 | `boolean`      | `false`     | Enable dotfile matching. By default, dotfiles are ignored unless a `.` is explicitly defined in the pattern, or `options.dot` is true |\n| `expandRange`         | `function`     | `undefined` | Custom function for expanding ranges in brace patterns, such as `{a..z}`. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. |\n| `failglob`            | `boolean`      | `false`     | Throws an error if no matches are found. Based on the bash option of the same name. |\n| `fastpaths`           | `boolean`      | `true`      | To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to `false`. |\n| `flags`               | `string`      | `undefined` | Regex flags to use in the generated regex. If defined, the `nocase` option will be overridden. |\n| [format](#optionsformat) | `function` | `undefined` | Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. |\n| `ignore`              | `array\\|string` | `undefined` | One or more glob patterns for excluding strings that should not be matched from the result. |\n| `keepQuotes`          | `boolean`      | `false`     | Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes.  |\n| `literalBrackets`     | `boolean`      | `undefined` | When `true`, brackets in the glob pattern will be escaped so that only literal brackets will be matched. |\n| `matchBase`           | `boolean`      | `false`     | Alias for `basename` |\n| `maxLength`           | `boolean`      | `65536`     | Limit the max length of the input string. An error is thrown if the input string is longer than this value. |\n| `nobrace`             | `boolean`      | `false`     | Disable brace matching, so that `{a,b}` and `{1..3}` would be treated as literal characters. |\n| `nobracket`           | `boolean`      | `undefined` | Disable matching with regex brackets. |\n| `nocase`              | `boolean`      | `false`     | Make matching case-insensitive. Equivalent to the regex `i` flag. Note that this option is overridden by the `flags` option. |\n| `nodupes`             | `boolean`      | `true`      | Deprecated, use `nounique` instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. |\n| `noext`               | `boolean`      | `false`     | Alias for `noextglob` |\n| `noextglob`           | `boolean`      | `false`     | Disable support for matching with extglobs (like `+(a\\|b)`) |\n| `noglobstar`          | `boolean`      | `false`     | Disable support for matching nested directories with globstars (`**`) |\n| `nonegate`            | `boolean`      | `false`     | Disable support for negating with leading `!` |\n| `noquantifiers`       | `boolean`      | `false`     | Disable support for regex quantifiers (like `a{1,2}`) and treat them as brace patterns to be expanded. |\n| [onIgnore](#optionsonIgnore) | `function` | `undefined` | Function to be called on ignored items. |\n| [onMatch](#optionsonMatch) | `function` | `undefined` | Function to be called on matched items. |\n| [onResult](#optionsonResult) | `function` | `undefined` | Function to be called on all items, regardless of whether or not they are matched or ignored. |\n| `posix`               | `boolean`      | `false`     | Support POSIX character classes (\"posix brackets\"). |\n| `posixSlashes`        | `boolean`      | `undefined` | Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself |\n| `prepend`             | `boolean`      | `undefined` | String to prepend to the generated regex used for matching. |\n| `regex`               | `boolean`      | `false`     | Use regular expression rules for `+` (instead of matching literal `+`), and for stars that follow closing parentheses or brackets (as in `)*` and `]*`). |\n| `strictBrackets`      | `boolean`      | `undefined` | Throw an error if brackets, braces, or parens are imbalanced. |\n| `strictSlashes`       | `boolean`      | `undefined` | When true, picomatch won't match trailing slashes with single stars. |\n| `unescape`            | `boolean`      | `undefined` | Remove backslashes preceding escaped characters in the glob pattern. By default, backslashes are retained. |\n| `unixify`             | `boolean`      | `undefined` | Alias for `posixSlashes`, for backwards compatibility. |\n\npicomatch has automatic detection for regex positive and negative lookbehinds. If the pattern contains a negative lookbehind, you must be using Node.js >= 8.10 or else picomatch will throw an error.\n\n### Scan Options\n\nIn addition to the main [picomatch options](#picomatch-options), the following options may also be used with the [.scan](#scan) method.\n\n| **Option** | **Type** | **Default value** | **Description** |\n| --- | --- | --- | --- |\n| `tokens` | `boolean` | `false` | When `true`, the returned object will include an array of tokens (objects), representing each path \"segment\" in the scanned glob pattern |\n| `parts` | `boolean` | `false` | When `true`, the returned object will include an array of strings representing each path \"segment\" in the scanned glob pattern. This is automatically enabled when `options.tokens` is true |\n\n**Example**\n\n```js\nconst picomatch = require('picomatch');\nconst result = picomatch.scan('!./foo/*.js', { tokens: true });\nconsole.log(result);\n// {\n//   prefix: '!./',\n//   input: '!./foo/*.js',\n//   start: 3,\n//   base: 'foo',\n//   glob: '*.js',\n//   isBrace: false,\n//   isBracket: false,\n//   isGlob: true,\n//   isExtglob: false,\n//   isGlobstar: false,\n//   negated: true,\n//   maxDepth: 2,\n//   tokens: [\n//     { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true },\n//     { value: 'foo', depth: 1, isGlob: false },\n//     { value: '*.js', depth: 1, isGlob: true }\n//   ],\n//   slashes: [ 2, 6 ],\n//   parts: [ 'foo', '*.js' ]\n// }\n```\n\n<br>\n\n### Options Examples\n\n#### options.expandRange\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nCustom function for expanding ranges in brace patterns. The [fill-range](https://github.com/jonschlinkert/fill-range) library is ideal for this purpose, or you can use custom code to do whatever you need.\n\n**Example**\n\nThe following example shows how to create a glob that matches a folder\n\n```js\nconst fill = require('fill-range');\nconst regex = pm.makeRe('foo/{01..25}/bar', {\n  expandRange(a, b) {\n    return `(${fill(a, b, { toRegex: true })})`;\n  }\n});\n\nconsole.log(regex);\n//=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/\n\nconsole.log(regex.test('foo/00/bar'))  // false\nconsole.log(regex.test('foo/01/bar'))  // true\nconsole.log(regex.test('foo/10/bar')) // true\nconsole.log(regex.test('foo/22/bar')) // true\nconsole.log(regex.test('foo/25/bar')) // true\nconsole.log(regex.test('foo/26/bar')) // false\n```\n\n#### options.format\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nCustom function for formatting strings before they're matched.\n\n**Example**\n\n```js\n// strip leading './' from strings\nconst format = str => str.replace(/^\\.\\//, '');\nconst isMatch = picomatch('foo/*.js', { format });\nconsole.log(isMatch('./foo/bar.js')); //=> true\n```\n\n#### options.onMatch\n\n```js\nconst onMatch = ({ glob, regex, input, output }) => {\n  console.log({ glob, regex, input, output });\n};\n\nconst isMatch = picomatch('*', { onMatch });\nisMatch('foo');\nisMatch('bar');\nisMatch('baz');\n```\n\n#### options.onIgnore\n\n```js\nconst onIgnore = ({ glob, regex, input, output }) => {\n  console.log({ glob, regex, input, output });\n};\n\nconst isMatch = picomatch('*', { onIgnore, ignore: 'f*' });\nisMatch('foo');\nisMatch('bar');\nisMatch('baz');\n```\n\n#### options.onResult\n\n```js\nconst onResult = ({ glob, regex, input, output }) => {\n  console.log({ glob, regex, input, output });\n};\n\nconst isMatch = picomatch('*', { onResult, ignore: 'f*' });\nisMatch('foo');\nisMatch('bar');\nisMatch('baz');\n```\n\n<br>\n<br>\n\n## Globbing features\n\n*   [Basic globbing](#basic-globbing) (Wildcard matching)\n*   [Advanced globbing](#advanced-globbing) (extglobs, posix brackets, brace matching)\n\n### Basic globbing\n\n| **Character** | **Description** |\n| --- | --- |\n| `*` | Matches any character zero or more times, excluding path separators. Does *not match* path separators or hidden files or directories (\"dotfiles\"), unless explicitly enabled by setting the `dot` option to `true`. |\n| `**` | Matches any character zero or more times, including path separators. Note that `**` will only match path separators (`/`, and `\\\\` on Windows) when they are the only characters in a path segment. Thus, `foo**/bar` is equivalent to `foo*/bar`, and `foo/a**b/bar` is equivalent to `foo/a*b/bar`, and *more than two* consecutive stars in a glob path segment are regarded as *a single star*. Thus, `foo/***/bar` is equivalent to `foo/*/bar`. |\n| `?` | Matches any character excluding path separators one time. Does *not match* path separators or leading dots.  |\n| `[abc]` | Matches any characters inside the brackets. For example, `[abc]` would match the characters `a`, `b` or `c`, and nothing else. |\n\n#### Matching behavior vs. Bash\n\nPicomatch's matching features and expected results in unit tests are based on Bash's unit tests and the Bash 4.3 specification, with the following exceptions:\n\n*   Bash will match `foo/bar/baz` with `*`. Picomatch only matches nested directories with `**`.\n*   Bash greedily matches with negated extglobs. For example, Bash 4.3 says that `!(foo)*` should match `foo` and `foobar`, since the trailing `*` bracktracks to match the preceding pattern. This is very memory-inefficient, and IMHO, also incorrect. Picomatch would return `false` for both `foo` and `foobar`.\n\n<br>\n\n### Advanced globbing\n\n*   [extglobs](#extglobs)\n*   [POSIX brackets](#posix-brackets)\n*   [Braces](#brace-expansion)\n\n#### Extglobs\n\n| **Pattern** | **Description** |\n| --- | --- |\n| `@(pattern)` | Match *only one* consecutive occurrence of `pattern` |\n| `*(pattern)` | Match *zero or more* consecutive occurrences of `pattern` |\n| `+(pattern)` | Match *one or more* consecutive occurrences of `pattern` |\n| `?(pattern)` | Match *zero or **one*** consecutive occurrences of `pattern` |\n| `!(pattern)` | Match *anything but* `pattern` |\n\n**Examples**\n\n```js\nconst pm = require('picomatch');\n\n// *(pattern) matches ZERO or more of \"pattern\"\nconsole.log(pm.isMatch('a', 'a*(z)')); // true\nconsole.log(pm.isMatch('az', 'a*(z)')); // true\nconsole.log(pm.isMatch('azzz', 'a*(z)')); // true\n\n// +(pattern) matches ONE or more of \"pattern\"\nconsole.log(pm.isMatch('a', 'a*(z)')); // true\nconsole.log(pm.isMatch('az', 'a*(z)')); // true\nconsole.log(pm.isMatch('azzz', 'a*(z)')); // true\n\n// supports multiple extglobs\nconsole.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false\n\n// supports nested extglobs\nconsole.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true\n```\n\n#### POSIX brackets\n\nPOSIX classes are disabled by default. Enable this feature by setting the `posix` option to true.\n\n**Enable POSIX bracket support**\n\n```js\nconsole.log(pm.makeRe('[[:word:]]+', { posix: true }));\n//=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/\n```\n\n**Supported POSIX classes**\n\nThe following named POSIX bracket expressions are supported:\n\n*   `[:alnum:]` - Alphanumeric characters, equ `[a-zA-Z0-9]`\n*   `[:alpha:]` - Alphabetical characters, equivalent to `[a-zA-Z]`.\n*   `[:ascii:]` - ASCII characters, equivalent to `[\\\\x00-\\\\x7F]`.\n*   `[:blank:]` - Space and tab characters, equivalent to `[ \\\\t]`.\n*   `[:cntrl:]` - Control characters, equivalent to `[\\\\x00-\\\\x1F\\\\x7F]`.\n*   `[:digit:]` - Numerical digits, equivalent to `[0-9]`.\n*   `[:graph:]` - Graph characters, equivalent to `[\\\\x21-\\\\x7E]`.\n*   `[:lower:]` - Lowercase letters, equivalent to `[a-z]`.\n*   `[:print:]` - Print characters, equivalent to `[\\\\x20-\\\\x7E ]`.\n*   `[:punct:]` - Punctuation and symbols, equivalent to `[\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~]\\`.\n*   `[:space:]` - Extended space characters, equivalent to `[ \\\\t\\\\r\\\\n\\\\v\\\\f]`.\n*   `[:upper:]` - Uppercase letters, equivalent to `[A-Z]`.\n*   `[:word:]` -  Word characters (letters, numbers and underscores), equivalent to `[A-Za-z0-9_]`.\n*   `[:xdigit:]` - Hexadecimal digits, equivalent to `[A-Fa-f0-9]`.\n\nSee the [Bash Reference Manual](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html) for more information.\n\n### Braces\n\nPicomatch does not do brace expansion. For [brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html) and advanced matching with braces, use [micromatch](https://github.com/micromatch/micromatch) instead. Picomatch has very basic support for braces.\n\n### Matching special characters as literals\n\nIf you wish to match the following special characters in a filepath, and you want to use these characters in your glob pattern, they must be escaped with backslashes or quotes:\n\n**Special Characters**\n\nSome characters that are used for matching in regular expressions are also regarded as valid file path characters on some platforms.\n\nTo match any of the following characters as literals: \\`$^\\*+?()\\[]\n\nExamples:\n\n```js\nconsole.log(pm.makeRe('foo/bar \\\\(1\\\\)'));\nconsole.log(pm.makeRe('foo/bar \\\\(1\\\\)'));\n```\n\n<br>\n<br>\n\n## Library Comparisons\n\nThe following table shows which features are supported by [minimatch](https://github.com/isaacs/minimatch), [micromatch](https://github.com/micromatch/micromatch), [picomatch](https://github.com/micromatch/picomatch), [nanomatch](https://github.com/micromatch/nanomatch), [extglob](https://github.com/micromatch/extglob), [braces](https://github.com/micromatch/braces), and [expand-brackets](https://github.com/micromatch/expand-brackets).\n\n| **Feature** | `minimatch` | `micromatch` | `picomatch` | `nanomatch` | `extglob` | `braces` | `expand-brackets` |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Wildcard matching (`*?+`) | ✔ | ✔ | ✔ | ✔ | - | - | - |\n| Advancing globbing        | ✔ | ✔ | ✔ | - | - | - | - |\n| Brace *matching*          | ✔ | ✔ | ✔ | - | - | ✔ | - |\n| Brace *expansion*         | ✔ | ✔ | - | - | - | ✔ | - |\n| Extglobs                  | partial | ✔ | ✔ | - | ✔ | - | - |\n| Posix brackets            | - | ✔ | ✔ | - | - | - | ✔ |\n| Regular expression syntax | - | ✔ | ✔ | ✔ | ✔ | - | ✔ |\n| File system operations    | - | - | - | - | - | - | - |\n\n<br>\n<br>\n\n## Benchmarks\n\nPerformance comparison of picomatch and minimatch.\n\n    # .makeRe star\n      picomatch x 1,993,050 ops/sec ±0.51% (91 runs sampled)\n      minimatch x 627,206 ops/sec ±1.96% (87 runs sampled))\n\n    # .makeRe star; dot=true\n      picomatch x 1,436,640 ops/sec ±0.62% (91 runs sampled)\n      minimatch x 525,876 ops/sec ±0.60% (88 runs sampled)\n\n    # .makeRe globstar\n      picomatch x 1,592,742 ops/sec ±0.42% (90 runs sampled)\n      minimatch x 962,043 ops/sec ±1.76% (91 runs sampled)d)\n\n    # .makeRe globstars\n      picomatch x 1,615,199 ops/sec ±0.35% (94 runs sampled)\n      minimatch x 477,179 ops/sec ±1.33% (91 runs sampled)\n\n    # .makeRe with leading star\n      picomatch x 1,220,856 ops/sec ±0.40% (92 runs sampled)\n      minimatch x 453,564 ops/sec ±1.43% (94 runs sampled)\n\n    # .makeRe - basic braces\n      picomatch x 392,067 ops/sec ±0.70% (90 runs sampled)\n      minimatch x 99,532 ops/sec ±2.03% (87 runs sampled))\n\n<br>\n<br>\n\n## Philosophies\n\nThe goal of this library is to be blazing fast, without compromising on accuracy.\n\n**Accuracy**\n\nThe number one of goal of this library is accuracy. However, it's not unusual for different glob implementations to have different rules for matching behavior, even with simple wildcard matching. It gets increasingly more complicated when combinations of different features are combined, like when extglobs are combined with globstars, braces, slashes, and so on: `!(**/{a,b,*/c})`.\n\nThus, given that there is no canonical glob specification to use as a single source of truth when differences of opinion arise regarding behavior, sometimes we have to implement our best judgement and rely on feedback from users to make improvements.\n\n**Performance**\n\nAlthough this library performs well in benchmarks, and in most cases it's faster than other popular libraries we benchmarked against, we will always choose accuracy over performance. It's not helpful to anyone if our library is faster at returning the wrong answer.\n\n<br>\n<br>\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\nnpm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\nnpm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright © 2017-present, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n"},{"text":"# queue-microtask [![ci][ci-image]][ci-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[ci-image]: https://img.shields.io/github/workflow/status/feross/queue-microtask/ci/master\n\n[ci-url]: https://github.com/feross/queue-microtask/actions\n\n[npm-image]: https://img.shields.io/npm/v/queue-microtask.svg\n\n[npm-url]: https://npmjs.org/package/queue-microtask\n\n[downloads-image]: https://img.shields.io/npm/dm/queue-microtask.svg\n\n[downloads-url]: https://npmjs.org/package/queue-microtask\n\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n\n[standard-url]: https://standardjs.com\n\n### fast, tiny [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask) shim for modern engines\n\n*   Use [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask) in all modern JS engines.\n*   No dependencies. Less than 10 lines. No shims or complicated fallbacks.\n*   Optimal performance in all modern environments\n    *   Uses `queueMicrotask` in modern environments\n    *   Fallback to `Promise.resolve().then(fn)` in Node.js 10 and earlier, and old browsers (same performance as `queueMicrotask`)\n\n## install\n\n    npm install queue-microtask\n\n## usage\n\n```js\nconst queueMicrotask = require('queue-microtask')\n\nqueueMicrotask(() => { /* this will run soon */ })\n```\n\n## What is `queueMicrotask` and why would one use it?\n\nThe `queueMicrotask` function is a WHATWG standard. It queues a microtask to be executed prior to control returning to the event loop.\n\nA microtask is a short function which will run after the current task has completed its work and when there is no other code waiting to be run before control of the execution context is returned to the event loop.\n\nThe code `queueMicrotask(fn)` is equivalent to the code `Promise.resolve().then(fn)`. It is also very similar to [`process.nextTick(fn)`](https://nodejs.org/api/process.html#process_process_nexttick_callback_args) in Node.\n\nUsing microtasks lets code run without interfering with any other, potentially higher priority, code that is pending, but before the JS engine regains control over the execution context.\n\nSee the [spec](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#microtask-queuing) or [Node documentation](https://nodejs.org/api/globals.html#globals_queuemicrotask_callback) for more information.\n\n## Who is this package for?\n\nThis package allows you to use `queueMicrotask` safely in all modern JS engines. Use it if you prioritize small JS bundle size over support for old browsers.\n\nIf you just need to support Node 12 and later, use `queueMicrotask` directly. If you need to support all versions of Node, use this package.\n\n## Why not use `process.nextTick`?\n\nIn Node, `queueMicrotask` and `process.nextTick` are [essentially equivalent](https://nodejs.org/api/globals.html#globals_queuemicrotask_callback), though there are [subtle differences](https://github.com/YuzuJS/setImmediate#macrotasks-and-microtasks) that don't matter in most situations.\n\nYou can think of `queueMicrotask` as a standardized version of `process.nextTick` that works in the browser. No need to rely on your browser bundler to shim `process` for the browser environment.\n\n## Why not use `setTimeout(fn, 0)`?\n\nThis approach is the most compatible, but it has problems. Modern browsers throttle timers severely, so `setTimeout(…, 0)` usually takes at least 4ms to run. Furthermore, the throttling gets even worse if the page is backgrounded. If you have many `setTimeout` calls, then this can severely limit the performance of your program.\n\n## Why not use a microtask library like [`immediate`](https://www.npmjs.com/package/immediate) or [`asap`](https://www.npmjs.com/package/asap)?\n\nThese packages are great! However, if you prioritize small JS bundle size over optimal performance in old browsers then you may want to consider this package.\n\nThis package (`queue-microtask`) is four times smaller than `immediate`, twice as small as `asap`, and twice as small as using `process.nextTick` and letting the browser bundler shim it automatically.\n\nNote: This package throws an exception in JS environments which lack `Promise` support -- which are usually very old browsers and Node.js versions.\n\nSince the `queueMicrotask` API is supported in Node.js, Chrome, Firefox, Safari, Opera, and Edge, **the vast majority of users will get optimal performance**. Any JS environment with `Promise`, which is almost all of them, also get optimal performance. If you need support for JS environments which lack `Promise` support, use one of the alternative packages.\n\n## What is a shim?\n\n> In computer programming, a shim is a library that transparently intercepts API calls and changes the arguments passed, handles the operation itself or redirects the operation elsewhere. – [Wikipedia](https://en.wikipedia.org/wiki/Shim_\\(computing\\))\n\nThis package could also be described as a \"ponyfill\".\n\n> A ponyfill is almost the same as a polyfill, but not quite. Instead of patching functionality for older browsers, a ponyfill provides that functionality as a standalone module you can use. – [PonyFoo](https://ponyfoo.com/articles/polyfills-or-ponyfills)\n\n## API\n\n### `queueMicrotask(fn)`\n\nThe `queueMicrotask()` method queues a microtask.\n\nThe `fn` argument is a function to be executed after all pending tasks have completed but before yielding control to the browser's event loop.\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](https://feross.org).\n"},{"text":"# Ramda\n\nA practical functional library for JavaScript programmers.\n\n[![Build Status](https://github.com/ramda/ramda/workflows/Build/badge.svg)](https://github.com/ramda/ramda/actions?query=workflow%3ABuild)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/953a3c5ee423e5301d18/test_coverage)](https://codeclimate.com/github/ramda/ramda/test_coverage)\n[![npm module](https://badge.fury.io/js/ramda.svg)](https://www.npmjs.org/package/ramda)\n[![deno land](http://img.shields.io/badge/available%20on-deno.land/x-lightgrey.svg?logo=deno\\&labelColor=black)](https://deno.land/x/ramda@v0.27.2)\n[![nest badge](https://nest.land/badge.svg)](https://nest.land/package/ramda)\n[![Gitter](https://badges.gitter.im/Join_Chat.svg)](https://gitter.im/ramda/ramda?utm_source=badge\\&utm_medium=badge\\&utm_campaign=pr-badge\\&utm_content=badge)\n\n## Why Ramda?\n\n<img src=\"https://ramdajs.com/ramdaFilled_200x235.png\" \n  width=\"170\" height=\"190\" align=\"right\" hspace=\"12\" />\n\nThere are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal. We wanted a library designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data.\n\n## What's Different?\n\nThe primary distinguishing features of Ramda are:\n\n*   Ramda emphasizes a purer functional style. Immutability and side-effect free functions\n    are at the heart of its design philosophy. This can help you get the job done with simple,\n    elegant code.\n\n*   Ramda functions are automatically curried. This allows you to easily build up new functions\n    from old ones simply by not supplying the final parameters.\n\n*   The parameters to Ramda functions are arranged to make it convenient for currying. The data\n    to be operated on is generally supplied last.\n\nThe last two points together make it very easy to build functions as sequences of simpler functions, each of which transforms the data and passes it along to the next. Ramda is designed to support this style of coding.\n\n## Introductions\n\n*   [Introducing Ramda](http://buzzdecafe.github.io/code/2014/05/16/introducing-ramda) by Buzz de Cafe\n*   [Why Ramda?](http://fr.umio.us/why-ramda/) by Scott Sauyet\n*   [Favoring Curry](http://fr.umio.us/favoring-curry/) by Scott Sauyet\n*   [Why Curry Helps](https://hughfdjackson.com/javascript/why-curry-helps/) by Hugh Jackson\n*   [Hey Underscore, You're Doing It Wrong!](https://www.youtube.com/watch?v=m3svKOdZijA\\&app=desktop) by Brian Lonsdorf\n*   [Thinking in Ramda](https://randycoulman.com/blog/categories/thinking-in-ramda) by Randy Coulman\n\n## Philosophy\n\nUsing Ramda should feel much like just using JavaScript.\nIt is practical, functional JavaScript. We're not introducing\nlambda expressions in strings, we're not borrowing consed\nlists, we're not porting over all of the Clojure functions.\n\nOur basic data structures are plain JavaScript objects, and our\nusual collections are JavaScript arrays. We also keep other\nnative features of JavaScript, such as functions as objects\nwith properties.\n\nFunctional programming is in good part about immutable objects and\nside-effect free functions. While Ramda does not *enforce* this, it\nenables such style to be as frictionless as possible.\n\nWe aim for an implementation both clean and elegant, but the API is king.\nWe sacrifice a great deal of implementation elegance for even a slightly\ncleaner API.\n\nLast but not least, Ramda strives for performance. A reliable and quick\nimplementation wins over any notions of functional purity.\n\n## Installation\n\nTo use with node:\n\n```bash\n$ npm install ramda\n```\n\nThen in the console:\n\n```javascript\nconst R = require('ramda');\n```\n\nTo use directly in [Deno](https://deno.land):\n\n```javascript\nimport * as R from \"https://deno.land/x/ramda@v0.27.2/mod.ts\";\n```\n\nor using Nest.land:\n\n```javascript\nimport * as R from \"https://x.nest.land/ramda@0.27.2/mod.ts\";\n```\n\nTo use directly in the browser:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.js\"></script>\n```\n\nor the minified version:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n```\n\nor from a CDN, either cdnjs:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js\"></script>\n```\n\nor one of the below links from [jsDelivr](http://jsdelivr.com):\n\n```html\n<script src=\"//cdn.jsdelivr.net/npm/ramda@0.25.0/dist/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/ramda@0.25/dist/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/ramda@latest/dist/ramda.min.js\"></script>\n```\n\n(note that using `latest` is taking a significant risk that ramda API changes could break your code.)\n\nThese script tags add the variable `R` on the browser's global scope.\n\nOr you can inject ramda into virtually any unsuspecting website using [the bookmarklet](https://github.com/ramda/ramda/blob/master/BOOKMARKLET.md).\n\n**Note for versions > 0.25**\nRamda versions > 0.25 don't have a default export.\nSo instead of `import R from 'ramda';`, one has to use `import * as R from 'ramda';`\nOr better yet, import only the required functions via `import { functionName } from 'ramda';`\n\n**Note for ES6 module and browsers**\nIn order to access to the ES6 module in browsers, one has to provide the content of  the **es** directory (see below for the build instructions) and use `import * as R from './node_modules/ramda/es/index.js';`\n\n### Build\n\n`npm run build` creates `es`, `src` directories and updates both **dist/ramda.js** and **dist/ramda.min.js**\n\n#### Partial Builds\n\nIt is possible to build Ramda with a subset of the functionality to reduce its file size. Ramda's build system supports this with command line flags. For example if you're using `R.compose`, `R.reduce`, and `R.filter` you can create a partial build with:\n\n    npm run --silent partial-build compose reduce filter > dist/ramda.custom.js\n\nThis requires having Node/io.js installed and ramda's dependencies installed (just use `npm install` before running partial build).\n\n### Install specific functions\n\n[Install individual functions](https://bitsrc.io/ramda/ramda) with bit, npm and yarn without installing the whole library.\n\n## Documentation\n\nPlease review the [API documentation](https://ramdajs.com/docs/).\n\nAlso available is our [Cookbook](https://github.com/ramda/ramda/wiki/Cookbook) of functions built from Ramda that you may find useful.\n\n## The Name\n\nOk, so we like sheep.  That's all.  It's a short name, not already\ntaken.  It could as easily have been `eweda`, but then we would be\nforced to say *eweda lamb!*, and no one wants that.  For non-English\nspeakers, lambs are baby sheep, ewes are female sheep, and rams are male\nsheep.  So perhaps ramda is a grown-up lambda... but probably not.\n\n## Running The Test Suite\n\n**Console:**\n\nTo run the test suite from the console, you need to have `mocha` installed:\n\n    npm install -g mocha\n\nThen from the root of the project, you can just call\n\n    mocha\n\nAlternately, if you've installed the dependencies, via:\n\n    npm install\n\nthen you can run the tests (and get detailed output) by running:\n\n    npm test\n\n**Browser:**\n\nYou can use [testem](https://github.com/airportyh/testem) to\ntest across different browsers (or even headlessly), with livereloading of\ntests. Install testem (`npm install -g testem`) and run `testem`. Open the\nlink provided in your browser and you will see the results in your terminal.\n\nIf you have *PhantomJS* installed, you can run `testem -l phantomjs` to run the\ntests completely headlessly.\n\n## Usage\n\nFor `v0.25` and up, import the whole library or pick ES modules directly from the library:\n\n```js\nimport * as R from 'ramda'\n\nconst {identity} = R\nR.map(identity, [1, 2, 3])\n```\n\nDestructuring imports from ramda *does not necessarily prevent importing the entire library*. You can manually cherry-pick methods like the following, which would only grab the parts necessary for `identity` to work:\n\n```js\nimport identity from 'ramda/src/identity'\n\nidentity()\n```\n\nManually cherry picking methods is cumbersome, however. Most bundlers like Webpack and Rollup offer tree-shaking as a way to drop unused Ramda code and reduce bundle size, but their performance varies, discussed [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples). Here is a summary of the optimal setup based on what technology you are using:\n\n1.  Webpack + Babel - use [`babel-plugin-ramda`](https://github.com/megawac/babel-plugin-ramda) to automatically cherry pick methods. Discussion [here](https://www.andrewsouthpaw.com/ramda-webpack-and-tree-shaking/), example [here](https://github.com/AndrewSouthpaw/ramda-webpack-tree-shaking-examples/blob/master/07-webpack-babel-plugin-ramda/package.json)\n2.  Webpack only - use `UglifyJS` plugin for treeshaking along with the `ModuleConcatenationPlugin`. Discussion [here](https://github.com/ramda/ramda/issues/2355), with an example setup [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples/blob/master/06-webpack-scope-hoisted/webpack.config.js)\n3.  Rollup - does a fine job properly treeshaking, no special work needed; example [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples/blob/master/07-rollup-ramda-tree-shaking/rollup.config.js)\n\n## Typings\n\n*   [TypeScript](https://www.npmjs.com/package/@types/ramda)\n*   [Flow](https://github.com/flowtype/flow-typed/tree/master/definitions/npm/ramda_v0.x.x)\n\n## Translations\n\n*   [Chinese(中文)](http://ramda.cn/)\n*   [Ukrainian(Українська)](https://github.com/ivanzusko/ramda)\n*   [Portuguese(BR)](https://github.com/renansj/ramda)\n*   [Russian(Русский)](https://github.com/Guck111/ramda)\n*   [Spanish(ES)](https://github.com/wirecobweb/ramda)\n\n## Funding\n\nIf you wish to donate to Ramda please see our [Open Collective](https://opencollective.com/ramda) page. Thank you!\n\n## Acknowledgements\n\nThanks to [J. C. Phillipps](http://www.jcphillipps.com) for the Ramda logo.\nRamda logo artwork © 2014 J. C. Phillipps. Licensed Creative Commons\n[CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/).\n"},{"text":"# remark-frontmatter\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**remark**][remark] plugin to support frontmatter (YAML, TOML, and more).\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkFrontmatter[, options])`](#unifieduseremarkfrontmatter-options)\n*   [Examples](#examples)\n    *   [Example: custom marker](#example-custom-marker)\n    *   [Example: custom fence](#example-custom-fence)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin to add support for YAML, TOML,\nand other frontmatter.\nYou can use this to add support for parsing and serializing this syntax\nextension.\n\nunified is an AST (abstract syntax tree) based transform project.\n**remark** is everything unified that relates to markdown.\nThe layer under remark is called mdast, which is only concerned with syntax\ntrees.\nAnother layer underneath is micromark, which is only concerned with parsing.\nThis package is a small wrapper to integrate all of these.\n\n## When should I use this?\n\nFrontmatter is a metadata format in front of content.\nIt’s typically written in YAML and is often used with markdown.\nThis mechanism works well when you want authors, that have some markup\nexperience, to configure where or how the content is displayed or supply\nmetadata about content.\nFrontmatter does not work everywhere so it makes markdown less portable.\nA good example use case is markdown being rendered by (static) site generators.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (12.20+, 14.14+, 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-frontmatter\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkFrontmatter from 'https://cdn.skypack.dev/remark-frontmatter@4?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkFrontmatter from 'https://cdn.skypack.dev/remark-frontmatter@4?min'\n</script>\n```\n\n## Use\n\nSay we have the following file, `example.md`:\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\nAnd our module, `example.js`, looks as follows:\n\n```js\nimport {read} from 'to-vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkStringify from 'remark-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkStringify)\n    .use(remarkFrontmatter, ['yaml', 'toml'])\n    .use(() => (tree) => {\n      console.dir(tree)\n    })\n    .process(await read('example.md'))\n\n  console.log(String(file))\n}\n```\n\nNow, running `node example` yields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'toml', value: 'title = \"New Website\"', position: [Object]},\n    {type: 'heading', depth: 1, children: [Array], position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 6, column: 1, offset: 48}\n  }\n}\n```\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\n## API\n\nThis package exports no identifiers.\nThe default export is `remarkFrontmatter`.\n\n### `unified().use(remarkFrontmatter[, options])`\n\nConfigures remark so that it can parse and serialize frontmatter (YAML, TOML,\nand more).\nDoesn’t parse the data inside them: [create your own plugin][create-plugin] to\ndo that.\n\n##### `options`\n\nOne `preset` or `Matter`, or an array of them, defining all the supported\nfrontmatters (default: `'yaml'`).\n\n##### `preset`\n\nEither `'yaml'` or `'toml'`:\n\n*   `'yaml'` — `Matter` defined as `{type: 'yaml', marker: '-'}`\n*   `'toml'` — `Matter` defined as `{type: 'toml', marker: '+'}`\n\n##### `Matter`\n\nAn object with a `type` and either a `marker` or a `fence`:\n\n*   `type` (`string`)\n    — Type to tokenize as\n*   `marker` (`string` or `{open: string, close: string}`)\n    — Character used to construct fences.\n    By providing an object with `open` and `close` different characters can be\n    used for opening and closing fences.\n    For example the character `'-'` will result in `'---'` being used as the\n    fence\n*   `fence` (`string` or `{open: string, close: string}`)\n    — String used as the complete fence.\n    By providing an object with `open` and `close` different values can be used\n    for opening and closing fences.\n    This can be used too if fences contain different characters or lengths other\n    than 3\n*   `anywhere` (`boolean`, default: `false`)\n    – if `true`, matter can be found anywhere in the document.\n    If `false` (default), only matter at the start of the document is recognized\n\n## Examples\n\n### Example: custom marker\n\nA custom frontmatter with different open and close markers, repeated 3 times,\nthat looks like this:\n\n```text\n<<<\ndata\n>>>\n\n# hi\n```\n\n…can be supported with:\n\n```js\n// …\n.use(remarkFrontmatter, {type: 'custom', marker: {open: '<', close: '>'}})\n// …\n```\n\n### Example: custom fence\n\nA custom frontmatter with custom fences that are not repeated like this:\n\n```text\n{\n  \"key\": \"value\"\n}\n\n# hi\n```\n\n…can be supported with:\n\n```js\n// …\n.use(remarkFrontmatter, {type: 'json', fence: {open: '{', close: '}'}})\n// …\n```\n\n## Syntax\n\nThis plugin applies a micromark extensions to parse the syntax.\nSee its readme for how it works:\n\n*   [`micromark-extension-frontmatter`](https://github.com/micromark/micromark-extension-frontmatter)\n\nThe syntax supported depends on the given configuration.\n\n## Syntax tree\n\nThis plugin applies one mdast utility to build and serialize the AST.\nSee its readme for how it works:\n\n*   [`mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-directive)\n\nThe node types supported in the tree depend on the given configuration.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThe YAML node type is supported in `@types/mdast` by default.\nTo add other node types, register them by adding them to\n`FrontmatterContentMap`:\n\n```ts\nimport type {Literal} from 'mdast'\n\ninterface TOML extends Literal {\n  type: 'toml'\n}\n\ndeclare module 'mdast' {\n  interface FrontmatterContentMap {\n    // Allow using toml nodes defined by `remark-frontmatter`.\n    toml: TOML\n  }\n}\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\nThis plugin works with unified 6+ and remark 13+.\n\n## Security\n\nUse of `remark-frontmatter` does not involve [**rehype**][rehype]\n([**hast**][hast]) or user content so there are no openings for\n[cross-site scripting (XSS)][xss] attacks.\n\n## Related\n\n*   [`remark-yaml-config`](https://github.com/remarkjs/remark-yaml-config)\n    — configure remark from YAML configuration\n*   [`remark-gfm`](https://github.com/remarkjs/remark-gfm)\n    — support GFM (autolink literals, strikethrough, tables, tasklists)\n*   [`remark-github`](https://github.com/remarkjs/remark-github)\n    — link references to commits, issues, pull-requests, and users, like on\n    GitHub\n*   [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    — support directives\n*   [`remark-math`](https://github.com/remarkjs/remark-math)\n    — support math\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark-frontmatter/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark-frontmatter/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark-frontmatter.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark-frontmatter\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-frontmatter.svg\n\n[downloads]: https://www.npmjs.com/package/remark-frontmatter\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-frontmatter.svg\n\n[size]: https://bundlephobia.com/result?p=remark-frontmatter\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark]: https://github.com/remarkjs/remark\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[typescript]: https://www.typescriptlang.org\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[hast]: https://github.com/syntax-tree/hast\n\n[create-plugin]: https://unifiedjs.com/learn/guide/create-a-plugin/\n"},{"text":"# remark-parse\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[remark][]** plugin to add support for parsing markdown input.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkParse)`](#unifieduseremarkparse)\n*   [Examples](#examples)\n    *   [Example: support GFM and frontmatter](#example-support-gfm-and-frontmatter)\n    *   [Example: turning markdown into a man page](#example-turning-markdown-into-a-man-page)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [Sponsor](#sponsor)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin that defines how to take\nmarkdown as input and turn it into a syntax tree.\n\nThis plugin is built on [`mdast-util-from-markdown`][mdast-util-from-markdown],\nwhich in turn uses [`micromark`][micromark] for parsing markdown into tokens and\nturns those into [mdast][] syntax trees.\nremark focusses on making it easier to transform content by abstracting such\ninternals away.\n\n**unified** is a project that transforms content with abstract syntax trees\n(ASTs).\n**remark** adds support for markdown to unified.\n**mdast** is the markdown AST that remark uses.\n**micromark** is the markdown parser we use.\nThis is a remark plugin that defines how input markdown is turned into mdast.\n\n## When should I use this?\n\nThis plugin adds support to unified for parsing markdown.\nYou can alternatively use [`remark`][remark-core] instead, which combines\nunified, this plugin, and [`remark-stringify`][remark-stringify].\n\nYou can combine this plugin with other plugins to add syntax extensions.\nNotable examples that deeply integrate with it are\n[`remark-gfm`][remark-gfm],\n[`remark-mdx`][remark-mdx],\n[`remark-frontmatter`][remark-frontmatter],\n[`remark-math`][remark-math], and\n[`remark-directive`][remark-directive].\nYou can also use any other [remark plugin][plugin] after `remark-parse`.\n\nIf you *just* want to turn markdown into HTML (with maybe a few extensions),\nwe recommend [`micromark`][micromark] instead.\nIf you want to handle syntax trees manually, you can use\n[`mdast-util-from-markdown`][mdast-util-from-markdown].\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-parse\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkParse from 'https://cdn.skypack.dev/remark-parse@10?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkParse from 'https://cdn.skypack.dev/remark-parse@10?min'\n</script>\n```\n\n## Use\n\nSay we have the following module `example.js`:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGfm from 'remark-gfm'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeStringify)\n    .process('# Hi\\n\\n*Hello*, world!')\n\n  console.log(String(file))\n}\n```\n\nRunning that with `node example.js` yields:\n\n```html\n<h1>Hi</h1>\n<p><em>Hello</em>, world!</p>\n```\n\n## API\n\nThis package exports no identifiers.\nThe default export is `remarkParse`.\n\n### `unified().use(remarkParse)`\n\nAdd support for parsing markdown input.\nThere are no options.\n\n## Examples\n\n### Example: support GFM and frontmatter\n\nWe support CommonMark by default.\nNon-standard markdown extensions can be enabled with plugins.\nThe following example adds support for GFM features (autolink literals,\nfootnotes, strikethrough, tables, tasklists) and frontmatter (YAML):\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkGfm from 'remark-gfm'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkFrontmatter)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeStringify)\n    .process('---\\nlayout: home\\n---\\n\\n# Hi ~~Mars~~Venus!')\n\n  console.log(String(file))\n}\n```\n\nYields:\n\n```html\n<h1>Hi <del>Mars</del>Venus!</h1>\n```\n\n### Example: turning markdown into a man page\n\nMan pages (short for manual pages) are a way to document CLIs (example: type\n`man git-log` in your terminal).\nThey use an old markup format called roff.\nThere’s a remark plugin, [`remark-man`][remark-man], that can serialize as roff.\nThe following example turns markdown into man pages by using unified with\n`remark-parse` and `remark-man`:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkMan from 'remark-man'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkMan)\n    .process('# titan(7) -- largest moon of saturn\\n\\nTitan is the largest moon…')\n\n  console.log(String(file))\n}\n```\n\nYields:\n\n```roff\n.TH \"TITAN\" \"7\" \"November 2021\" \"\" \"\"\n.SH \"NAME\"\n\\fBtitan\\fR - largest moon of saturn\n.P\nTitan is the largest moon…\n```\n\n## Syntax\n\nMarkdown is parsed according to CommonMark.\nOther plugins can add support for syntax extensions.\nIf you’re interested in extending markdown,\n[more information is available in micromark’s readme][micromark-extend].\n\n## Syntax tree\n\nThe syntax tree format used in remark is [mdast][].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThere are no extra exported types.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Security\n\nAs markdown can be turned into HTML and improper use of HTML can open you up to\n[cross-site scripting (XSS)][xss] attacks, use of remark can be unsafe.\nWhen going to HTML, you will likely combine remark with **[rehype][]**, in which\ncase you should use [`rehype-sanitize`][rehype-sanitize].\n\nUse of remark plugins could also open you up to other attacks.\nCarefully assess each plugin and the risks involved in using them.\n\nFor info on how to submit a report, see our [security policy][security].\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\nJoin us in [Discussions][chat] to chat with the community and contributors.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<!--lint ignore no-html-->\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-parse.svg\n\n[downloads]: https://www.npmjs.com/package/remark-parse\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-parse.svg\n\n[size]: https://bundlephobia.com/result?p=remark-parse\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[security]: https://github.com/remarkjs/.github/blob/main/security.md\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/main/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/main/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/main/code-of-conduct.md\n\n[license]: https://github.com/remarkjs/remark/blob/main/license\n\n[author]: https://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark]: https://github.com/remarkjs/remark\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[typescript]: https://www.typescriptlang.org\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[rehype-sanitize]: https://github.com/rehypejs/rehype-sanitize\n\n[mdast-util-from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[micromark]: https://github.com/micromark/micromark\n\n[micromark-extend]: https://github.com/micromark/micromark#extensions\n\n[remark-gfm]: https://github.com/remarkjs/remark-gfm\n\n[remark-mdx]: https://github.com/mdx-js/mdx/tree/main/packages/remark-mdx\n\n[remark-frontmatter]: https://github.com/remarkjs/remark-frontmatter\n\n[remark-math]: https://github.com/remarkjs/remark-math\n\n[remark-man]: https://github.com/remarkjs/remark-man\n\n[remark-directive]: https://github.com/remarkjs/remark-directive\n\n[remark-stringify]: ../remark-stringify/\n\n[remark-core]: ../remark/\n\n[plugin]: https://github.com/remarkjs/remark#plugin\n"},{"text":"# remark-stringify\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[remark][]** plugin to add support for serializing markdown.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkStringify[, options])`](#unifieduseremarkstringify-options)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [Sponsor](#sponsor)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin that defines how to take a\nsyntax tree as input and turn it into serialized markdown.\n\nThis plugin is built on [`mdast-util-to-markdown`][mdast-util-to-markdown],\nwhich turns [mdast][] syntax trees into a string.\nremark focusses on making it easier to transform content by abstracting such\ninternals away.\n\n**unified** is a project that transforms content with abstract syntax trees\n(ASTs).\n**remark** adds support for markdown to unified.\n**mdast** is the markdown AST that remark uses.\nThis is a remark plugin that defines how mdast is turned into markdown.\n\n## When should I use this?\n\nThis plugin adds support to unified for serializing markdown.\nYou can alternatively use [`remark`][remark-core] instead, which combines\nunified, [`remark-parse`][remark-parse], and this plugin.\n\nYou can combine this plugin with other plugins to add syntax extensions.\nNotable examples that deeply integrate with it are\n[`remark-gfm`][remark-gfm],\n[`remark-mdx`][remark-mdx],\n[`remark-frontmatter`][remark-frontmatter],\n[`remark-math`][remark-math], and\n[`remark-directive`][remark-directive].\nYou can also use any other [remark plugin][plugin] before `remark-stringify`.\n\nIf you want to handle syntax trees manually, you can use\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-stringify\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkStringify from 'https://cdn.skypack.dev/remark-stringify@10?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkStringify from 'https://cdn.skypack.dev/remark-stringify@10?min'\n</script>\n```\n\n## Use\n\nSay we have the following module `example.js`:\n\n```js\nimport {unified} from 'unified'\nimport rehypeParse from 'rehype-parse'\nimport rehypeRemark from 'rehype-remark'\nimport remarkStringify from 'remark-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(rehypeParse)\n    .use(rehypeRemark)\n    .use(remarkStringify, {\n      bullet: '*',\n      fence: '~',\n      fences: true,\n      incrementListMarker: false\n    })\n    .process('<h1>Hello, world!</h1>')\n\n  console.log(String(file))\n}\n```\n\nRunning that with `node example.js` yields:\n\n```markdown\n# Hello, world!\n```\n\n## API\n\nThis package exports no identifiers.\nThe default export is `remarkStringify`.\n\n### `unified().use(remarkStringify[, options])`\n\nAdd support for serializing markdown.\nOptions are passed to [`mdast-util-to-markdown`][mdast-util-to-markdown]:\nall formatting options are supported.\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.bullet`\n\nMarker to use for bullets of items in unordered lists (`'*'`, `'+'`, or `'-'`,\ndefault: `'*'`).\n\n###### `options.bulletOther`\n\nMarker to use in certain cases where the primary bullet doesn’t work (`'*'`,\n`'+'`, or `'-'`, default: depends).\nSee [`mdast-util-to-markdown`][mdast-util-to-markdown] for more information.\n\n###### `options.bulletOrdered`\n\nMarker to use for bullets of items in ordered lists (`'.'` or `')'`, default:\n`'.'`).\n\n###### `options.bulletOrderedOther`\n\nMarker to use in certain cases where the primary bullet for ordered items\ndoesn’t work (`'.'` or `')'`, default: none).\nSee [`mdast-util-to-markdown`][mdast-util-to-markdown] for more information.\n\n###### `options.closeAtx`\n\nWhether to add the same number of number signs (`#`) at the end of an ATX\nheading as the opening sequence (`boolean`, default: `false`).\n\n###### `options.emphasis`\n\nMarker to use for emphasis (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.fence`\n\nMarker to use for fenced code (``'`'`` or `'~'`, default: ``'`'``).\n\n###### `options.fences`\n\nWhether to use fenced code always (`boolean`, default: `false`).\nThe default is to use fenced code if there is a language defined, if the code is\nempty, or if it starts or ends in blank lines.\n\n###### `options.incrementListMarker`\n\nWhether to increment the counter of ordered lists items (`boolean`, default:\n`true`).\n\n###### `options.listItemIndent`\n\nHow to indent the content of list items (`'one'`, `'tab'`, or `'mixed'`,\ndefault: `'tab'`).\nEither with the size of the bullet plus one space (when `'one'`), a tab stop\n(`'tab'`), or depending on the item and its parent list (`'mixed'`, uses `'one'`\nif the item and list are tight and `'tab'` otherwise).\n\n###### `options.quote`\n\nMarker to use for titles (`'\"'` or `\"'\"`, default: `'\"'`).\n\n###### `options.resourceLink`\n\nWhether to always use resource links (`boolean`, default: `false`).\nThe default is to use autolinks (`<https://example.com>`) when possible\nand resource links (`[text](url)`) otherwise.\n\n###### `options.rule`\n\nMarker to use for thematic breaks (`'*'`, `'-'`, or `'_'`, default: `'*'`).\n\n###### `options.ruleRepetition`\n\nNumber of markers to use for thematic breaks (`number`, default:\n`3`, min: `3`).\n\n###### `options.ruleSpaces`\n\nWhether to add spaces between markers in thematic breaks (`boolean`, default:\n`false`).\n\n###### `options.setext`\n\nWhether to use setext headings when possible (`boolean`, default: `false`).\nThe default is to always use ATX headings (`# heading`) instead of setext\nheadings (`heading\\n=======`).\nSetext headings can’t be used for empty headings or headings with a rank of\nthree or more.\n\n###### `options.strong`\n\nMarker to use for strong (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.tightDefinitions`\n\nWhether to join definitions without a blank line (`boolean`, default: `false`).\nThe default is to add blank lines between any flow (“block”) construct.\n\n###### `options.handlers`\n\nThis option is a bit advanced as it requires knowledge of ASTs, so we defer\nto the documentation available in\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\n###### `options.join`\n\nThis option is a bit advanced as it requires knowledge of ASTs, so we defer\nto the documentation available in\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\n###### `options.unsafe`\n\nThis option is a bit advanced as it requires deep knowledge of markdown, so we\ndefer to the documentation available in\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\n## Syntax\n\nMarkdown is serialized according to CommonMark but care is taken to format in\nsuch a way that the resulting markdown should work with most markdown parsers.\nOther plugins can add support for syntax extensions.\n\n## Syntax tree\n\nThe syntax tree format used in remark is [mdast][].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nAn `Options` type is exported, which models the interface of accepted options.\n\n## Security\n\nAs markdown can be turned into HTML and improper use of HTML can open you up to\n[cross-site scripting (XSS)][xss] attacks, use of remark can be unsafe.\nWhen going to HTML, you will likely combine remark with **[rehype][]**, in which\ncase you should use [`rehype-sanitize`][rehype-sanitize].\n\nUse of remark plugins could also open you up to other attacks.\nCarefully assess each plugin and the risks involved in using them.\n\nFor info on how to submit a report, see our [security policy][security].\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\nJoin us in [Discussions][chat] to chat with the community and contributors.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<!--lint ignore no-html-->\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-stringify.svg\n\n[downloads]: https://www.npmjs.com/package/remark-stringify\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-stringify.svg\n\n[size]: https://bundlephobia.com/result?p=remark-stringify\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[security]: https://github.com/remarkjs/.github/blob/main/security.md\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/main/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/main/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/main/code-of-conduct.md\n\n[license]: https://github.com/remarkjs/remark/blob/main/license\n\n[author]: https://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark]: https://github.com/remarkjs/remark\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[typescript]: https://www.typescriptlang.org\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[rehype-sanitize]: https://github.com/rehypejs/rehype-sanitize\n\n[mdast-util-to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[remark-gfm]: https://github.com/remarkjs/remark-gfm\n\n[remark-mdx]: https://github.com/mdx-js/mdx/tree/main/packages/remark-mdx\n\n[remark-frontmatter]: https://github.com/remarkjs/remark-frontmatter\n\n[remark-math]: https://github.com/remarkjs/remark-math\n\n[remark-directive]: https://github.com/remarkjs/remark-directive\n\n[remark-parse]: ../remark-parse/\n\n[remark-core]: ../remark/\n\n[plugin]: https://github.com/remarkjs/remark#plugin\n"},{"text":"# reusify\n\n[![npm version][npm-badge]][npm-url]\n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n\nReuse your objects and functions for maximum speed. This technique will\nmake any function run ~10% faster. You call your functions a\nlot, and it adds up quickly in hot code paths.\n\n    $ node benchmarks/createNoCodeFunction.js\n    Total time 53133\n    Total iterations 100000000\n    Iteration/s 1882069.5236482036\n\n    $ node benchmarks/reuseNoCodeFunction.js\n    Total time 50617\n    Total iterations 100000000\n    Iteration/s 1975620.838848608\n\nThe above benchmark uses fibonacci to simulate a real high-cpu load.\nThe actual numbers might differ for your use case, but the difference\nshould not.\n\nThe benchmark was taken using Node v6.10.0.\n\nThis library was extracted from\n[fastparallel](http://npm.im/fastparallel).\n\n## Example\n\n```js\nvar reusify = require('reusify')\nvar fib = require('reusify/benchmarks/fib')\nvar instance = reusify(MyObject)\n\n// get an object from the cache,\n// or creates a new one when cache is empty\nvar obj = instance.get()\n\n// set the state\nobj.num = 100\nobj.func()\n\n// reset the state.\n// if the state contains any external object\n// do not use delete operator (it is slow)\n// prefer set them to null\nobj.num = 0\n\n// store an object in the cache\ninstance.release(obj)\n\nfunction MyObject () {\n  // you need to define this property\n  // so V8 can compile MyObject into an\n  // hidden class\n  this.next = null\n  this.num = 0\n\n  var that = this\n\n  // this function is never reallocated,\n  // so it can be optimized by V8\n  this.func = function () {\n    if (null) {\n      // do nothing\n    } else {\n      // calculates fibonacci\n      fib(that.num)\n    }\n  }\n}\n```\n\nThe above example was intended for synchronous code, let's see async:\n\n```js\nvar reusify = require('reusify')\nvar instance = reusify(MyObject)\n\nfor (var i = 0; i < 100; i++) {\n  getData(i, console.log)\n}\n\nfunction getData (value, cb) {\n  var obj = instance.get()\n\n  obj.value = value\n  obj.cb = cb\n  obj.run()\n}\n\nfunction MyObject () {\n  this.next = null\n  this.value = null\n\n  var that = this\n\n  this.run = function () {\n    asyncOperation(that.value, that.handle)\n  }\n\n  this.handle = function (err, result) {\n    that.cb(err, result)\n    that.value = null\n    that.cb = null\n    instance.release(that)\n  }\n}\n```\n\nAlso note how in the above examples, the code, that consumes an istance of `MyObject`,\nreset the state to initial condition, just before storing it in the cache.\nThat's needed so that every subsequent request for an instance from the cache,\ncould get a clean instance.\n\n## Why\n\nIt is faster because V8 doesn't have to collect all the functions you\ncreate. On a short-lived benchmark, it is as fast as creating the\nnested function, but on a longer time frame it creates less\npressure on the garbage collector.\n\n## Other examples\n\nIf you want to see some complex example, checkout [middie](https://github.com/fastify/middie) and [steed](https://github.com/mcollina/steed).\n\n## Acknowledgements\n\nThanks to [Trevor Norris](https://github.com/trevnorris) for\ngetting me down the rabbit hole of performance, and thanks to [Mathias\nBuss](http://github.com/mafintosh) for suggesting me to share this\ntrick.\n\n## License\n\nMIT\n\n[npm-badge]: https://badge.fury.io/js/reusify.svg\n\n[npm-url]: https://badge.fury.io/js/reusify\n\n[travis-badge]: https://api.travis-ci.org/mcollina/reusify.svg\n\n[travis-url]: https://travis-ci.org/mcollina/reusify\n\n[coveralls-badge]: https://coveralls.io/repos/mcollina/reusify/badge.svg?branch=master&service=github\n\n[coveralls-url]: https://coveralls.io/github/mcollina/reusify?branch=master\n"},{"text":"# run-parallel [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/run-parallel/master.svg\n\n[travis-url]: https://travis-ci.org/feross/run-parallel\n\n[npm-image]: https://img.shields.io/npm/v/run-parallel.svg\n\n[npm-url]: https://npmjs.org/package/run-parallel\n\n[downloads-image]: https://img.shields.io/npm/dm/run-parallel.svg\n\n[downloads-url]: https://npmjs.org/package/run-parallel\n\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n\n[standard-url]: https://standardjs.com\n\n### Run an array of functions in parallel\n\n![parallel](https://raw.githubusercontent.com/feross/run-parallel/master/img.png) [![Sauce Test Status](https://saucelabs.com/browser-matrix/run-parallel.svg)](https://saucelabs.com/u/run-parallel)\n\n### install\n\n    npm install run-parallel\n\n### usage\n\n#### parallel(tasks, \\[callback])\n\nRun the `tasks` array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its callback, the main\n`callback` is immediately called with the value of the error. Once the `tasks` have\ncompleted, the results are passed to the final `callback` as an array.\n\nIt is also possible to use an object instead of an array. Each property will be run as a\nfunction and the results will be passed to the final `callback` as an object instead of\nan array. This can be a more readable way of handling the results.\n\n##### arguments\n\n*   `tasks` - An array or object containing functions to run. Each function is passed a\n    `callback(err, result)` which it must call on completion with an error `err` (which can\n    be `null`) and an optional `result` value.\n*   `callback(err, results)` - An optional callback to run once all the functions have\n    completed. This function gets a results array (or object) containing all the result\n    arguments passed to the task callbacks.\n\n##### example\n\n```js\nvar parallel = require('run-parallel')\n\nparallel([\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'one')\n    }, 200)\n  },\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'two')\n    }, 100)\n  }\n],\n// optional callback\nfunction (err, results) {\n  // the results array will equal ['one','two'] even though\n  // the second function had a shorter timeout.\n})\n```\n\nThis module is basically equavalent to\n[`async.parallel`](https://github.com/caolan/async#paralleltasks-callback), but it's\nhandy to just have the one function you need instead of the kitchen sink. Modularity!\nEspecially handy if you're serving to the browser and need to reduce your javascript\nbundle size.\n\nWorks great in the browser with [browserify](http://browserify.org/)!\n\n### see also\n\n*   [run-auto](https://github.com/feross/run-auto)\n*   [run-parallel-limit](https://github.com/feross/run-parallel-limit)\n*   [run-series](https://github.com/feross/run-series)\n*   [run-waterfall](https://github.com/feross/run-waterfall)\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n"},{"text":"# sade [![Build Status](https://travis-ci.org/lukeed/sade.svg?branch=master)](https://travis-ci.org/lukeed/sade)\n\n> Smooth (CLI) Operator 🎶\n\nSade is a small but powerful tool for building command-line interface (CLI) applications for Node.js that are fast, responsive, and helpful!\n\nIt enables default commands, git-like subcommands, option flags with aliases, default option values with type-casting, required-vs-optional argument handling, command validation, and automated help text generation!\n\nYour app's UX will be as smooth as butter... just like [Sade's voice](https://www.youtube.com/watch?v=4TYv2PhG89A). 😉\n\n## Install\n\n    $ npm install --save sade\n\n## Usage\n\n***Input:***\n\n```js\n#!/usr/bin/env node\n\nconst sade = require('sade');\n\nconst prog = sade('my-cli');\n\nprog\n  .version('1.0.5')\n  .option('--global, -g', 'An example global flag')\n  .option('-c, --config', 'Provide path to custom config', 'foo.config.js');\n\nprog\n  .command('build <src> <dest>')\n  .describe('Build the source directory. Expects an `index.js` entry file.')\n  .option('-o, --output', 'Change the name of the output file', 'bundle.js')\n  .example('build src build --global --config my-conf.js')\n  .example('build app public -o main.js')\n  .action((src, dest, opts) => {\n    console.log(`> building from ${src} to ${dest}`);\n    console.log('> these are extra opts', opts);\n  });\n\nprog.parse(process.argv);\n```\n\n***Output:***\n\n```a\n$ my-cli --help\n\n  Usage\n    $ my-cli <command> [options]\n\n  Available Commands\n    build    Build the source directory.\n\n  For more info, run any command with the `--help` flag\n    $ my-cli build --help\n\n  Options\n    -v, --version    Displays current version\n    -g, --global     An example global flag\n    -c, --config     Provide path to custom config  (default foo.config.js)\n    -h, --help       Displays this message\n\n\n$ my-cli build --help\n\n  Description\n    Build the source directory.\n    Expects an `index.js` entry file.\n\n  Usage\n    $ my-cli build <src> [options]\n\n  Options\n    -o, --output    Change the name of the output file  (default bundle.js)\n    -g, --global    An example global flag\n    -c, --config    Provide path to custom config  (default foo.config.js)\n    -h, --help      Displays this message\n\n  Examples\n    $ my-cli build src build --global --config my-conf.js\n    $ my-cli build app public -o main.js\n```\n\n## Tips\n\n*   **Define your global/program-wide version, options, description, and/or examples first.**<br>\n    *Once you define a Command, you can't access the global-scope again.*\n\n*   **Define all commands & options in the order that you want them to appear.**<br>\n    *Sade will not mutate or sort your CLI for you. Global options print before local options.*\n\n*   **Required arguments without values will error & exit**<br>\n    *An `Insufficient arguments!` error will be displayed along with a help prompt.*\n\n*   **Don't worry about manually displaying help~!**<br>\n    *Your help text is displayed automatically... including command-specific help text!*\n\n*   **Automatic default/basic patterns**<br>\n    *Usage text will always append `[options]` & `--help` and `--version` are done for you.*\n\n*   **Only define what you want to display!**<br>\n    *Help text sections (example, options, etc) will only display if you provide values.*\n\n## Subcommands\n\nSubcommands are defined & parsed like any other command! When defining their [`usage`](#usage-1), everything up until the first argument (`[foo]` or `<foo>`) is interpreted as the command string.\n\nThey should be defined in the order that you want them to appear in your general `--help` output.\n\nLastly, it is *not* necessary to define the subcommand's \"base\" as an additional command. However, if you choose to do so, it's recommended that you define it first for better visibility.\n\n```js\nconst prog = sade('git');\n\n// Not necessary for subcommands to work, but it's here anyway!\nprog\n  .command('remote')\n  .describe('Manage set of tracked repositories')\n  .action(opts => {\n    console.log('~> Print current remotes...');\n  });\n\nprog\n  .command('remote add <name> <url>', 'Demo...')\n  .action((name, url, opts) => {\n    console.log(`~> Adding a new remote (${name}) to ${url}`);\n  });\n\nprog\n  .command('remote rename <old> <new>', 'Demo...')\n  .action((old, nxt, opts) => {\n    console.log(`~> Renaming from ${old} to ${nxt}~!`);\n  });\n```\n\n## Single Command Mode\n\nIn certain circumstances, you may only need `sade` for a single-command CLI application.\n\n> **Note:** Until `v1.6.0`, this made for an awkward pairing.\n\nTo enable this, you may make use of the [`isSingle`](#issingle) argument. Doing so allows you to pass the program's entire [`usage` text](#usage-1) into the `name` argument.\n\nWith \"Single Command Mode\" enabled, your entire binary operates as one command. This means that any [`prog.command`](#progcommandusage-desc-opts) calls are disallowed & will instead throw an Error. Of course, you may still define a program version, a description, an example or two, and declare options. You are customizing the program's attributes as a whole.<sup>\\*</sup>\n\n> <sup>\\*</sup> This is true for multi-command applications, too, up until your first `prog.command()` call!\n\n***Example***\n\nLet's reconstruct [`sirv-cli`](https://github.com/lukeed/sirv), which is a single-command application that (optionally) accepts a directory from which to serve files. It also offers a slew of option flags:\n\n```js\nsade('sirv [dir]', true)\n  .version('1.0.0')\n  .describe('Run a static file server')\n  .example('public -qeim 31536000')\n  .example('--port 8080 --etag')\n  .example('my-app --dev')\n  .option('-D, --dev', 'Enable \"dev\" mode')\n  .option('-e, --etag', 'Enable \"Etag\" header')\n  // There are a lot...\n  .option('-H, --host', 'Hostname to bind', 'localhost')\n  .option('-p, --port', 'Port to bind', 5000)\n  .action((dir, opts) => {\n    // Program handler\n  })\n  .parse(process.argv);\n```\n\nWhen `sirv --help` is run, the generated help text is trimmed, fully aware that there's only one command in this program:\n\n      Description\n        Run a static file server\n\n      Usage\n        $ sirv [dir] [options]\n\n      Options\n        -D, --dev        Enable \"dev\" mode\n        -e, --etag       Enable \"Etag\" header\n        -H, --host       Hostname to bind  (default localhost)\n        -p, --port       Port to bind  (default 5000)\n        -v, --version    Displays current version\n        -h, --help       Displays this message\n\n      Examples\n        $ sirv public -qeim 31536000\n        $ sirv --port 8080 --etag\n        $ sirv my-app --dev\n\n## Command Aliases\n\nCommand aliases are alternative names (aliases) for a command. They are often used as shortcuts or as typo relief!\n\nThe aliased names do not appear in the general help text.<br>\nInstead, they only appear within the Command-specific help text under an \"Aliases\" section.\n\n***Limitations***\n\n*   You cannot assign aliases while in [Single Command Mode](#single-command-mode)\n*   You cannot call [`prog.alias()`](#progaliasnames) before defining any Commands (via `prog.commmand()`)\n*   You, the developer, must keep track of which aliases have already been used and/or exist as Command names\n\n***Example***\n\nLet's reconstruct the `npm install` command as a Sade program:\n\n```js\nsade('npm')\n  // ...\n  .command('install [package]', 'Install a package', {\n    alias: ['i', 'add', 'isntall']\n  })\n  .option('-P, --save-prod', 'Package will appear in your dependencies.')\n  .option('-D, --save-dev', 'Package will appear in your devDependencies.')\n  .option('-O, --save-optional', 'Package will appear in your optionalDependencies')\n  .option('-E, --save-exact', 'Save exact versions instead of using a semver range operator')\n  // ...\n```\n\nWhen we run `npm --help` we'll see this general help text:\n\n      Usage\n        $ npm <command> [options]\n\n      Available Commands\n        install    Install a package\n\n      For more info, run any command with the `--help` flag\n        $ npm install --help\n\n      Options\n        -v, --version    Displays current version\n        -h, --help       Displays this message\n\nWhen we run `npm install --help` — ***or*** the help flag with any of `install`'s aliases — we'll see this command-specific help text:\n\n      Description\n        Install a package\n\n      Usage\n        $ npm install [package] [options]\n\n      Aliases\n        $ npm i\n        $ npm add\n        $ npm isntall\n\n      Options\n        -P, --save-prod        Package will appear in your dependencies.\n        -D, --save-dev         Package will appear in your devDependencies.\n        -O, --save-optional    Package will appear in your optionalDependencies\n        -E, --save-exact       Save exact versions instead of using a semver range operator\n        -h, --help             Displays this message\n\n## API\n\n### sade(name, isSingle)\n\nReturns: `Program`\n\nReturns your chainable Sade instance, aka your `Program`.\n\n#### name\n\nType: `String`<br>\nRequired: `true`\n\nThe name of your `Program` / binary application.\n\n#### isSingle\n\nType: `Boolean`<br>\nDefault: `name.includes(' ');`\n\nIf your `Program` is meant to have ***only one command***.<br>\nWhen `true`, this simplifies your generated `--help` output such that:\n\n*   the \"root-level help\" is your *only* help text\n*   the \"root-level help\" does not display an `Available Commands` section\n*   the \"root-level help\" does not inject `$ name <command>` into the `Usage` section\n*   the \"root-level help\" does not display `For more info, run any command with the `--help` flag` text\n\nYou may customize the `Usage` of your command by modifying the `name` argument directly.<br>\nPlease read [Single Command Mode](#single-command-mode) for an example and more information.\n\n> **Important:** Whenever `name` includes a custom usage, then `isSingle` is automatically assumed and enforced!\n\n### prog.command(usage, desc, opts)\n\nCreate a new Command for your Program. This changes the current state of your Program.\n\nAll configuration methods (`prog.describe`, `prog.action`, etc) will apply to this Command until another Command has been created!\n\n#### usage\n\nType: `String`\n\nThe usage pattern for your current Command. This will be included in the general or command-specific `--help` output.\n\n*Required* arguments are wrapped with `<` and `>` characters; for example, `<foo>` and `<bar>`.\n\n*Optional* arguments are wrapped with `[` and `]` characters; for example, `[foo]` and `[bar]`.\n\nAll arguments are ***positionally important***, which means they are passed to your current Command's [`handler`](#handler) function in the order that they were defined.\n\nWhen optional arguments are defined but don't receive a value, their positionally-equivalent function parameter will be `undefined`.\n\n> **Important:** You **must** define & expect required arguments *before* optional arguments!\n\n```js\nsade('foo')\n\n  .command('greet <adjective> <noun>')\n  .action((adjective, noun, opts) => {\n    console.log(`Hello, ${adjective} ${noun}!`);\n  })\n\n  .command('drive <vehicle> [color] [speed]')\n  .action((vehicle, color, speed, opts) => {\n    let arr = ['Driving my'];\n    arr.push(color ? `${color} ${vehicle}` : vehicle);\n    speed && arr.push(`at ${speed}`);\n    opts.yolo && arr.push('...YOLO!!');\n    let str = arr.join(' ');\n    console.log(str);\n  });\n```\n\n```sh\n$ foo greet beautiful person\n# //=> Hello, beautiful person!\n\n$ foo drive car\n# //=> Driving my car\n\n$ foo drive car red\n# //=> Driving my red card\n\n$ foo drive car blue 100mph --yolo\n# //=> Driving my blue car at 100mph ...YOLO!!\n```\n\n#### desc\n\nType: `String`<br>\nDefault: `''`\n\nThe Command's description. The value is passed directly to [`prog.describe`](#progdescribetext).\n\n#### opts\n\nType: `Object`<br>\nDefault: `{}`\n\n##### opts.alias\n\nType: `String|Array`\n\nOptionally define one or more aliases for the current Command.<br>\nWhen declared, the `opts.alias` value is passed *directly* to the [`prog.alias`](#progaliasnames) method.\n\n```js\n// Program A is equivalent to Program B\n// ---\n\nconst A = sade('bin')\n  .command('build', 'My build command', { alias: 'b' })\n  .command('watch', 'My watch command', { alias: ['w', 'dev'] });\n\nconst B = sade('bin')\n  .command('build', 'My build command').alias('b')\n  .command('watch', 'My watch command').alias('w', 'dev');\n```\n\n##### opts.default\n\nType: `Boolean`\n\nManually set/force the current Command to be the Program's default command. This ensures that the current Command will run if no command was specified.\n\n> **Important:** If you run your Program without a Command *and* without specifying a default command, your Program will exit with a `No command specified` error.\n\n```js\nconst prog = sade('greet');\n\nprog.command('hello');\n//=> only runs if :: `$ greet hello`\n\n// $ greet\n//=> error: No command specified.\n\nprog.command('howdy', '', { default:true });\n//=> runs as `$ greet` OR `$ greet howdy`\n\n// $ greet\n//=> runs 'howdy' handler\n\n// $ greet foobar\n//=> error: Invalid command\n```\n\n### prog.describe(text)\n\nAdd a description to the current Command.\n\n#### text\n\nType: `String|Array`\n\nThe description text for the current Command. This will be included in the general or command-specific `--help` output.\n\nInternally, your description will be separated into an `Array` of sentences.\n\nFor general `--help` output, ***only*** the first sentence will be displayed. However, **all sentences** will be printed for command-specific `--help` text.\n\n> **Note:** Pass an `Array` if you don't want internal assumptions. However, the first item is *always* displayed in general help, so it's recommended to keep it short.\n\n### prog.alias(...names)\n\nDefine one or more aliases for the current Command.\n\n> **Important:** An error will be thrown if:<br>1) the program is in [Single Command Mode](#single-command-mode); or<br>2) `prog.alias` is called before any `prog.command`.\n\n#### names\n\nType: `String`\n\nThe list of alternative names (aliases) for the current Command.<br>\nFor example, you may want to define shortcuts and/or common typos for the Command's full name.\n\n> **Important:** Sade *does not* check if the incoming `names` are already in use by other Commands or their aliases.<br>During conflicts, the Command with the same `name` is given priority, otherwise the first Command (according to Program order) with `name` as an alias is chosen.\n\nThe `prog.alias()` is append-only, so calling it multiple times within a Command context will *keep* all aliases, including those initially passed via [`opts.alias`](#optsdefault).\n\n```js\nsade('bin')\n  .command('hello <name>', 'Greet someone by their name', {\n    alias: ['hey', 'yo']\n  })\n  .alias('hi', 'howdy')\n  .alias('hola', 'oi');\n//=> hello aliases: hey, yo, hi, howdy, hola, oi\n```\n\n### prog.action(handler)\n\nAttach a callback to the current Command.\n\n#### handler\n\nType: `Function`\n\nThe function to run when the current Command is executed.\n\nIts parameters are based (positionally) on your Command's [`usage`](#usage-1) definition.\n\nAll options, flags, and extra/unknown values are included as the last parameter.\n\n> **Note:** Optional arguments are also passed as parameters & may be `undefined`!\n\n```js\nsade('foo')\n  .command('cp <src> <dest>')\n  .option('-f, --force', 'Overwrite without confirmation')\n  .option('-c, --clone-dir', 'Copy files to additional directory')\n  .option('-v, --verbose', 'Enable verbose output')\n  .action((src, dest, opts) => {\n    console.log(`Copying files from ${src} --> ${dest}`);\n    opts.c && console.log(`ALSO copying files from ${src} --> ${opts['clone-dir']}`);\n    console.log('My options:', opts);\n  })\n\n// $ foo cp original my-copy -v\n//=> Copying files from original --> my-copy\n//=> My options: { _:[], v:true, verbose:true }\n\n// $ foo cp original my-copy --clone-dir my-backup\n//=> Copying files from original --> my-copy\n//=> ALSO copying files from original --> my-backup\n//=> My options: { _:[], c:'my-backup', 'clone-dir':'my-backup' }\n```\n\n### prog.example(str)\n\nAdd an example for the current Command.\n\n#### str\n\nType: `String`\n\nThe example string to add. This will be included in the general or command-specific `--help` output.\n\n> **Note:** Your example's `str` will be prefixed with your Program's [`name`](#sadename).\n\n### prog.option(flags, desc, value)\n\nAdd an Option to the current Command.\n\n#### flags\n\nType: `String`\n\nThe Option's flags, which may optionally include an alias.\n\nYou may use a comma (`,`) or a space (` `) to separate the flags.\n\n> **Note:** The short & long flags can be declared in any order. However, the alias will always be displayed first.\n\n> **Important:** If using hyphenated flag names, they will be accessible **as declared** within your [`action()`](#progactionhandler) handler!\n\n```js\nprog.option('--global'); // no alias\nprog.option('-g, --global'); // alias first, comma\nprog.option('--global -g'); // alias last, space\n// etc...\n```\n\n#### desc\n\nType: `String`\n\nThe description for the Option.\n\n#### value\n\nType: `String`\n\nThe **default** value for the Option.\n\nFlags and aliases, if parsed, are `true` by default. See [`mri`](https://github.com/lukeed/mri#minimist) for more info.\n\n> **Note:** You probably only want to define a default `value` if you're expecting a `String` or `Number` value type.\n\nIf you *do* pass a `String` or `Number` value type, your flag value will be casted to the same type. See [`mri#options.default`](https://github.com/lukeed/mri#optionsdefault) for info~!\n\n### prog.version(str)\n\nThe `--version` and `-v` flags will automatically output the Program version.\n\n#### str\n\nType: `String`<br>\nDefault: `0.0.0`\n\nThe new version number for your Program.\n\n> **Note:** Your Program `version` is `0.0.0` until you change it.\n\n### prog.parse(arr, opts)\n\nParse a set of CLI arguments.\n\n#### arr\n\nType: `Array`\n\nYour Program's `process.argv` input.\n\n> **Important:** Do not `.slice(2)`! Doing so will break parsing~!\n\n#### opts\n\nType: `Object`<br>\nDefault: `{}`\n\nAdditional `process.argv` parsing config. See [`mri`'s options](https://github.com/lukeed/mri#mriargs-options) for details.\n\n> **Important:** These values *override* any internal values!\n\n```js\nprog\n  .command('hello')\n  .option('-f, --force', 'My flag');\n//=> currently has alias pair: f <--> force\n\nprog.parse(process.argv, {\n  alias: {\n    f: ['foo', 'fizz']\n  },\n  default: {\n    abc: 123\n  }\n});\n//=> ADDS alias pair: f <--> foo\n//=> REMOVES alias pair: f <--> force\n//=> ADDS alias pair: f <--> fizz\n//=> ADDS default: abc -> 123 (number)\n```\n\n#### opts.unknown\n\nType: `Function`<br>\nDefault: `undefined`\n\nCallback to run when an unspecified option flag has been found. This is [passed directly to `mri`](https://github.com/lukeed/mri#optionsunknown).\n\nYour handler will receive the unknown flag (string) as its only argument.<br>\nYou may return a string, which will be used as a custom error message. Otherwise, a default message is displayed.\n\n```js\nsade('sirv')\n  .command('start [dir]')\n  .parse(process.argv, {\n    unknown: arg => `Custom error message: ${arg}`\n  });\n\n/*\n$ sirv start --foobar\n\n  ERROR\n    Custom error message: --foobar\n\n  Run `$ sirv --help` for more info.\n*/\n```\n\n#### opts.lazy\n\nType: `Boolean`<br>\nDefault: `false`\n\nIf true, Sade will not immediately execute the `action` handler. Instead, `parse()` will return an object of `{ name, args, handler }` shape, wherein the `name` is the command name, `args` is all arguments that *would be* passed to the action handler, and `handler` is the function itself.\n\nFrom this, you may choose when to run the `handler` function. You also have the option to further modify the `args` for any reason, if needed.\n\n```js\nlet { name, args, handler } = prog.parse(process.argv, { lazy:true });\nconsole.log('> Received command: ', name);\n\n// later on...\nhandler.apply(null, args);\n```\n\n### prog.help(cmd)\n\nManually display the help text for a given command. If no command name is provided, the general/global help is printed.\n\nYour general and command-specific help text is automatically attached to the `--help` and `-h` flags.\n\n> **Note:** You don't have to call this directly! It's automatically run when you `bin --help`\n\n#### cmd\n\nType: `String`<br>\nDefault: `null`\n\nThe name of the command for which to display help. Otherwise displays the general help.\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n"},{"text":"# slash\n\n> Convert Windows backslash paths to slash paths: `foo\\\\bar` ➔ `foo/bar`\n\n[Forward-slash paths can be used in Windows](http://superuser.com/a/176395/6877) as long as they're not extended-length paths and don't contain any non-ascii characters.\n\nThis was created since the `path` methods in Node.js outputs `\\\\` paths on Windows.\n\n## Install\n\n    $ npm install slash\n\n## Usage\n\n```js\nimport path from 'path';\nimport slash from 'slash';\n\nconst string = path.join('foo', 'bar');\n// Unix    => foo/bar\n// Windows => foo\\\\bar\n\nslash(string);\n// Unix    => foo/bar\n// Windows => foo/bar\n```\n\n## API\n\n### slash(path)\n\nType: `string`\n\nAccepts a Windows backslash path and returns a path with forward slashes.\n\n***\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-slash?utm_source=npm-slash&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n"},{"text":"# to-regex-range [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\\&hosted_button_id=W8YFZ425KND68) [![NPM version](https://img.shields.io/npm/v/to-regex-range.svg?style=flat)](https://www.npmjs.com/package/to-regex-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range) [![NPM total downloads](https://img.shields.io/npm/dt/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range) [![Linux Build Status](https://img.shields.io/travis/micromatch/to-regex-range.svg?style=flat\\&label=Travis)](https://travis-ci.org/micromatch/to-regex-range)\n\n> Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex-range\n```\n\n<details>\n<summary><strong>What does this do?</strong></summary>\n\n<br>\n\nThis libary generates the `source` string to be passed to `new RegExp()` for matching a range of numbers.\n\n**Example**\n\n```js\nconst toRegexRange = require('to-regex-range');\nconst regex = new RegExp(toRegexRange('15', '95'));\n```\n\nA string is returned so that you can do whatever you need with it before passing it to `new RegExp()` (like adding `^` or `$` boundaries, defining flags, or combining it another string).\n\n<br>\n\n</details>\n\n<details>\n<summary><strong>Why use this library?</strong></summary>\n\n<br>\n\n### Convenience\n\nCreating regular expressions for matching numbers gets deceptively complicated pretty fast.\n\nFor example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc:\n\n*   regex for matching `1` => `/1/` (easy enough)\n*   regex for matching `1` through `5` => `/[1-5]/` (not bad...)\n*   regex for matching `1` or `5` => `/(1|5)/` (still easy...)\n*   regex for matching `1` through `50` => `/([1-9]|[1-4][0-9]|50)/` (uh-oh...)\n*   regex for matching `1` through `55` => `/([1-9]|[1-4][0-9]|5[0-5])/` (no prob, I can do this...)\n*   regex for matching `1` through `555` => `/([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/` (maybe not...)\n*   regex for matching `0001` through `5555` => `/(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/` (okay, I get the point!)\n\nThe numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation.\n\n**Learn more**\n\nIf you're interested in learning more about [character classes](http://www.regular-expressions.info/charclass.html) and other regex features, I personally have always found [regular-expressions.info](http://www.regular-expressions.info/charclass.html) to be pretty useful.\n\n### Heavily tested\n\nAs of April 07, 2019, this library runs [>1m test assertions](./test/test.js) against generated regex-ranges to provide brute-force verification that results are correct.\n\nTests run in ~280ms on my MacBook Pro, 2.5 GHz Intel Core i7.\n\n### Optimized\n\nGenerated regular expressions are optimized:\n\n*   duplicate sequences and character classes are reduced using quantifiers\n*   smart enough to use `?` conditionals when number(s) or range(s) can be positive or negative\n*   uses fragment caching to avoid processing the same exact string more than once\n\n<br>\n\n</details>\n\n## Usage\n\nAdd this library to your javascript application with the following line of code\n\n```js\nconst toRegexRange = require('to-regex-range');\n```\n\nThe main export is a function that takes two integers: the `min` value and `max` value (formatted as strings or numbers).\n\n```js\nconst source = toRegexRange('15', '95');\n//=> 1[5-9]|[2-8][0-9]|9[0-5]\n\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('14')); //=> false\nconsole.log(regex.test('50')); //=> true\nconsole.log(regex.test('94')); //=> true\nconsole.log(regex.test('96')); //=> false\n```\n\n## Options\n\n### options.capture\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nWrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges.\n\n```js\nconsole.log(toRegexRange('-10', '10'));\n//=> -[1-9]|-?10|[0-9]\n\nconsole.log(toRegexRange('-10', '10', { capture: true }));\n//=> (-[1-9]|-?10|[0-9])\n```\n\n### options.shorthand\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nUse the regex shorthand for `[0-9]`:\n\n```js\nconsole.log(toRegexRange('0', '999999'));\n//=> [0-9]|[1-9][0-9]{1,5}\n\nconsole.log(toRegexRange('0', '999999', { shorthand: true }));\n//=> \\d|[1-9]\\d{1,5}\n```\n\n### options.relaxZeros\n\n**Type**: `boolean`\n\n**Default**: `true`\n\nThis option relaxes matching for leading zeros when when ranges are zero-padded.\n\n```js\nconst source = toRegexRange('-0010', '0010');\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('-10')); //=> true\nconsole.log(regex.test('-010')); //=> true\nconsole.log(regex.test('-0010')); //=> true\nconsole.log(regex.test('10')); //=> true\nconsole.log(regex.test('010')); //=> true\nconsole.log(regex.test('0010')); //=> true\n```\n\nWhen `relaxZeros` is false, matching is strict:\n\n```js\nconst source = toRegexRange('-0010', '0010', { relaxZeros: false });\nconst regex = new RegExp(`^${source}$`);\nconsole.log(regex.test('-10')); //=> false\nconsole.log(regex.test('-010')); //=> false\nconsole.log(regex.test('-0010')); //=> true\nconsole.log(regex.test('10')); //=> false\nconsole.log(regex.test('010')); //=> false\nconsole.log(regex.test('0010')); //=> true\n```\n\n## Examples\n\n| **Range**                   | **Result**                                                                      | **Compile time** |\n| ---                         | ---                                                                             | ---              |\n| `toRegexRange(-10, 10)`     | `-[1-9]\\|-?10\\|[0-9]`                                                           | *132μs*          |\n| `toRegexRange(-100, -10)`   | `-1[0-9]\\|-[2-9][0-9]\\|-100`                                                    | *50μs*           |\n| `toRegexRange(-100, 100)`   | `-[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9]`                                            | *42μs*           |\n| `toRegexRange(001, 100)`    | `0{0,2}[1-9]\\|0?[1-9][0-9]\\|100`                                                | *109μs*          |\n| `toRegexRange(001, 555)`    | `0{0,2}[1-9]\\|0?[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]`                | *51μs*           |\n| `toRegexRange(0010, 1000)`  | `0{0,2}1[0-9]\\|0{0,2}[2-9][0-9]\\|0?[1-9][0-9]{2}\\|1000`                         | *31μs*           |\n| `toRegexRange(1, 50)`       | `[1-9]\\|[1-4][0-9]\\|50`                                                         | *24μs*           |\n| `toRegexRange(1, 55)`       | `[1-9]\\|[1-4][0-9]\\|5[0-5]`                                                     | *23μs*           |\n| `toRegexRange(1, 555)`      | `[1-9]\\|[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]`                        | *30μs*           |\n| `toRegexRange(1, 5555)`     | `[1-9]\\|[1-9][0-9]{1,2}\\|[1-4][0-9]{3}\\|5[0-4][0-9]{2}\\|55[0-4][0-9]\\|555[0-5]` | *43μs*           |\n| `toRegexRange(111, 555)`    | `11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]`                     | *38μs*           |\n| `toRegexRange(29, 51)`      | `29\\|[34][0-9]\\|5[01]`                                                          | *24μs*           |\n| `toRegexRange(31, 877)`     | `3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7]`                       | *32μs*           |\n| `toRegexRange(5, 5)`        | `5`                                                                             | *8μs*            |\n| `toRegexRange(5, 6)`        | `5\\|6`                                                                          | *11μs*           |\n| `toRegexRange(1, 2)`        | `1\\|2`                                                                          | *6μs*            |\n| `toRegexRange(1, 5)`        | `[1-5]`                                                                         | *15μs*           |\n| `toRegexRange(1, 10)`       | `[1-9]\\|10`                                                                     | *22μs*           |\n| `toRegexRange(1, 100)`      | `[1-9]\\|[1-9][0-9]\\|100`                                                        | *25μs*           |\n| `toRegexRange(1, 1000)`     | `[1-9]\\|[1-9][0-9]{1,2}\\|1000`                                                  | *31μs*           |\n| `toRegexRange(1, 10000)`    | `[1-9]\\|[1-9][0-9]{1,3}\\|10000`                                                 | *34μs*           |\n| `toRegexRange(1, 100000)`   | `[1-9]\\|[1-9][0-9]{1,4}\\|100000`                                                | *36μs*           |\n| `toRegexRange(1, 1000000)`  | `[1-9]\\|[1-9][0-9]{1,5}\\|1000000`                                               | *42μs*           |\n| `toRegexRange(1, 10000000)` | `[1-9]\\|[1-9][0-9]{1,6}\\|10000000`                                              | *42μs*           |\n\n## Heads up!\n\n**Order of arguments**\n\nWhen the `min` is larger than the `max`, values will be flipped to create a valid range:\n\n```js\ntoRegexRange('51', '29');\n```\n\nIs effectively flipped to:\n\n```js\ntoRegexRange('29', '51');\n//=> 29|[3-4][0-9]|5[0-1]\n```\n\n**Steps / increments**\n\nThis library does not support steps (increments). A pr to add support would be welcome.\n\n## History\n\n### v2.0.0 - 2017-04-21\n\n**New features**\n\nAdds support for zero-padding!\n\n### v1.0.0\n\n**Optimizations**\n\nRepeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching.\n\n## Attribution\n\nInspired by the python library [range-regex](https://github.com/dimka665/range-regex).\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n*(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)*\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n*   [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used by micromatch.\")\n*   [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n*   [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n*   [repeat-element](https://www.npmjs.com/package/repeat-element): Create an array by repeating the given value n times. | [homepage](https://github.com/jonschlinkert/repeat-element \"Create an array by repeating the given value n times.\")\n*   [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n\n### Contributors\n\n| **Commits** | **Contributor** |\\\n| --- | --- |\\\n| 63 | [jonschlinkert](https://github.com/jonschlinkert) |\\\n| 3  | [doowb](https://github.com/doowb) |\\\n| 2  | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n*   [GitHub Profile](https://github.com/jonschlinkert)\n*   [Twitter Profile](https://twitter.com/jonschlinkert)\n*   [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\nPlease consider supporting me on Patreon, or [start your own Patreon page](https://patreon.com/invite/bxpbvm)!\n\n<a href=\"https://www.patreon.com/jonschlinkert\">\n<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" height=\"50\">\n</a>\n\n### License\n\nCopyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n*This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 07, 2019.*\n"},{"text":"# trough\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\n`trough` is middleware.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`trough()`](#trough-1)\n    *   [`wrap(middleware, callback)(…input)`](#wrapmiddleware-callbackinput)\n    *   [`Trough`](#trough-2)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\n`trough` is like [`ware`][ware] with less sugar.\nMiddleware functions can also change the input of the next.\n\nThe word **trough** (`/trôf/`) means a channel used to convey a liquid.\n\n## When should I use this?\n\nYou can use this package when you’re building something that accepts “plugins”,\nwhich are functions, that can be sync or async, promises or callbacks.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install trough\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {trough} from \"https://esm.sh/trough@2\"\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {trough} from \"https://esm.sh/trough@2?bundle\"\n</script>\n```\n\n## Use\n\n```js\nimport process from 'node:process'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {trough} from 'trough'\n\nconst pipeline = trough()\n  .use(function (fileName) {\n    console.log('Checking… ' + fileName)\n  })\n  .use(function (fileName) {\n    return path.join(process.cwd(), fileName)\n  })\n  .use(function (filePath, next) {\n    fs.stat(filePath, function (error, stats) {\n      next(error, {filePath, stats})\n    })\n  })\n  .use(function (ctx, next) {\n    if (ctx.stats.isFile()) {\n      fs.readFile(ctx.filePath, next)\n    } else {\n      next(new Error('Expected file'))\n    }\n  })\n\npipeline.run('readme.md', console.log)\npipeline.run('node_modules', console.log)\n```\n\nYields:\n\n```txt\nChecking… readme.md\nChecking… node_modules\nError: Expected file\n    at ~/example.js:22:12\n    at wrapped (~/node_modules/trough/index.js:111:16)\n    at next (~/node_modules/trough/index.js:62:23)\n    at done (~/node_modules/trough/index.js:145:7)\n    at ~/example.js:15:7\n    at FSReqCallback.oncomplete (node:fs:199:5)\nnull <Buffer 23 20 74 72 6f 75 67 68 0a 0a 5b 21 5b 42 75 69 6c 64 5d 5b 62 75 69 6c 64 2d 62 61 64 67 65 5d 5d 5b 62 75 69 6c 64 5d 0a 5b 21 5b 43 6f 76 65 72 61 ... 7994 more bytes>\n```\n\n## API\n\nThis package exports the identifiers `trough` and `wrap`.\nThere is no default export.\n\n### `trough()`\n\nCreate a new [`Trough`][trough].\n\n### `wrap(middleware, callback)(…input)`\n\nCall `middleware` with all input.\nIf `middleware` accepts more arguments than given in input, an extra `done`\nfunction is passed in after the input when calling it.\nIn that case, `done` must be called.\n\nThe first value in `input` is the main input value.\nAll other input values are the rest input values.\nThe values given to `callback` are the input values, merged with every\nnon-nullish output value.\n\n*   If `middleware` throws an error, returns a promise that is rejected, or\n    calls the given `done` function with an error, `callback` is called with\n    that error\n*   If `middleware` returns a value or returns a promise that is resolved, that\n    value is the main output value\n*   If `middleware` calls `done`, all non-nullish values except for the first\n    one (the error) overwrite the output values\n\n### `Trough`\n\nA pipeline.\n\n#### `Trough#run([input…, ]done)`\n\nRun the pipeline (all [`use()`][use]d middleware).\nCalls [`done`][done] on completion with either an error or the output of the\nlast middleware.\n\n> 👉 **Note**: as the length of input defines whether [async][] functions get a\n> `next` function, it’s recommended to keep `input` at one value normally.\n\n##### `function done(err?, [output…])`\n\nThe final handler passed to [`run()`][run], called with an error if a\n[middleware function][fn] rejected, passed, or threw one, or the output of the\nlast middleware function.\n\n#### `Trough#use(fn)`\n\nAdd `fn`, a [middleware function][fn], to the pipeline.\n\n##### `function fn([input…, ][next])`\n\nA middleware function called with the output of its predecessor.\n\n###### Synchronous\n\nIf `fn` returns or throws an error, the pipeline fails and `done` is called\nwith that error.\n\nIf `fn` returns a value (neither `null` nor `undefined`), the first `input` of\nthe next function is set to that value (all other `input` is passed through).\n\nThe following example shows how returning an error stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return new Error('Got: ' + thing)\n  })\n  .run('some value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: some value\n    at ~/example.js:5:12\n    …\n```\n\nThe following example shows how throwing an error stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    throw new Error('Got: ' + thing)\n  })\n  .run('more value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: more value\n    at ~/example.js:5:11\n    …\n```\n\nThe following example shows how the first output can be modified:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return 'even ' + thing\n  })\n  .run('more value', 'untouched', console.log)\n```\n\nYields:\n\n```txt\nnull 'even more value' 'untouched'\n```\n\n###### Promise\n\nIf `fn` returns a promise, and that promise rejects, the pipeline fails and\n`done` is called with the rejected value.\n\nIf `fn` returns a promise, and that promise resolves with a value (neither\n`null` nor `undefined`), the first `input` of the next function is set to that\nvalue (all other `input` is passed through).\n\nThe following example shows how rejecting a promise stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return new Promise(function (resolve, reject) {\n      reject('Got: ' + thing)\n    })\n  })\n  .run('thing', console.log)\n```\n\nYields:\n\n```txt\nGot: thing\n```\n\nThe following example shows how the input isn’t touched by resolving to `null`.\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function () {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        resolve(null)\n      }, 100)\n    })\n  })\n  .run('Input', console.log)\n```\n\nYields:\n\n```txt\nnull 'Input'\n```\n\n###### Asynchronous\n\nIf `fn` accepts one more argument than the given `input`, a `next` function is\ngiven (after the input).  `next` must be called, but doesn’t have to be called\nasync.\n\nIf `next` is given a value (neither `null` nor `undefined`) as its first\nargument, the pipeline fails and `done` is called with that value.\n\nIf `next` is given no value (either `null` or `undefined`) as the first\nargument, all following non-nullish values change the input of the following\nfunction, and all nullish values default to the `input`.\n\nThe following example shows how passing a first argument stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing, next) {\n    next(new Error('Got: ' + thing))\n  })\n  .run('thing', console.log)\n```\n\nYields:\n\n```txt\nError: Got: thing\n    at ~/example.js:5:10\n```\n\nThe following example shows how more values than the input are passed.\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing, next) {\n    setTimeout(function () {\n      next(null, null, 'values')\n    }, 100)\n  })\n  .run('some', console.log)\n```\n\nYields:\n\n```txt\nnull 'some' 'values'\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/trough/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/trough/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/trough.svg\n\n[coverage]: https://codecov.io/github/wooorm/trough\n\n[downloads-badge]: https://img.shields.io/npm/dm/trough.svg\n\n[downloads]: https://www.npmjs.com/package/trough\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/trough.svg\n\n[size]: https://bundlephobia.com/result?p=trough\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[ware]: https://github.com/segmentio/ware\n\n[trough]: #trough-1\n\n[use]: #troughusefn\n\n[run]: #troughruninput-done\n\n[fn]: #function-fninput-next\n\n[done]: #function-doneerr-output\n\n[async]: #asynchronous\n"},{"text":"# [![unified][logo]][site]\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**unified** is an interface for processing text using syntax trees.\nIt’s what powers [**remark**][remark] (Markdown), [**retext**][retext] (natural\nlanguage), and [**rehype**][rehype] (HTML), and allows for processing between\nformats.\n\n## Intro\n\n**unified** enables new exciting projects like [Gatsby][] to pull in Markdown,\n[MDX][] to embed [JSX][], and [Prettier][] to format it.\nIt’s used in about 500k projects on GitHub and has about 25m downloads each\nmonth on npm: you’re probably using it.\nSome notable users are [Node.js][], [Vercel][], [Netlify][], [GitHub][],\n[Mozilla][], [WordPress][], [Adobe][], [Facebook][], [Google][], and many more.\n\n*   To read about what we are up to, follow us [Twitter][]\n*   For a less technical and more practical introduction to unified, visit\n    [`unifiedjs.com`][site] and peruse its [Learn][] section\n*   Browse [awesome unified][awesome] to find out more about the ecosystem\n*   Questions?\n    Get help on [Discussions][chat]!\n*   Check out [Contribute][] below to find out how to help out, or become a\n    backer or sponsor on [OpenCollective][collective]\n\n## Sponsors\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<!--lint ignore no-html-->\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://americanexpress.io\">American Express</a><br><br>\n  <a href=\"https://americanexpress.io\"><img src=\"https://avatars1.githubusercontent.com/u/3853301?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"8\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install unified\n```\n\n## Use\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport {reporter} from 'vfile-reporter'\n\nunified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n  .then(\n    (file) => {\n      console.error(reporter(file))\n      console.log(String(file))\n    },\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n## Contents\n\n*   [Description](#description)\n*   [API](#api)\n    *   [`processor()`](#processor)\n    *   [`processor.use(plugin[, options])`](#processoruseplugin-options)\n    *   [`processor.parse(file)`](#processorparsefile)\n    *   [`processor.stringify(node[, file])`](#processorstringifynode-file)\n    *   [`processor.run(node[, file][, done])`](#processorrunnode-file-done)\n    *   [`processor.runSync(node[, file])`](#processorrunsyncnode-file)\n    *   [`processor.process(file[, done])`](#processorprocessfile-done)\n    *   [`processor.processSync(file|value)`](#processorprocesssyncfilevalue)\n    *   [`processor.data([key[, value]])`](#processordatakey-value)\n    *   [`processor.freeze()`](#processorfreeze)\n*   [`Plugin`](#plugin)\n    *   [`function attacher([options])`](#function-attacheroptions)\n    *   [`function transformer(node, file[, next])`](#function-transformernode-file-next)\n*   [`Preset`](#preset)\n*   [Contribute](#contribute)\n*   [Acknowledgments](#acknowledgments)\n*   [License](#license)\n\n## Description\n\n**unified** is an interface for processing text using syntax trees.\nSyntax trees are a representation of text understandable to programs.\nThose programs, called [*plugin*][plugin]s, take these trees and inspect and\nmodify them.\nTo get to the syntax tree from text, there is a [*parser*][parser].\nTo get from that back to text, there is a [*compiler*][compiler].\nThis is the [*process*][process] of a *processor*.\n\n```ascii\n| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          +--------+                     +----------+\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          +--------+          |          +----------+\n                              X\n                              |\n                       +--------------+\n                       | Transformers |\n                       +--------------+\n```\n\n###### Processors\n\nEvery **processor** implements another processor.\nTo create a processor, call another processor.\nThe new processor is configured to work the same as its ancestor.\nBut when the descendant processor is configured in the future it does not affect\nthe ancestral processor.\n\nWhen processors are exposed from a module (for example, `unified` itself) they\nshould not be configured directly, as that would change their behavior for all\nmodule users.\nThose processors are [*frozen*][freeze] and they should be called to create a\nnew processor before they are used.\n\n###### Syntax trees\n\nThe **syntax trees** used in **unified** are [**unist**][unist] nodes.\nA [**node**][node] is a plain JavaScript objects with a `type` field.\nThe semantics of nodes and format of syntax trees is defined by other projects.\n\nThere are several [*utilities*][unist-utilities] for working with nodes.\n\n*   [**esast**][esast] — JS\n*   [**hast**][hast] — HTML\n*   [**mdast**][mdast] — Markdown\n*   [**nlcst**][nlcst] — Natural language\n*   [**xast**][xast] — XML\n\n###### List of processors\n\nThe following projects process different [*syntax tree*][syntax-tree] formats.\nThey parse text to a syntax tree and compile that back to text.\nThese processors can be used as is, or their parser and compiler can be mixed\nand matched with **unified** and plugins to process between different syntaxes.\n\n*   [**rehype**][rehype] ([*hast*][hast]) — HTML\n*   [**remark**][remark] ([*mdast*][mdast]) — Markdown\n*   [**retext**][retext] ([*nlcst*][nlcst]) — Natural language\n\n###### List of plugins\n\nThe below [**plugins**][plugin] work with **unified**, on all [*syntax\ntree*][syntax-tree] formats:\n\n*   [`unified-diff`](https://github.com/unifiedjs/unified-diff)\n    — Ignore messages for unchanged lines in Travis\n*   [`unified-message-control`](https://github.com/unifiedjs/unified-message-control)\n    — Enable, disable, and ignore messages\n\nSee [**remark**][remark-plugins], [**rehype**][rehype-plugins], and\n[**retext**][retext-plugins] for their lists of plugins.\n\n###### File\n\nWhen processing a document, **metadata** is often gathered about that document.\n[**vfile**][vfile] is a virtual file format that stores data, metadata, and\nmessages about files for **unified** and its plugins.\n\nThere are several [*utilities*][vfile-utilities] for working with these files.\n\n###### Configuration\n\n[*Processors*][processors] are configured with [*plugin*][plugin]s or\nwith the [`data`][data] method.\n\n###### Integrations\n\n**unified** can integrate with the file system with [`unified-engine`][engine].\nCLI apps can be created with [`unified-args`][args], Gulp plugins with\n[`unified-engine-gulp`][gulp], and Atom Linters with\n[`unified-engine-atom`][atom].\n\n[`unified-stream`][stream] provides a streaming interface.\n\n###### Programming interface\n\nThe API provided by **unified** allows multiple files to be processed and gives\naccess to *metadata* (such as lint messages):\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkPresetLintMarkdownStyleGuide from 'remark-preset-lint-markdown-style-guide'\nimport remarkRetext from 'remark-retext'\nimport retextEnglish from 'retext-english'\nimport retextEquality from 'retext-equality'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\nimport {reporter} from 'vfile-reporter'\n\nunified()\n  .use(remarkParse)\n  .use(remarkPresetLintMarkdownStyleGuide)\n  .use(remarkRetext, unified().use(retextEnglish).use(retextEquality))\n  .use(remarkRehype)\n  .use(rehypeStringify)\n  .process('*Emphasis* and _stress_, you guys!')\n  .then(\n    (file) => {\n      console.error(reporter(file))\n      console.log(String(file))\n    },\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```txt\n  1:16-1:24  warning  Emphasis should use `*` as a marker                                  emphasis-marker  remark-lint\n  1:30-1:34  warning  `guys` may be insensitive, use `people`, `persons`, `folks` instead  gals-man         retext-equality\n\n⚠ 2 warnings\n```\n\n```html\n<p><em>Emphasis</em> and <em>stress</em>, you guys!</p>\n```\n\n###### Processing between syntaxes\n\n[*Processors*][processors] can be combined in two modes.\n\n**Bridge** mode transforms the [*syntax tree*][syntax-tree] from one format\n(*origin*) to another (*destination*).\nAnother processor runs on the destination tree.\nFinally, the original processor continues transforming the origin tree.\n\n**Mutate** mode also transforms the syntax tree from one format to another.\nBut the original processor continues transforming the destination tree.\n\nIn the previous example (“Programming interface”), `remark-retext` is used in\n*bridge* mode: the origin syntax tree is kept after [**retext**][retext] is\ndone; whereas `remark-rehype` is used in *mutate* mode: it sets a new syntax\ntree and discards the origin tree.\n\n*   [`remark-retext`][remark-retext]\n*   [`remark-rehype`][remark-rehype]\n*   [`rehype-retext`][rehype-retext]\n*   [`rehype-remark`][rehype-remark]\n\n## API\n\nThis package exports the following identifiers: `unified`.\nThere is no default export.\n\n### `processor()`\n\n[*Processor*][processors] describing how to *process* text.\n\n###### Returns\n\n`Function` — New [*unfrozen*][freeze] processor that is configured to work the\nsame as its ancestor.\nWhen the descendant processor is configured in the future it does not affect the\nancestral processor.\n\n###### Example\n\nThe following example shows how a new processor can be created (from the remark\nprocessor) and linked to **stdin**(4) and **stdout**(4).\n\n```js\nimport {remark} from 'remark'\nimport concatStream from 'concat-stream'\n\nprocess.stdin.pipe(\n  concatStream((buf) => {\n    process.stdout.write(remark().processSync(buf).toString())\n  })\n)\n```\n\n### `processor.use(plugin[, options])`\n\n[*Configure*][configuration] the processor to use a [*plugin*][plugin] and\noptionally configure that plugin with options.\n\nIf the processor is already using this plugin, the previous plugin configuration\nis changed based on the options that are passed in.\nThe plugin is not added a second time.\n\n###### Signatures\n\n*   `processor.use(plugin[, options])`\n*   `processor.use(preset)`\n*   `processor.use(list)`\n\n###### Parameters\n\n*   `plugin` ([`Attacher`][plugin])\n*   `options` (`*`, optional) — Configuration for `plugin`\n*   `preset` (`Object`) — Object with an optional `plugins` (set to `list`),\n    and/or an optional `settings` object\n*   `list` (`Array`) — List of plugins, presets, and pairs (`plugin` and\n    `options` in an array)\n\n###### Returns\n\n`processor` — The processor that `use` was called on.\n\n###### Note\n\n`use` cannot be called on [*frozen*][freeze] processors.\nCall the processor first to create a new unfrozen processor.\n\n###### Example\n\nThere are many ways to pass plugins to `.use()`.\nThe below example gives an overview.\n\n```js\nimport {unified} from 'unified'\n\nunified()\n  // Plugin with options:\n  .use(pluginA, {x: true, y: true})\n  // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n  .use(pluginA, {y: false, z: true})\n  // Plugins:\n  .use([pluginB, pluginC])\n  // Two plugins, the second with options:\n  .use([pluginD, [pluginE, {}]])\n  // Preset with plugins and settings:\n  .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n  // Settings only:\n  .use({settings: {position: false}})\n```\n\n### `processor.parse(file)`\n\nParse text to a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) — [*File*][file], any value accepted by `vfile()`\n\n###### Returns\n\n[`Node`][node] — Parsed [*syntax tree*][syntax-tree] representing `file`.\n\n###### Note\n\n`parse` freezes the processor if not already [*frozen*][freeze].\n\n`parse` performs the [*parse phase*][description], not the *run phase* or other\nphases.\n\n###### Example\n\nThe below example shows how `parse` can be used to create a syntax tree from a\nfile.\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst tree = unified().use(remarkParse).parse('# Hello world!')\n\nconsole.log(tree)\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'heading', depth: 1, children: [Array], position: [Position]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 15, offset: 14}\n  }\n}\n```\n\n#### `processor.Parser`\n\nA **parser** handles the parsing of text to a [*syntax tree*][syntax-tree].\nUsed in the [*parse phase*][description] and called with a `string` and\n[`VFile`][vfile] representation of the text to parse.\n\n`Parser` can be a function, in which case it must return a [`Node`][node]: the\nsyntax tree representation of the given file.\n\n`Parser` can also be a constructor function (a function with a `parse` field, or\nother fields, in its `prototype`), in which case it’s constructed with `new`.\nInstances must have a `parse` method that is called without arguments and must\nreturn a [`Node`][node].\n\n### `processor.stringify(node[, file])`\n\nCompile a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — [*Syntax tree*][syntax-tree] to compile\n*   `file` ([`VFile`][vfile], optional) — [*File*][file], any value accepted by\n    `vfile()`\n\n###### Returns\n\n`string` or `Buffer` (see notes) — Textual representation of the [*syntax\ntree*][syntax-tree]\n\n###### Note\n\n`stringify` freezes the processor if not already [*frozen*][freeze].\n\n`stringify` performs the [*stringify phase*][description], not the *run phase*\nor other phases.\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you’re using a compiler doesn’t serialize, expect different result values.\nWhen using TypeScript, cast the type on your side.\n\n###### Example\n\nThe below example shows how `stringify` can be used to serialize a syntax tree.\n\n```js\nimport {unified} from 'unified'\nimport rehypeStringify from 'rehype-stringify'\nimport {h} from 'hastscript'\n\nconst tree = h('h1', 'Hello world!')\n\nconst doc = unified().use(rehypeStringify).stringify(tree)\n\nconsole.log(doc)\n```\n\nYields:\n\n```html\n<h1>Hello world!</h1>\n```\n\n#### `processor.Compiler`\n\nA **compiler** handles the compiling of a [*syntax tree*][syntax-tree] to text.\nUsed in the [*stringify phase*][description] and called with a [`Node`][node]\nand [`VFile`][file] representation of syntax tree to compile.\n\n`Compiler` can be a function, in which case it should return a `string`: the\ntextual representation of the syntax tree.\n\n`Compiler` can also be a constructor function (a function with a `compile`\nfield, or other fields, in its `prototype`), in which case it’s constructed with\n`new`.\nInstances must have a `compile` method that is called without arguments and\nshould return a `string`.\n\n### `processor.run(node[, file][, done])`\n\nRun [*transformers*][transformer] on a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — [*Syntax tree*][syntax-tree] to run on\n*   `file` ([`VFile`][vfile], optional) — [*File*][file], any value accepted by\n    `vfile()`\n*   `done` ([`Function`][run-done], optional) — Callback\n\n###### Returns\n\n[`Promise`][promise] if `done` is not given.\nThe returned promise is rejected with a fatal error, or resolved with the\ntransformed [*syntax tree*][syntax-tree].\n\n###### Note\n\n`run` freezes the processor if not already [*frozen*][freeze].\n\n`run` performs the [*run phase*][description], not other phases.\n\n#### `function done(err[, node, file])`\n\nCallback called when [*transformers*][transformer] are done.\nCalled with either an error or results.\n\n###### Parameters\n\n*   `err` (`Error`, optional) — Fatal error\n*   `node` ([`Node`][node], optional) — Transformed [*syntax tree*][syntax-tree]\n*   `file` ([`VFile`][vfile], optional) — [*File*][file]\n\n###### Example\n\nThe below example shows how `run` can be used to transform a syntax tree.\n\n```js\nimport {unified} from 'unified'\nimport remarkReferenceLinks from 'remark-reference-links'\nimport {u} from 'unist-builder'\n\nconst tree = u('root', [\n  u('paragraph', [\n    u('link', {href: 'https://example.com'}, [u('text', 'Example Domain')])\n  ])\n])\n\nunified()\n  .use(remarkReferenceLinks)\n  .run(tree)\n  .then(\n    (changedTree) => console.log(changedTree),\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'paragraph', children: [Array]},\n    {type: 'definition', identifier: '1', title: undefined, url: undefined}\n  ]\n}\n```\n\n### `processor.runSync(node[, file])`\n\nRun [*transformers*][transformer] on a [*syntax tree*][syntax-tree].\n\nAn error is thrown if asynchronous [*plugin*][plugin]s are configured.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — [*Syntax tree*][syntax-tree] to run on\n*   `file` ([`VFile`][vfile], optional) — [*File*][file], any value accepted by\n    `vfile()`\n\n###### Returns\n\n[`Node`][node] — Transformed [*syntax tree*][syntax-tree].\n\n###### Note\n\n`runSync` freezes the processor if not already [*frozen*][freeze].\n\n`runSync` performs the [*run phase*][description], not other phases.\n\n### `processor.process(file[, done])`\n\n[*Process*][description] the given [*file*][file] as configured on the\nprocessor.\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) — [*File*][file], any value accepted by `vfile()`\n*   `done` ([`Function`][process-done], optional) — Callback\n\n###### Returns\n\n[`Promise`][promise] if `done` is not given.\nThe returned promise is rejected with a fatal error, or resolved with the\nprocessed [*file*][file].\n\nThe parsed, transformed, and compiled value is exposed on\n[`file.value`][vfile-value] or `file.result` (see notes).\n\n###### Note\n\n`process` freezes the processor if not already [*frozen*][freeze].\n\n`process` performs the [*parse*, *run*, and *stringify* phases][description].\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you’re using a compiler that serializes, the result is available at\n`file.value`.\nOtherwise, the result is available at `file.result`.\n\n###### Example\n\nThe below example shows how `process` can be used to process a file, whether\ntransformers are asynchronous or not, with promises.\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\n\nunified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n  .then(\n    (file) => console.log(String(file)),\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n#### `function done(err, file)`\n\nCallback called when the [*process*][description] is done.\nCalled with a fatal error, if any, and a [*file*][file].\n\n###### Parameters\n\n*   `err` (`Error`, optional) — Fatal error\n*   `file` ([`VFile`][vfile]) — Processed [*file*][file]\n\n###### Example\n\nThe below example shows how `process` can be used to process a file, whether\ntransformers are asynchronous or not, with a callback.\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGithub from 'remark-github'\nimport remarkStringify from 'remark-stringify'\nimport {reporter} from 'vfile-reporter'\n\nunified()\n  .use(remarkParse)\n  .use(remarkGithub)\n  .use(remarkStringify)\n  .process('@unifiedjs')\n  .then(\n    (file) => {\n      console.error(reporter(file))\n      console.log(String(file))\n    },\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```markdown\n[**@unifiedjs**](https://github.com/unifiedjs)\n```\n\n### `processor.processSync(file|value)`\n\n[*Process*][description] the given [*file*][file] as configured on the\nprocessor.\n\nAn error is thrown if asynchronous [*plugin*][plugin]s are configured.\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) — [*File*][file], any value accepted by `vfile()`\n\n###### Returns\n\n([`VFile`][vfile]) — Processed [*file*][file]\n\nThe parsed, transformed, and compiled value is exposed on\n[`file.value`][vfile-value] or `file.result` (see notes).\n\n###### Note\n\n`processSync` freezes the processor if not already [*frozen*][freeze].\n\n`processSync` performs the [*parse*, *run*, and *stringify*\nphases][description].\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you’re using a compiler that serializes, the result is available at\n`file.value`.\nOtherwise, the result is available at `file.result`.\n\n###### Example\n\nThe below example shows how `processSync` can be used to process a file, if all\ntransformers are synchronous.\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\n\nconst processor = unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n\nconsole.log(processor.processSync('# Hello world!').toString())\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n### `processor.data([key[, value]])`\n\n[*Configure*][configuration] the processor with information available to all\n[*plugin*][plugin]s.\nInformation is stored in an in-memory key-value store.\n\nTypically, options can be given to a specific plugin, but sometimes it makes\nsense to have information shared with several plugins.\nFor example, a list of HTML elements that are self-closing, which is needed\nduring all [*phases*][description] of the *process*.\n\n###### Signatures\n\n*   `processor = processor.data(key, value)`\n*   `processor = processor.data(values)`\n*   `value = processor.data(key)`\n*   `info = processor.data()`\n\n###### Parameters\n\n*   `key` (`string`, optional) — Identifier\n*   `value` (`*`, optional) — Value to set\n*   `values` (`Object`, optional) — Values to set\n\n###### Returns\n\n*   `processor` — If setting, the processor that `data` is called on\n*   `value` (`*`) — If getting, the value at `key`\n*   `info` (`Object`) — Without arguments, the key-value store\n\n###### Note\n\nSetting information cannot occur on [*frozen*][freeze] processors.\nCall the processor first to create a new unfrozen processor.\n\n###### Example\n\nThe following example show how to get and set information:\n\n```js\nimport {unified} from 'unified'\n\nconst processor = unified().data('alpha', 'bravo')\n\nprocessor.data('alpha') // => 'bravo'\n\nprocessor.data() // => {alpha: 'bravo'}\n\nprocessor.data({charlie: 'delta'})\n\nprocessor.data() // => {charlie: 'delta'}\n```\n\n### `processor.freeze()`\n\n**Freeze** a processor.\n*Frozen* processors are meant to be extended and not to be configured directly.\n\nOnce a processor is frozen it cannot be *unfrozen*.\nNew processors working the same way can be created by calling the processor.\n\nIt’s possible to freeze processors explicitly by calling `.freeze()`.\nProcessors freeze implicitly when [`.parse()`][parse], [`.run()`][run],\n[`.runSync()`][run-sync], [`.stringify()`][stringify], [`.process()`][process],\nor [`.processSync()`][process-sync] are called.\n\n###### Returns\n\n`processor` — The processor that `freeze` was called on.\n\n###### Example\n\nThe following example, `index.js`, shows how rehype prevents extensions to\nitself:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'rehype-parse'\nimport remarkStringify from 'rehype-stringify'\n\nexport const rehype = unified().use(remarkParse).use(remarkStringify).freeze()\n```\n\nThe below example, `a.js`, shows how that processor can be used and configured.\n\n```js\nimport {rehype} from 'rehype'\nimport rehypeFormat from 'rehype-format'\n// …\n\nrehype()\n  .use(rehypeFormat)\n  // …\n```\n\nThe below example, `b.js`, shows a similar looking example that operates on the\nfrozen rehype interface because it does not call `rehype`.\nIf this behavior was allowed it would result in unexpected behavior so an\nerror is thrown.\n**This is invalid**:\n\n```js\nimport {rehype} from 'rehype'\nimport rehypeFormat from 'rehype-format'\n// …\n\nrehype\n  .use(rehypeFormat)\n  // …\n```\n\nYields:\n\n```txt\n~/node_modules/unified/index.js:426\n    throw new Error(\n    ^\n\nError: Cannot call `use` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.\n    at assertUnfrozen (~/node_modules/unified/index.js:426:11)\n    at Function.use (~/node_modules/unified/index.js:165:5)\n    at ~/b.js:6:4\n```\n\n## `Plugin`\n\n**Plugins** [*configure*][configuration] the processors they are applied on in\nthe following ways:\n\n*   They change the processor: such as the [*parser*][parser], the\n    [*compiler*][compiler], or configuring [*data*][data]\n*   They specify how to handle [*syntax trees*][syntax-tree] and [*files*][file]\n\nPlugins are a concept.\nThey materialize as [`attacher`][attacher]s.\n\n###### Example\n\n`move.js`:\n\n```js\nexport function move(options = {}) {\n  const {extname} = options\n\n  if (!extname) {\n    throw new Error('Missing `extname` in options')\n  }\n\n  return transformer\n\n  function transformer(tree, file) {\n    if (file.extname && file.extname !== extname) {\n      file.extname = extname\n    }\n  }\n}\n```\n\n`index.md`:\n\n```markdown\n# Hello, world!\n```\n\n`index.js`:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\nimport {toVFile} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport {move} from './move.js'\n\nunified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(move, {extname: '.html'})\n  .use(rehypeStringify)\n  .process(toVFile.readSync('index.md'))\n  .then(\n    (file) => {\n      console.error(reporter(file))\n      toVFile.writeSync(file) // Written to `index.html`.\n    },\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```txt\nindex.md: no issues found\n```\n\n…and in `index.html`:\n\n```html\n<h1>Hello, world!</h1>\n```\n\n### `function attacher([options])`\n\n**Attachers** are materialized [*plugin*][plugin]s.\nAn attacher is a function that can receive options and\n[*configures*][configuration] the processor.\n\nAttachers change the processor, such as the [*parser*][parser], the\n[*compiler*][compiler], configuring [*data*][data], or by specifying how the\n[*syntax tree*][syntax-tree] or [*file*][file] are handled.\n\n###### Context\n\nThe context object (`this`) is set to the processor the attacher is applied on.\n\n###### Parameters\n\n*   `options` (`*`, optional) — Configuration\n\n###### Returns\n\n[`transformer`][transformer] — Optional.\n\n###### Note\n\nAttachers are called when the processor is [*frozen*][freeze], not when they are\napplied.\n\n### `function transformer(node, file[, next])`\n\n**Transformers** handle [*syntax tree*][syntax-tree]s and [*file*][file]s.\nA transformer is a function that is called each time a syntax tree and file are\npassed through the [*run phase*][description].\nIf an error occurs (either because it’s thrown, returned, rejected, or passed to\n[`next`][next]), the process stops.\n\nThe *run phase* is handled by [`trough`][trough], see its documentation for the\nexact semantics of these functions.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — [*Syntax tree*][syntax-tree] to handle\n*   `file` ([`VFile`][vfile]) — [*File*][file] to handle\n*   `next` ([`Function`][next], optional)\n\n###### Returns\n\n*   `void` — If nothing is returned, the next transformer keeps using same tree.\n*   `Error` — Fatal error to stop the process\n*   `node` ([`Node`][node]) — New [*syntax tree*][syntax-tree].\n    If returned, the next transformer is given this new tree\n*   `Promise` — Returned to perform an asynchronous operation.\n    The promise **must** be resolved (optionally with a [`Node`][node]) or\n    rejected (optionally with an `Error`)\n\n#### `function next(err[, tree[, file]])`\n\nIf the signature of a [*transformer*][transformer] includes `next` (the third\nargument), the transformer **may** perform asynchronous operations, and **must**\ncall `next()`.\n\n###### Parameters\n\n*   `err` (`Error`, optional) — Fatal error to stop the process\n*   `node` ([`Node`][node], optional) — New [*syntax tree*][syntax-tree].\n    If given, the next transformer is given this new tree\n*   `file` ([`VFile`][vfile], optional) — New [*file*][file].\n    If given, the next transformer is given this new file\n\n## `Preset`\n\n**Presets** are sharable [*configuration*][configuration].\nThey can contain [*plugins*][plugin] and settings.\n\n###### Example\n\n`preset.js`:\n\n```js\nimport remarkPresetLintRecommended from 'remark-preset-lint-recommended'\nimport remarkPresetLintConsistent from 'remark-preset-lint-consistent'\nimport remarkCommentConfig from 'remark-comment-config'\nimport remarkToc from 'remark-toc'\nimport remarkLicense from 'remark-license'\n\nexport const preset = {\n  settings: {bullet: '*', emphasis: '*', fences: true},\n  plugins: [\n    remarkPresetLintRecommended,\n    remarkPresetLintConsistent,\n    remarkCommentConfig,\n    [remarkToc, {maxDepth: 3, tight: true}],\n    remarkLicense\n  ]\n}\n```\n\n`example.md`:\n\n```markdown\n# Hello, world!\n\n_Emphasis_ and **importance**.\n\n## Table of contents\n\n## API\n\n## License\n```\n\n`index.js`:\n\n```js\nimport {remark} from 'remark'\nimport {toVFile} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport {preset} from './preset.js'\n\nremark()\n  .use(preset)\n  .process(toVFile.readSync('example.md'))\n  .then(\n    (file) => {\n      console.error(reporter(file))\n      toVFile.writeSync(file)\n    },\n    (error) => {\n      // Handle your error here!\n      throw error\n    }\n  )\n```\n\nYields:\n\n```txt\nexample.md: no issues found\n```\n\n`example.md` now contains:\n\n```markdown\n# Hello, world!\n\n*Emphasis* and **importance**.\n\n## Table of contents\n\n*   [API](#api)\n*   [License](#license)\n\n## API\n\n## License\n\n[MIT](license) © [Titus Wormer](https://wooorm.com)\n```\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`unifiedjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\nIdeas for new plugins and tools can be posted in [`unifiedjs/ideas`][ideas].\n\nA curated list of awesome unified resources can be found in [**awesome\nunified**][awesome].\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Acknowledgments\n\nPreliminary work for unified was done [in 2014][preliminary] for\n[**retext**][retext] and inspired by [`ware`][ware].\nFurther incubation happened in [**remark**][remark].\nThe project was finally [externalised][] in 2015 and [published][] as `unified`.\nThe project was authored by [**@wooorm**](https://github.com/wooorm).\n\nAlthough `unified` since moved its plugin architecture to [`trough`][trough],\nthanks to [**@calvinfo**](https://github.com/calvinfo),\n[**@ianstormtaylor**](https://github.com/ianstormtaylor), and others for their\nwork on [`ware`][ware], as it was a huge initial inspiration.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[logo]: https://raw.githubusercontent.com/unifiedjs/unified/93862e5/logo.svg?sanitize=true\n\n[build-badge]: https://github.com/unifiedjs/unified/workflows/main/badge.svg\n\n[build]: https://github.com/unifiedjs/unified/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/unifiedjs/unified.svg\n\n[coverage]: https://codecov.io/github/unifiedjs/unified\n\n[downloads-badge]: https://img.shields.io/npm/dm/unified.svg\n\n[downloads]: https://www.npmjs.com/package/unified\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unified.svg\n\n[size]: https://bundlephobia.com/result?p=unified\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/unifiedjs/unified/discussions\n\n[health]: https://github.com/unifiedjs/.github\n\n[contributing]: https://github.com/unifiedjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/unifiedjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/unifiedjs/.github/blob/HEAD/code-of-conduct.md\n\n[awesome]: https://github.com/unifiedjs/awesome-unified\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[site]: https://unifiedjs.com\n\n[twitter]: https://twitter.com/unifiedjs\n\n[learn]: https://unifiedjs.com/learn/\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[remark]: https://github.com/remarkjs/remark\n\n[retext]: https://github.com/retextjs/retext\n\n[esast]: https://github.com/syntax-tree/esast\n\n[hast]: https://github.com/syntax-tree/hast\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[nlcst]: https://github.com/syntax-tree/nlcst\n\n[xast]: https://github.com/syntax-tree/xast\n\n[unist]: https://github.com/syntax-tree/unist\n\n[engine]: https://github.com/unifiedjs/unified-engine\n\n[args]: https://github.com/unifiedjs/unified-args\n\n[gulp]: https://github.com/unifiedjs/unified-engine-gulp\n\n[atom]: https://github.com/unifiedjs/unified-engine-atom\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[remark-retext]: https://github.com/remarkjs/remark-retext\n\n[rehype-retext]: https://github.com/rehypejs/rehype-retext\n\n[rehype-remark]: https://github.com/rehypejs/rehype-remark\n\n[unist-utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n\n[vfile]: https://github.com/vfile/vfile\n\n[vfile-value]: https://github.com/vfile/vfile#vfilevalue\n\n[vfile-utilities]: https://github.com/vfile/vfile#list-of-utilities\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[description]: #description\n\n[syntax-tree]: #syntax-trees\n\n[configuration]: #configuration\n\n[file]: #file\n\n[processors]: #processors\n\n[process]: #processorprocessfile-done\n\n[process-sync]: #processorprocesssyncfilevalue\n\n[parse]: #processorparsefile\n\n[parser]: #processorparser\n\n[stringify]: #processorstringifynode-file\n\n[run]: #processorrunnode-file-done\n\n[run-sync]: #processorrunsyncnode-file\n\n[compiler]: #processorcompiler\n\n[data]: #processordatakey-value\n\n[attacher]: #function-attacheroptions\n\n[transformer]: #function-transformernode-file-next\n\n[next]: #function-nexterr-tree-file\n\n[freeze]: #processorfreeze\n\n[plugin]: #plugin\n\n[run-done]: #function-doneerr-node-file\n\n[process-done]: #function-doneerr-file\n\n[contribute]: #contribute\n\n[rehype-react]: https://github.com/rehypejs/rehype-react\n\n[trough]: https://github.com/wooorm/trough#function-fninput-next\n\n[promise]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[retext-plugins]: https://github.com/retextjs/retext/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[stream]: https://github.com/unifiedjs/unified-stream\n\n[ideas]: https://github.com/unifiedjs/ideas\n\n[preliminary]: https://github.com/retextjs/retext/commit/8fcb1f#diff-168726dbe96b3ce427e7fedce31bb0bc\n\n[externalised]: https://github.com/remarkjs/remark/commit/9892ec#diff-168726dbe96b3ce427e7fedce31bb0bc\n\n[published]: https://github.com/unifiedjs/unified/commit/2ba1cf\n\n[ware]: https://github.com/segmentio/ware\n\n[gatsby]: https://www.gatsbyjs.org\n\n[mdx]: https://mdxjs.com\n\n[jsx]: https://reactjs.org/docs/jsx-in-depth.html\n\n[prettier]: https://prettier.io\n\n[node.js]: https://nodejs.org\n\n[vercel]: https://vercel.com\n\n[netlify]: https://www.netlify.com\n\n[github]: https://github.com\n\n[mozilla]: https://www.mozilla.org\n\n[wordpress]: https://wordpress.com\n\n[adobe]: https://www.adobe.com\n\n[facebook]: https://www.facebook.com\n\n[google]: https://www.google.com\n"},{"text":"# unist-util-is\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**unist**][unist] utility to check if a node passes a test.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install unist-util-is\n```\n\n## Use\n\n```js\nimport {is} from 'unist-util-is'\n\nconst node = {type: 'strong'}\nconst parent = {type: 'paragraph', children: [node]}\n\nfunction test(node, n) {\n  return n === 5\n}\n\nis() // => false\nis({children: []}) // => false\nis(node) // => true\nis(node, 'strong') // => true\nis(node, 'emphasis') // => false\n\nis(node, node) // => true\nis(parent, {type: 'paragraph'}) // => true\nis(parent, {type: 'strong'}) // => false\n\nis(node, test) // => false\nis(node, test, 4, parent) // => false\nis(node, test, 5, parent) // => true\n```\n\n## API\n\nThis package exports the following identifiers: `is`, `convert`.\nThere is no default export.\n\n### `is(node[, test[, index, parent[, context]]])`\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Node to check.\n*   `test` ([`Function`][test], `string`, `Object`, or `Array.<Test>`, optional)\n    —  When nullish, checks if `node` is a [`Node`][node].\n    When `string`, works like passing `node => node.type === test`.\n    When `array`, checks if any one of the subtests pass.\n    When `object`, checks that all keys in `test` are in `node`,\n    and that they have strictly equal values\n*   `index` (`number`, optional) — [Index][] of `node` in `parent`\n*   `parent` ([`Node`][node], optional) — [Parent][] of `node`\n*   `context` (`*`, optional) — Context object to invoke `test` with\n\n###### Returns\n\n`boolean` — Whether `test` passed *and* `node` is a [`Node`][node] (object with\n`type` set to a non-empty `string`).\n\n#### `function test(node[, index, parent])`\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Node to check\n*   `index` (`number?`) — [Index][] of `node` in `parent`\n*   `parent` ([`Node?`][node]) — [Parent][] of `node`\n\n###### Context\n\n`*` — The to `is` given `context`.\n\n###### Returns\n\n`boolean?` — Whether `node` matches.\n\n### `convert(test)`\n\nCreate a test function from `test`, that can later be called with a `node`,\n`index`, and `parent`.\nUseful if you’re going to test many nodes, for example when creating a utility\nwhere something else passes an is-compatible test.\n\nThe created function is slightly faster because it expects valid input only.\nTherefore, passing invalid input, yields unexpected results.\n\nFor example:\n\n```js\nimport u from 'unist-builder'\nimport {convert} from 'unist-util-is'\n\nvar test = convert('leaf')\n\nvar tree = u('tree', [\n  u('node', [u('leaf', '1')]),\n  u('leaf', '2'),\n  u('node', [u('leaf', '3'), u('leaf', '4')]),\n  u('leaf', '5')\n])\n\nvar leafs = tree.children.filter((child, index) => test(child, index, tree))\n\nconsole.log(leafs)\n```\n\nYields:\n\n```js\n[{type: 'leaf', value: '2'}, {type: 'leaf', value: '5'}]\n```\n\n## Related\n\n*   [`unist-util-find-after`](https://github.com/syntax-tree/unist-util-find-after)\n    — Find a node after another node\n*   [`unist-util-find-before`](https://github.com/syntax-tree/unist-util-find-before)\n    — Find a node before another node\n*   [`unist-util-find-all-after`](https://github.com/syntax-tree/unist-util-find-all-after)\n    — Find all nodes after another node\n*   [`unist-util-find-all-before`](https://github.com/syntax-tree/unist-util-find-all-before)\n    — Find all nodes before another node\n*   [`unist-util-find-all-between`](https://github.com/mrzmmr/unist-util-find-all-between)\n    — Find all nodes between two nodes\n*   [`unist-util-filter`](https://github.com/syntax-tree/unist-util-filter)\n    — Create a new tree with nodes that pass a check\n*   [`unist-util-remove`](https://github.com/syntax-tree/unist-util-remove)\n    — Remove nodes from tree\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-is/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-is/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-is.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-is\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-is.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-is\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-is.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-is\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[test]: #function-testnode-index-parent\n"},{"text":"# unist-util-stringify-position\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[unist][]** utility to pretty print the positional information of a node.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`stringifyPosition(node|position|point)`](#stringifypositionnodepositionpoint)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility that takes any [unist][] (whether mdast, hast, etc)\nnode, position, or point, and serializes its positional info.\n\n## When should I use this?\n\nThis utility is useful to display where something occurred in the original\ndocument, in one standard way, for humans.\nFor example, when throwing errors or warning messages about something.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install unist-util-stringify-position\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {stringifyPosition} from 'https://esm.sh/unist-util-stringify-position@3'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {stringifyPosition} from 'https://esm.sh/unist-util-stringify-position@3?bundle'\n</script>\n```\n\n## Use\n\n```js\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nstringifyPosition({line: 2, column: 3}) // => '2:3' (point)\nstringifyPosition({start: {line: 2}, end: {line: 3}}) // => '2:1-3:1' (position)\nstringifyPosition({\n  type: 'text',\n  value: '!',\n  position: {\n    start: {line: 5, column: 11},\n    end: {line: 5, column: 12}\n  }\n}) // => '5:11-5:12' (node)\n```\n\n## API\n\nThis package exports the identifier `stringifyPosition`.\nThere is no default export.\n\n### `stringifyPosition(node|position|point)`\n\nStringify a [point][], [position][], or a [node][].\n\n###### Parameters\n\n*   `node` ([`Node`][node])\n    — node whose `'position'` property to stringify\n*   `position` ([`Position`][position])\n    — position whose `'start'` and `'end'` points to stringify\n*   `point` ([`Point`][point])\n    — point whose `'line'` and `'column'` to stringify\n\n###### Returns\n\n`string?` — A range `ls:cs-le:ce` (when given `node` or `position`) or a point\n`l:c` (when given `point`), where `l` stands for line, `c` for column, `s` for\n`start`, and `e` for end.\nAn empty string (`''`) is returned if the given value is neither `node`,\n`position`, nor `point`.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThere are no additional types exported.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Security\n\nThis project is safe.\n\n## Related\n\n*   [`unist-util-generated`](https://github.com/syntax-tree/unist-util-generated)\n    — check if a node is generated\n*   [`unist-util-position`](https://github.com/syntax-tree/unist-util-position)\n    — get positional info of nodes\n*   [`unist-util-remove-position`](https://github.com/syntax-tree/unist-util-remove-position)\n    — remove positional info from trees\n*   [`unist-util-source`](https://github.com/syntax-tree/unist-util-source)\n    — get the source of a value (node or position) in a file\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-stringify-position/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-stringify-position/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-stringify-position.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-stringify-position\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-stringify-position.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-stringify-position\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-stringify-position.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-stringify-position\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[position]: https://github.com/syntax-tree/unist#position\n\n[point]: https://github.com/syntax-tree/unist#point\n"},{"text":"# unist-util-visit\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**unist**][unist] utility to visit nodes.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install unist-util-visit\n```\n\n## Use\n\n```js\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\n\nconst tree = u('tree', [\n  u('leaf', '1'),\n  u('node', [u('leaf', '2')]),\n  u('void'),\n  u('leaf', '3')\n])\n\nvisit(tree, 'leaf', (node) => {\n  console.log(node)\n})\n```\n\nYields:\n\n```js\n{ type: 'leaf', value: '1' }\n{ type: 'leaf', value: '2' }\n{ type: 'leaf', value: '3' }\n```\n\nNote: this example also uses `unist-builder`, to run the example ensure both `unist-builder` and `unist-util-visit` are installed:\n\n```sh\nnpm install unist-builder unist-util-visit\n```\n\n## API\n\nThis package exports the following identifiers: `visit`, `CONTINUE`, `SKIP`, and\n`EXIT`.\nThere is no default export.\n\n### `visit(tree[, test], visitor[, reverse])`\n\nThis function works exactly the same as [`unist-util-visit-parents`][vp],\nbut `visitor` has a different signature.\n\n#### `next? = visitor(node, index, parent)`\n\nInstead of being passed an array of ancestors, `visitor` is called with the\n`node`’s [`index`][index] and its [`parent`][parent].  The optional return value\n`next` is documented in [`unist-util-visit-parents`][vp]’s readme.\n\nOtherwise the same as [`unist-util-visit-parents`][vp].\n\n## Related\n\n*   [`unist-util-visit-parents`][vp]\n    — Like `visit`, but with a stack of parents\n*   [`unist-util-filter`](https://github.com/syntax-tree/unist-util-filter)\n    — Create a new tree with all nodes that pass a test\n*   [`unist-util-map`](https://github.com/syntax-tree/unist-util-map)\n    — Create a new tree with all nodes mapped by a given function\n*   [`unist-util-flatmap`](https://gitlab.com/staltz/unist-util-flatmap)\n    — Create a new tree by mapping (to an array) with the given function\n*   [`unist-util-remove`](https://github.com/syntax-tree/unist-util-remove)\n    — Remove nodes from a tree that pass a test\n*   [`unist-util-select`](https://github.com/syntax-tree/unist-util-select)\n    — Select nodes with CSS-like selectors\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-visit/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-visit/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-visit.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-visit\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-visit.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-visit\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-visit.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-visit\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[unist]: https://github.com/syntax-tree/unist\n\n[vp]: https://github.com/syntax-tree/unist-util-visit-parents\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n"},{"text":"# unist-util-visit-parents\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**unist**][unist] utility to visit nodes, with ancestral information.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install unist-util-visit-parents\n```\n\n## Use\n\n```js\nimport {visitParents} from 'unist-util-visit-parents'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\nconst tree = fromMarkdown('Some _emphasis_, **importance**, and `code`.')\n\nvisitParents(tree, 'strong', (node, ancestors) => {\n  console.log(node.type, ancestors)\n})\n```\n\nYields:\n\n```js\nstrong\n[\n  {\n    type: 'root',\n    children: [[Object]],\n    position: {start: [Object], end: [Object]}\n  },\n  {\n    type: 'paragraph',\n    children: [\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object]\n    ],\n    position: {start: [Object], end: [Object]}\n  }\n]\n```\n\n## API\n\nThis package exports the following identifiers: `visitParents`, `SKIP`,\n`CONTINUE`, and `EXIT`.\nThere is no default export.\n\n### `visitParents(tree[, test], visitor[, reverse])`\n\nVisit nodes ([*inclusive descendants*][descendant] of [`tree`][tree]), with\nancestral information.\nOptionally filtering nodes.\nOptionally in reverse.\n\nThis algorithm performs [*depth-first*][depth-first]\n[*tree traversal*][tree-traversal] in [*preorder*][preorder] (**NLR**), or\nif `reverse` is given, in *reverse preorder* (**NRL**).\n\nWalking the tree is an intensive task.\nMake use of the return values of the visitor when possible.\nInstead of walking a tree multiple times with different `test`s, walk it once\nwithout a test, and use [`unist-util-is`][is] to check if a node matches a test,\nand then perform different operations.\n\n###### Parameters\n\n*   `tree` ([`Node`][node]) — [Tree][] to traverse\n*   `test` ([`Test`][is], optional) — [`is`][is]-compatible test (such as a\n    [type][])\n*   `visitor` ([Function][visitor]) — Function invoked when a node is found\n    that passes `test`\n*   `reverse` (`boolean`, default: `false`) — The tree is traversed in\n    [preorder][] (NLR), visiting the node itself, then its [head][], etc.\n    When `reverse` is passed, the tree is traversed in reverse preorder (NRL):\n    the node itself is visited, then its [tail][], etc.\n\n#### `next? = visitor(node, ancestors)`\n\nInvoked when a node (matching `test`, if given) is found.\n\nVisitors are free to transform `node`.\nThey can also transform the [parent][] of node (the last of `ancestors`).\nReplacing `node` itself, if `SKIP` is not returned, still causes its\n[descendant][]s to be visited.\nIf adding or removing previous [sibling][]s (or next siblings, in case of\n`reverse`) of `node`, `visitor` should return a new [`index`][index] (`number`)\nto specify the sibling to traverse after `node` is traversed.\nAdding or removing next siblings of `node` (or previous siblings, in case of\nreverse) is handled as expected without needing to return a new `index`.\nRemoving the `children` property of an ancestor still results in them being\ntraversed.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Found node\n*   `ancestors` (`Array.<Node>`) — [Ancestor][]s of `node`\n\n##### Returns\n\nThe return value can have the following forms:\n\n*   [`index`][index] (`number`) — Treated as a tuple of `[CONTINUE, index]`\n*   `action` (`*`) — Treated as a tuple of `[action]`\n*   `tuple` (`Array.<*>`) — List with one or two values, the first an `action`,\n    the second and `index`.\n    Note that passing a tuple only makes sense if the `action` is `SKIP`.\n    If the `action` is `EXIT`, that action can be returned.\n    If the `action` is `CONTINUE`, `index` can be returned.\n\n###### `action`\n\nAn action can have the following values:\n\n*   `EXIT` (`false`) — Stop traversing immediately\n*   `CONTINUE` (`true`) — Continue traversing as normal (same behaviour\n    as not returning anything)\n*   `SKIP` (`'skip'`) — Do not traverse this node’s children; continue\n    with the specified index\n\n###### `index`\n\n[`index`][index] (`number`) — Move to the sibling at `index` next (after `node`\nitself is completely traversed).\nUseful if mutating the tree, such as removing the node the visitor is currently\non, or any of its previous siblings (or next siblings, in case of `reverse`)\nResults less than `0` or greater than or equal to `children.length` stop\ntraversing the parent\n\n## Related\n\n*   [`unist-util-visit`](https://github.com/syntax-tree/unist-util-visit)\n    — Like `visit-parents`, but with one parent\n*   [`unist-util-filter`](https://github.com/syntax-tree/unist-util-filter)\n    — Create a new tree with all nodes that pass a test\n*   [`unist-util-map`](https://github.com/syntax-tree/unist-util-map)\n    — Create a new tree with all nodes mapped by a given function\n*   [`unist-util-flatmap`](https://gitlab.com/staltz/unist-util-flatmap)\n    — Create a new tree by mapping (to an array) with the given function\n*   [`unist-util-remove`](https://github.com/syntax-tree/unist-util-remove)\n    — Remove nodes from a tree that pass a test\n*   [`unist-util-select`](https://github.com/syntax-tree/unist-util-select)\n    — Select nodes with CSS-like selectors\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-visit-parents/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-visit-parents/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-visit-parents.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-visit-parents\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-visit-parents.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-visit-parents\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-visit-parents.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-visit-parents\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[visitor]: #next--visitornode-ancestors\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[is]: https://github.com/syntax-tree/unist-util-is\n\n[depth-first]: https://github.com/syntax-tree/unist#depth-first-traversal\n\n[tree-traversal]: https://github.com/syntax-tree/unist#tree-traversal\n\n[preorder]: https://github.com/syntax-tree/unist#preorder\n\n[descendant]: https://github.com/syntax-tree/unist#descendant\n\n[head]: https://github.com/syntax-tree/unist#head\n\n[tail]: https://github.com/syntax-tree/unist#tail\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n\n[sibling]: https://github.com/syntax-tree/unist#sibling\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[ancestor]: https://github.com/syntax-tree/unist#ancestor\n\n[tree]: https://github.com/syntax-tree/unist#tree\n\n[type]: https://github.com/syntax-tree/unist#type\n"},{"text":"<div align=\"center\">\n  <img src=\"shots/uvu.jpg\" alt=\"uvu\" height=\"120\" />\n</div>\n\n<div align=\"center\">\n  <a href=\"https://npmjs.org/package/uvu\">\n    <img src=\"https://badgen.now.sh/npm/v/uvu\" alt=\"version\" />\n  </a>\n  <a href=\"https://github.com/lukeed/uvu/actions\">\n    <img src=\"https://github.com/lukeed/uvu/workflows/CI/badge.svg\" alt=\"CI\" />\n  </a>\n  <a href=\"https://npmjs.org/package/uvu\">\n    <img src=\"https://badgen.now.sh/npm/dm/uvu\" alt=\"downloads\" />\n  </a>\n  <a href=\"https://packagephobia.now.sh/result?p=uvu\">\n    <img src=\"https://packagephobia.now.sh/badge?p=uvu\" alt=\"install size\" />\n  </a>\n</div>\n\n<div align=\"center\">\n  <b>uvu</b> is an extremely fast and lightweight test runner for Node.js and the browser<br>\n  <b>U</b>ltimate <b>V</b>elocity, <b>U</b>nleashed<br><br>\n  <img width=\"380\" alt=\"example with suites\" src=\"shots/suites.gif\"/>\n</div>\n\n## Features\n\n*   Super [lightweight](https://npm.anvaka.com/#/view/2d/uvu)\n*   Extremely [performant](#benchmarks)\n*   Individually executable test files\n*   Supports `async`/`await` tests\n*   Supports native ES Modules\n*   Browser-Compatible\n*   Familiar API\n\n## Install\n\n    $ npm install --save-dev uvu\n\n## Usage\n\n> Check out [`/examples`](/examples) for a list of working demos!\n\n```js\n// tests/demo.js\nimport { test } from 'uvu';\nimport * as assert from 'uvu/assert';\n\ntest('Math.sqrt()', () => {\n  assert.is(Math.sqrt(4), 2);\n  assert.is(Math.sqrt(144), 12);\n  assert.is(Math.sqrt(2), Math.SQRT2);\n});\n\ntest('JSON', () => {\n  const input = {\n    foo: 'hello',\n    bar: 'world'\n  };\n\n  const output = JSON.stringify(input);\n\n  assert.snapshot(output, `{\"foo\":\"hello\",\"bar\":\"world\"}`);\n  assert.equal(JSON.parse(output), input, 'matches original');\n});\n\ntest.run();\n```\n\nThen execute this test file:\n\n```sh\n# via `uvu` cli, for all `/tests/**` files\n$ uvu -r esm tests\n\n# via `node` directly, for file isolation\n$ node -r esm tests/demo.js\n```\n\n> **Note:** The `-r esm` is for legacy Node.js versions. [Learn More](/docs/esm.md)\n\n> [View the `uvu` CLI documentation](/docs/cli.md)\n\n## Assertions\n\nThe [`uvu/assert`](/docs/api.assert.md) module is *completely* optional.\n\nIn fact, you may use any assertion library, including Node's native [`assert`](https://nodejs.org/api/assert.html) module! This works because `uvu` relies on thrown Errors to detect failures. Implicitly, this also means that any uncaught exceptions and/or unhandled `Promise` rejections will result in a failure, which is what you want!\n\n## API\n\n### Module: `uvu`\n\n> [View `uvu` API documentation](/docs/api.uvu.md)\n\nThe main entry from which you will import the `test` or `suite` methods.\n\n### Module: `uvu/assert`\n\n> [View `uvu/assert` API documentation](/docs/api.assert.md)\n\nA collection of assertion methods to use within your tests. Please note that:\n\n*   these are browser compatible\n*   these are *completely* optional\n\n## Benchmarks\n\n> via the [`/bench`](/bench) directory with Node v10.21.0\n\nBelow you'll find each test runner with two timing values:\n\n*   the `took ___` value is the total process execution time – from startup to termination\n*   the parenthesis value (`(___)`) is the self-reported execution time, if known\n\nEach test runner's `stdout` is printed to the console to verify all assertions pass.<br>Said output is excluded below for brevity.\n\n    ~> \"ava\"   took   594ms  (  ???  )\n    ~> \"jest\"  took   962ms  (356  ms)\n    ~> \"mocha\" took   209ms  (  4  ms)\n    ~> \"tape\"  took   122ms  (  ???  )\n    ~> \"uvu\"   took    72ms  (  1.3ms)\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n"},{"text":"<h1>\n  <img src=\"https://raw.githubusercontent.com/vfile/vfile/fc8164b/logo.svg?sanitize=true\" alt=\"vfile\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**vfile** is a small and browser friendly virtual file format that tracks\nmetadata (such as a file’s `path` and `value`) and [messages][].\n\nIt was made specifically for **[unified][]** and generally for the common task\nof parsing, transforming, and serializing data, where `vfile` handles everything\nabout the document being compiled.\nThis is useful for example when building linters, compilers, static site\ngenerators, or other build tools.\n**vfile** is part of the [unified collective][site].\n\n*   for updates, see [Twitter][]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n> **vfile** is different from the excellent [`vinyl`][vinyl] in that it has\n> a smaller API, a smaller size, and focuses on [messages][].\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`VFile(options?)`](#vfileoptions)\n    *   [`vfile.value`](#vfilevalue)\n    *   [`vfile.cwd`](#vfilecwd)\n    *   [`vfile.path`](#vfilepath)\n    *   [`vfile.basename`](#vfilebasename)\n    *   [`vfile.stem`](#vfilestem)\n    *   [`vfile.extname`](#vfileextname)\n    *   [`vfile.dirname`](#vfiledirname)\n    *   [`vfile.history`](#vfilehistory)\n    *   [`vfile.messages`](#vfilemessages)\n    *   [`vfile.data`](#vfiledata)\n    *   [`VFile#toString(encoding?)`](#vfiletostringencoding)\n    *   [`VFile#message(reason[, position][, origin])`](#vfilemessagereason-position-origin)\n    *   [`VFile#info(reason[, position][, origin])`](#vfileinforeason-position-origin)\n    *   [`VFile#fail(reason[, position][, origin])`](#vfilefailreason-position-origin)\n*   [List of utilities](#list-of-utilities)\n*   [Reporters](#reporters)\n*   [Contribute](#contribute)\n*   [Sponsor](#sponsor)\n*   [Acknowledgments](#acknowledgments)\n*   [License](#license)\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install vfile\n```\n\n## Use\n\n```js\nimport {VFile} from 'vfile'\n\nvar file = new VFile({path: '~/example.txt', value: 'Alpha *braavo* charlie.'})\n\nfile.path // => '~/example.txt'\nfile.dirname // => '~'\n\nfile.extname = '.md'\n\nfile.basename // => 'example.md'\n\nfile.basename = 'index.text'\n\nfile.history // => ['~/example.txt', '~/example.md', '~/index.text']\n\nfile.message('`braavo` is misspelt; did you mean `bravo`?', {line: 1, column: 8})\n\nconsole.log(file.messages)\n```\n\nYields:\n\n```txt\n[\n  [~/index.text:1:8: `braavo` is misspelt; did you mean `bravo`?] {\n    reason: '`braavo` is misspelt; did you mean `bravo`?',\n    line: 1,\n    column: 8,\n    source: null,\n    ruleId: null,\n    position: {start: [Object], end: [Object]},\n    file: '~/index.text',\n    fatal: false\n  }\n]\n```\n\n## API\n\nThis package exports the following identifiers: `VFile`.\nThere is no default export.\n\n### `VFile(options?)`\n\nCreate a new virtual file.\nIf `options` is `string` or `Buffer`, treats it as `{value: options}`.\nIf `options` is a `VFile`, shallow copies its data over to the new file.\nAll other given fields are set on the newly created `VFile`.\n\nPath related properties are set in the following order (least specific to most\nspecific): `history`, `path`, `basename`, `stem`, `extname`, `dirname`.\n\nIt’s not possible to set either `dirname` or `extname` without setting either\n`history`, `path`, `basename`, or `stem` as well.\n\n###### Example\n\n```js\nnew VFile()\nnew VFile('console.log(\"alpha\");')\nnew VFile(Buffer.from('exit 1'))\nnew VFile({path: path.join('path', 'to', 'readme.md')})\nnew VFile({stem: 'readme', extname: '.md', dirname: path.join('path', 'to')})\nnew VFile({other: 'properties', are: 'copied', ov: {e: 'r'}})\n```\n\n### `vfile.value`\n\n`Buffer`, `string`, `null` — Raw value.\n\n### `vfile.cwd`\n\n`string` — Base of `path`.\nDefaults to `process.cwd()`.\n\n### `vfile.path`\n\n`string?` — Path of `vfile`.\nCannot be nullified.\nYou can set a file URL (a `URL` object with a `file:` protocol)\nwhich will be turned into a path with [`url.fileURLToPath`][file-url-to-path].\n\n### `vfile.basename`\n\n`string?` — Current name (including extension) of `vfile`.\nCannot contain path separators.\nCannot be nullified either (use `file.path = file.dirname` instead).\n\n### `vfile.stem`\n\n`string?` — Name (without extension) of `vfile`.\nCannot be nullified, and cannot contain path separators.\n\n### `vfile.extname`\n\n`string?` — Extension (with dot) of `vfile`.\nCannot be set if there’s no `path` yet and cannot contain path separators.\n\n### `vfile.dirname`\n\n`string?` — Path to parent directory of `vfile`.\nCannot be set if there’s no `path` yet.\n\n### `vfile.history`\n\n`Array<string>` — List of file-paths the file moved between.\n\n### `vfile.messages`\n\n[`Array<VMessage>`][message] — List of messages associated with the file.\n\n### `vfile.data`\n\n`Object` — Place to store custom information.\nIt’s OK to store custom data directly on the `vfile`, moving it to `data` gives\na *little* more privacy.\n\n### `VFile#toString(encoding?)`\n\nConvert value of `vfile` to string.\nWhen `value` is a [`Buffer`][buffer], `encoding` is a\n[character encoding][encoding] to understand it as (`string`, default:\n`'utf8'`).\n\n### `VFile#message(reason[, position][, origin])`\n\nAssociates a message with the file, where `fatal` is set to `false`.\nConstructs a new [`VMessage`][vmessage] and adds it to\n[`vfile.messages`][messages].\n\n##### Returns\n\n[`VMessage`][vmessage].\n\n### `VFile#info(reason[, position][, origin])`\n\nAssociates an informational message with the file, where `fatal` is set to\n`null`.\nCalls [`#message()`][message] internally.\n\n##### Returns\n\n[`VMessage`][vmessage].\n\n### `VFile#fail(reason[, position][, origin])`\n\nAssociates a fatal message with the file, then immediately throws it.\nNote: fatal errors mean a file is no longer processable.\nCalls [`#message()`][message] internally.\n\n##### Throws\n\n[`VMessage`][vmessage].\n\n<a name=\"utilities\"></a>\n\n## List of utilities\n\nThe following list of projects includes tools for working with virtual files.\nSee **[unist][]** for projects that work with nodes.\n\n*   [`convert-vinyl-to-vfile`](https://github.com/dustinspecker/convert-vinyl-to-vfile)\n    — transform from [Vinyl][] to vfile\n*   [`to-vfile`](https://github.com/vfile/to-vfile)\n    — create a vfile from a filepath\n*   [`vfile-find-down`](https://github.com/vfile/vfile-find-down)\n    — find files by searching the file system downwards\n*   [`vfile-find-up`](https://github.com/vfile/vfile-find-up)\n    — find files by searching the file system upwards\n*   [`vfile-glob`](https://github.com/shinnn/vfile-glob)\n    — find files by glob patterns\n*   [`vfile-is`](https://github.com/vfile/vfile-is)\n    — check if a vfile passes a test\n*   [`vfile-location`](https://github.com/vfile/vfile-location)\n    — convert between positional and offset locations\n*   [`vfile-matter`](https://github.com/vfile/vfile-matter)\n    — parse the YAML front matter\n*   [`vfile-message`](https://github.com/vfile/vfile-message)\n    — create a vfile message\n*   [`vfile-messages-to-vscode-diagnostics`](https://github.com/shinnn/vfile-messages-to-vscode-diagnostics)\n    — transform vfile messages to VS Code diagnostics\n*   [`vfile-mkdirp`](https://github.com/vfile/vfile-mkdirp)\n    — make sure the directory of a vfile exists on the file system\n*   [`vfile-rename`](https://github.com/vfile/vfile-rename)\n    — rename the path parts of a vfile\n*   [`vfile-sort`](https://github.com/vfile/vfile-sort)\n    — sort messages by line/column\n*   [`vfile-statistics`](https://github.com/vfile/vfile-statistics)\n    — count messages per category: failures, warnings, etc\n*   [`vfile-to-eslint`](https://github.com/vfile/vfile-to-eslint)\n    — convert to ESLint formatter compatible output\n\n## Reporters\n\nThe following list of projects show linting results for given virtual files.\nReporters *must* accept `Array<VFile>` as their first argument, and return\n`string`.\nReporters *may* accept other values too, in which case it’s suggested to stick\nto `vfile-reporter`s interface.\n\n*   [`vfile-reporter`][reporter]\n    — create a report\n*   [`vfile-reporter-json`](https://github.com/vfile/vfile-reporter-json)\n    — create a JSON report\n*   [`vfile-reporter-folder-json`](https://github.com/vfile/vfile-reporter-folder-json)\n    — create a JSON representation of vfiles\n*   [`vfile-reporter-pretty`](https://github.com/vfile/vfile-reporter-pretty)\n    — create a pretty report\n*   [`vfile-reporter-junit`](https://github.com/kellyselden/vfile-reporter-junit)\n    — create a jUnit report\n*   [`vfile-reporter-position`](https://github.com/Hocdoc/vfile-reporter-position)\n    — create a report with content excerpts\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`vfile/.github`][health] for ways to\nget started.\nSee [`support.md`][support] for ways to get help.\nIdeas for new utilities and tools can be posted in [`vfile/ideas`][ideas].\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gitbook.com\">GitBook</a><br><br>\n  <a href=\"https://www.gitbook.com\"><img src=\"https://avatars1.githubusercontent.com/u/7111340?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boostnote.io\">Boost Note</a><br><br>\n  <a href=\"https://boostnote.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"8\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## Acknowledgments\n\nThe initial release of this project was authored by\n[**@wooorm**](https://github.com/wooorm).\n\nThanks to [**@contra**](https://github.com/contra),\n[**@phated**](https://github.com/phated), and others for their work on\n[Vinyl][], which was a huge inspiration.\n\nThanks to\n[**@brendo**](https://github.com/brendo),\n[**@shinnn**](https://github.com/shinnn),\n[**@KyleAMathews**](https://github.com/KyleAMathews),\n[**@sindresorhus**](https://github.com/sindresorhus), and\n[**@denysdovhan**](https://github.com/denysdovhan)\nfor contributing commits since!\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/vfile/vfile/workflows/main/badge.svg\n\n[build]: https://github.com/vfile/vfile/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/vfile/vfile.svg\n\n[coverage]: https://codecov.io/github/vfile/vfile\n\n[downloads-badge]: https://img.shields.io/npm/dm/vfile.svg\n\n[downloads]: https://www.npmjs.com/package/vfile\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/vfile.svg\n\n[size]: https://bundlephobia.com/result?p=vfile\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/vfile/vfile/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[contributing]: https://github.com/vfile/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/vfile/.github/blob/HEAD/support.md\n\n[health]: https://github.com/vfile/.github\n\n[coc]: https://github.com/vfile/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[unified]: https://github.com/unifiedjs/unified\n\n[vinyl]: https://github.com/gulpjs/vinyl\n\n[site]: https://unifiedjs.com\n\n[twitter]: https://twitter.com/unifiedjs\n\n[contribute]: #contribute\n\n[sponsor]: #sponsor\n\n[unist]: https://github.com/syntax-tree/unist#list-of-utilities\n\n[reporter]: https://github.com/vfile/vfile-reporter\n\n[vmessage]: https://github.com/vfile/vfile-message\n\n[messages]: #vfilemessages\n\n[message]: #vfilemessagereason-position-origin\n\n[ideas]: https://github.com/vfile/ideas\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[file-url-to-path]: https://nodejs.org/api/url.html#url_url_fileurltopath_url\n"},{"text":"# vfile-message\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nCreate [vfile][] messages.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```bash\nnpm install vfile-message\n```\n\n## Use\n\n```js\nimport {VFileMessage} from 'vfile-message'\n\nvar message = new VFileMessage(\n  '`braavo` is misspelt; did you mean `bravo`?',\n  {line: 1, column: 8},\n  'spell:typo'\n)\n\nconsole.log(message)\n```\n\nYields:\n\n```txt\n[1:8: `braavo` is misspelt; did you mean `bravo`?] {\n  reason: '`braavo` is misspelt; did you mean `bravo`?',\n  line: 1,\n  column: 8,\n  source: 'spell',\n  ruleId: 'typo',\n  position: {start: {line: 1, column: 8}, end: {line: null, column: null}}\n}\n```\n\n## API\n\nThis package exports the following identifiers: `VFileMessage`.\nThere is no default export.\n\n### `VFileMessage(reason[, place][, origin])`\n\nConstructor of a message for `reason` at `place` from `origin`.\nWhen an error is passed in as `reason`, copies the stack.\n\n##### Parameters\n\n###### `reason`\n\nReason for message (`string` or `Error`).\nUses the stack and message of the error if given.\n\n###### `place`\n\nPlace at which the message occurred in a file ([`Node`][node],\n[`Position`][position], or [`Point`][point], optional).\n\n###### `origin`\n\nPlace in code the message originates from (`string`, optional).\n\nCan either be the [`ruleId`][ruleid] (`'rule'`), or a string with both a\n[`source`][source] and a [`ruleId`][ruleid] delimited with a colon\n(`'source:rule'`).\n\n##### Extends\n\n[`Error`][error].\n\n##### Returns\n\nAn instance of itself.\n\n##### Properties\n\n###### `reason`\n\nReason for message (`string`).\n\n###### `fatal`\n\nIf `true`, marks associated file as no longer processable (`boolean?`).\nIf `false`, necessitates a (potential) change.\nThe value can also be `null` or `undefined`.\n\n###### `line`\n\nStarting line of error (`number?`).\n\n###### `column`\n\nStarting column of error (`number?`).\n\n###### `position`\n\nFull range information, when available ([`Position`][position]).\nHas `start` and `end` properties, both set to an object with `line` and\n`column`, set to `number?`.\n\n###### `source`\n\nNamespace of message (`string?`).\n\n###### `ruleId`\n\nCategory of message (`string?`).\n\n###### `stack`\n\nStack of message (`string?`).\n\n##### Custom properties\n\nIt’s OK to store custom data directly on the `VFileMessage`, some of those are\nhandled by [utilities][util].\n\n###### `actual`\n\nYou can use this to specify the source value that’s being reported, which is\ndeemed incorrect.\n\n###### `expected`\n\nYou can use this to suggest values that should be used instead of `actual`, one\nor more values that are deemed as acceptable.\n\n###### `file`\n\nYou may add a `file` property with a path of a file (used throughout the\n[**VFile**][vfile] ecosystem).\n\n###### `note`\n\nYou may add a `note` property with a long form description of the message\n(supported by [`vfile-reporter`][reporter]).\n\n###### `url`\n\nYou may add a `url` property with a link to documentation for the message.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`vfile/.github`][health] for ways to\nget started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/vfile/vfile-message/workflows/main/badge.svg\n\n[build]: https://github.com/vfile/vfile-message/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/vfile/vfile-message.svg\n\n[coverage]: https://codecov.io/github/vfile/vfile-message\n\n[downloads-badge]: https://img.shields.io/npm/dm/vfile-message.svg\n\n[downloads]: https://www.npmjs.com/package/vfile-message\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/vfile-message.svg\n\n[size]: https://bundlephobia.com/result?p=vfile-message\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/vfile/vfile/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[contributing]: https://github.com/vfile/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/vfile/.github/blob/HEAD/support.md\n\n[health]: https://github.com/vfile/.github\n\n[coc]: https://github.com/vfile/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[error]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[position]: https://github.com/syntax-tree/unist#position\n\n[point]: https://github.com/syntax-tree/unist#point\n\n[vfile]: https://github.com/vfile/vfile\n\n[util]: https://github.com/vfile/vfile#utilities\n\n[reporter]: https://github.com/vfile/vfile-reporter\n\n[ruleid]: #ruleid\n\n[source]: #source\n"},{"text":"# zwitch\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\nHandle values based on a property.\n\n## Install\n\nThis package is ESM only: Node 12+ is needed to use it and it must be `import`ed\ninstead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install zwitch\n```\n\n## Use\n\n```js\nimport {zwitch} from 'zwitch'\n\nvar handle = zwitch('type', {invalid, unknown, handlers: {alpha: handleAlpha}})\n\nhandle({type: 'alpha'})\n\nfunction handleAlpha() { /* … */ }\n```\n\nOr, with a `switch` statement:\n\n```js\nvar field = 'type'\n\nfunction handle(value) {\n  var fn\n\n  if (!value || typeof value !== 'object' || !(field in value)) {\n    fn = invalid\n  } else {\n    switch (value[field]) {\n      case 'alpha':\n        fn = handleAlpha\n        break\n      default:\n        fn = unknown\n        break\n    }\n  }\n\n  return fn.apply(this, arguments)\n}\n\nhandle({type: 'alpha'})\n\nfunction handleAlpha() { /* … */ }\n```\n\n## API\n\nThis package exports the following identifiers: `zwitch`.\nThere is no default export.\n\n### `zwitch(key[, options])`\n\nCreate a functional switch, based on a `key` (`string`).\n\n###### `options`\n\nOptions can be omitted and added later to `one`.\n\n*   `handlers` (`Object.<Function>`, optional)\n    — Object mapping values to handle, stored on `one.handlers`\n*   `invalid` (`Function`, optional)\n    — Handle values without `key`, stored on `one.invalid`\n*   `unknown` (`Function`, optional)\n    — Handle values with an unhandled `key`, stored on `one.unknown`\n\n###### Returns\n\n`Function` — See [`one`][one].\n\n#### `one(value[, rest…])`\n\nHandle one value.\nBased on the bound `key`, a respective handler will be called.\nIf `value` is not an object, or doesn’t have a `key` property, the special\n“invalid” handler will be called.\nIf `value` has an unknown `key`, the special “unknown” handler will be called.\n\nAll arguments, and the context object, are passed through to the [handler][],\nand it’s result is returned.\n\n#### `one.handlers`\n\nMap of [handler][]s (`Object.<string, Function>`).\n\n#### `one.invalid`\n\nSpecial [`handler`][handler] called if a value doesn’t have a `key` property.\nIf not set, `undefined` is returned for invalid values.\n\n#### `one.unknown`\n\nSpecial [`handler`][handler] called if a value does not have a matching\nhandler.\nIf not set, `undefined` is returned for unknown values.\n\n### `function handler(value[, rest…])`\n\nHandle one value.\n\n## Related\n\n*   [`mapz`](https://github.com/wooorm/mapz)\n    — Functional map\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/zwitch/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/zwitch/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/zwitch.svg\n\n[coverage]: https://codecov.io/github/wooorm/zwitch\n\n[downloads-badge]: https://img.shields.io/npm/dm/zwitch.svg\n\n[downloads]: https://www.npmjs.com/package/zwitch\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/zwitch.svg\n\n[size]: https://bundlephobia.com/result?p=zwitch\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[one]: #onevalue-rest\n\n[handler]: #function-handlervalue-rest\n"},{"text":"# @nodelib/fs.scandir\n\n> List files and directories inside the specified directory.\n\n## :bulb: Highlights\n\nThe package is aimed at obtaining information about entries in the directory.\n\n*   :moneybag: Returns useful information: `name`, `path`, `dirent` and `stats` (optional).\n*   :gear: On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type. See [`old` and `modern` mode](#old-and-modern-mode).\n*   :link: Can safely work with broken symbolic links.\n\n## Install\n\n```console\nnpm install @nodelib/fs.scandir\n```\n\n## Usage\n\n```ts\nimport * as fsScandir from '@nodelib/fs.scandir';\n\nfsScandir.scandir('path', (error, stats) => { /* … */ });\n```\n\n## API\n\n### .scandir(path, \\[optionsOrSettings], callback)\n\nReturns an array of plain objects ([`Entry`](#entry)) with information about entry for provided path with standard callback-style.\n\n```ts\nfsScandir.scandir('path', (error, entries) => { /* … */ });\nfsScandir.scandir('path', {}, (error, entries) => { /* … */ });\nfsScandir.scandir('path', new fsScandir.Settings(), (error, entries) => { /* … */ });\n```\n\n### .scandirSync(path, \\[optionsOrSettings])\n\nReturns an array of plain objects ([`Entry`](#entry)) with information about entry for provided path.\n\n```ts\nconst entries = fsScandir.scandirSync('path');\nconst entries = fsScandir.scandirSync('path', {});\nconst entries = fsScandir.scandirSync(('path', new fsScandir.Settings());\n```\n\n#### path\n\n*   Required: `true`\n*   Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n*   Required: `false`\n*   Type: `Options | Settings`\n*   Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settingsoptions) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings(\\[options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsScandir.Settings({ followSymbolicLinks: false });\n\nconst entries = fsScandir.scandirSync('path', settings);\n```\n\n## Entry\n\n*   `name` — The name of the entry (`unknown.txt`).\n*   `path` — The path of the entry relative to call directory (`root/unknown.txt`).\n*   `dirent` — An instance of [`fs.Dirent`](./src/types/index.ts) class. On Node.js below 10.10 will be emulated by [`DirentFromStats`](./src/utils/fs.ts) class.\n*   `stats` (optional) — An instance of `fs.Stats` class.\n\nFor example, the `scandir` call for `tools` directory with one directory inside:\n\n```ts\n{\n\tdirent: Dirent { name: 'typedoc', /* … */ },\n\tname: 'typedoc',\n\tpath: 'tools/typedoc'\n}\n```\n\n## Options\n\n### stats\n\n*   Type: `boolean`\n*   Default: `false`\n\nAdds an instance of `fs.Stats` class to the [`Entry`](#entry).\n\n> :book: Always use `fs.readdir` without the `withFileTypes` option. ??TODO??\n\n### followSymbolicLinks\n\n*   Type: `boolean`\n*   Default: `false`\n\nFollow symbolic links or not. Call `fs.stat` on symbolic link if `true`.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n*   Type: `boolean`\n*   Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely use `lstat` call if `false`.\n\n### `pathSegmentSeparator`\n\n*   Type: `string`\n*   Default: `path.sep`\n\nBy default, this package uses the correct path separator for your OS (`\\` on Windows, `/` on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead.\n\n### `fs`\n\n*   Type: [`FileSystemAdapter`](./src/adapters/fs.ts)\n*   Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat?: typeof fs.lstat;\n\tstat?: typeof fs.stat;\n\tlstatSync?: typeof fs.lstatSync;\n\tstatSync?: typeof fs.statSync;\n\treaddir?: typeof fs.readdir;\n\treaddirSync?: typeof fs.readdirSync;\n}\n\nconst settings = new fsScandir.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## `old` and `modern` mode\n\nThis package has two modes that are used depending on the environment and parameters of use.\n\n### old\n\n*   Node.js below `10.10` or when the `stats` option is enabled\n\nWhen working in the old mode, the directory is read first (`fs.readdir`), then the type of entries is determined (`fs.lstat` and/or `fs.stat` for symbolic links).\n\n### modern\n\n*   Node.js 10.10+ and the `stats` option is disabled\n\nIn the modern mode, reading the directory (`fs.readdir` with the `withFileTypes` option) is combined with obtaining information about its entries. An additional call for symbolic links (`fs.stat`) is still present.\n\nThis mode makes fewer calls to the file system. It's faster.\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n"},{"text":"# @nodelib/fs.stat\n\n> Get the status of a file with some features.\n\n## :bulb: Highlights\n\nWrapper around standard method `fs.lstat` and `fs.stat` with some features.\n\n*   :beginner: Normally follows symbolic link.\n*   :gear: Can safely work with broken symbolic link.\n\n## Install\n\n```console\nnpm install @nodelib/fs.stat\n```\n\n## Usage\n\n```ts\nimport * as fsStat from '@nodelib/fs.stat';\n\nfsStat.stat('path', (error, stats) => { /* … */ });\n```\n\n## API\n\n### .stat(path, \\[optionsOrSettings], callback)\n\nReturns an instance of `fs.Stats` class for provided path with standard callback-style.\n\n```ts\nfsStat.stat('path', (error, stats) => { /* … */ });\nfsStat.stat('path', {}, (error, stats) => { /* … */ });\nfsStat.stat('path', new fsStat.Settings(), (error, stats) => { /* … */ });\n```\n\n### .statSync(path, \\[optionsOrSettings])\n\nReturns an instance of `fs.Stats` class for provided path.\n\n```ts\nconst stats = fsStat.stat('path');\nconst stats = fsStat.stat('path', {});\nconst stats = fsStat.stat('path', new fsStat.Settings());\n```\n\n#### path\n\n*   Required: `true`\n*   Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n*   Required: `false`\n*   Type: `Options | Settings`\n*   Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settings) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings(\\[options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsStat.Settings({ followSymbolicLink: false });\n\nconst stats = fsStat.stat('path', settings);\n```\n\n## Options\n\n### `followSymbolicLink`\n\n*   Type: `boolean`\n*   Default: `true`\n\nFollow symbolic link or not. Call `fs.stat` on symbolic link if `true`.\n\n### `markSymbolicLink`\n\n*   Type: `boolean`\n*   Default: `false`\n\nMark symbolic link by setting the return value of `isSymbolicLink` function to always `true` (even after `fs.stat`).\n\n> :book: Can be used if you want to know what is hidden behind a symbolic link, but still continue to know that it is a symbolic link.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n*   Type: `boolean`\n*   Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n### `fs`\n\n*   Type: [`FileSystemAdapter`](./src/adapters/fs.ts)\n*   Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat?: typeof fs.lstat;\n\tstat?: typeof fs.stat;\n\tlstatSync?: typeof fs.lstatSync;\n\tstatSync?: typeof fs.statSync;\n}\n\nconst settings = new fsStat.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n"},{"text":"# @nodelib/fs.walk\n\n> A library for efficiently walking a directory recursively.\n\n## :bulb: Highlights\n\n*   :moneybag: Returns useful information: `name`, `path`, `dirent` and `stats` (optional).\n*   :rocket: On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type for performance reasons. See [`old` and `modern` mode](https://github.com/nodelib/nodelib/blob/master/packages/fs/fs.scandir/README.md#old-and-modern-mode).\n*   :gear: Built-in directories/files and error filtering system.\n*   :link: Can safely work with broken symbolic links.\n\n## Install\n\n```console\nnpm install @nodelib/fs.walk\n```\n\n## Usage\n\n```ts\nimport * as fsWalk from '@nodelib/fs.walk';\n\nfsWalk.walk('path', (error, entries) => { /* … */ });\n```\n\n## API\n\n### .walk(path, \\[optionsOrSettings], callback)\n\nReads the directory recursively and asynchronously. Requires a callback function.\n\n> :book: If you want to use the Promise API, use `util.promisify`.\n\n```ts\nfsWalk.walk('path', (error, entries) => { /* … */ });\nfsWalk.walk('path', {}, (error, entries) => { /* … */ });\nfsWalk.walk('path', new fsWalk.Settings(), (error, entries) => { /* … */ });\n```\n\n### .walkStream(path, \\[optionsOrSettings])\n\nReads the directory recursively and asynchronously. [Readable Stream](https://nodejs.org/dist/latest-v12.x/docs/api/stream.html#stream_readable_streams) is used as a provider.\n\n```ts\nconst stream = fsWalk.walkStream('path');\nconst stream = fsWalk.walkStream('path', {});\nconst stream = fsWalk.walkStream('path', new fsWalk.Settings());\n```\n\n### .walkSync(path, \\[optionsOrSettings])\n\nReads the directory recursively and synchronously. Returns an array of entries.\n\n```ts\nconst entries = fsWalk.walkSync('path');\nconst entries = fsWalk.walkSync('path', {});\nconst entries = fsWalk.walkSync('path', new fsWalk.Settings());\n```\n\n#### path\n\n*   Required: `true`\n*   Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n*   Required: `false`\n*   Type: `Options | Settings`\n*   Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settings) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings(\\[options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsWalk.Settings({ followSymbolicLinks: true });\n\nconst entries = fsWalk.walkSync('path', settings);\n```\n\n## Entry\n\n*   `name` — The name of the entry (`unknown.txt`).\n*   `path` — The path of the entry relative to call directory (`root/unknown.txt`).\n*   `dirent` — An instance of [`fs.Dirent`](./src/types/index.ts) class.\n*   \\[`stats`] — An instance of `fs.Stats` class.\n\n## Options\n\n### basePath\n\n*   Type: `string`\n*   Default: `undefined`\n\nBy default, all paths are built relative to the root path. You can use this option to set custom root path.\n\nIn the example below we read the files from the `root` directory, but in the results the root path will be `custom`.\n\n```ts\nfsWalk.walkSync('root'); // → ['root/file.txt']\nfsWalk.walkSync('root', { basePath: 'custom' }); // → ['custom/file.txt']\n```\n\n### concurrency\n\n*   Type: `number`\n*   Default: `Infinity`\n\nThe maximum number of concurrent calls to `fs.readdir`.\n\n> :book: The higher the number, the higher performance and the load on the File System. If you want to read in quiet mode, set the value to `4 * os.cpus().length` (4 is default size of [thread pool work scheduling](http://docs.libuv.org/en/v1.x/threadpool.html#thread-pool-work-scheduling)).\n\n### deepFilter\n\n*   Type: [`DeepFilterFunction`](./src/settings.ts)\n*   Default: `undefined`\n\nA function that indicates whether the directory will be read deep or not.\n\n```ts\n// Skip all directories that starts with `node_modules`\nconst filter: DeepFilterFunction = (entry) => !entry.path.startsWith('node_modules');\n```\n\n### entryFilter\n\n*   Type: [`EntryFilterFunction`](./src/settings.ts)\n*   Default: `undefined`\n\nA function that indicates whether the entry will be included to results or not.\n\n```ts\n// Exclude all `.js` files from results\nconst filter: EntryFilterFunction = (entry) => !entry.name.endsWith('.js');\n```\n\n### errorFilter\n\n*   Type: [`ErrorFilterFunction`](./src/settings.ts)\n*   Default: `undefined`\n\nA function that allows you to skip errors that occur when reading directories.\n\nFor example, you can skip `ENOENT` errors if required:\n\n```ts\n// Skip all ENOENT errors\nconst filter: ErrorFilterFunction = (error) => error.code == 'ENOENT';\n```\n\n### stats\n\n*   Type: `boolean`\n*   Default: `false`\n\nAdds an instance of `fs.Stats` class to the [`Entry`](#entry).\n\n> :book: Always use `fs.readdir` with additional `fs.lstat/fs.stat` calls to determine the entry type.\n\n### followSymbolicLinks\n\n*   Type: `boolean`\n*   Default: `false`\n\nFollow symbolic links or not. Call `fs.stat` on symbolic link if `true`.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n*   Type: `boolean`\n*   Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n### `pathSegmentSeparator`\n\n*   Type: `string`\n*   Default: `path.sep`\n\nBy default, this package uses the correct path separator for your OS (`\\` on Windows, `/` on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead.\n\n### `fs`\n\n*   Type: `FileSystemAdapter`\n*   Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat: typeof fs.lstat;\n\tstat: typeof fs.stat;\n\tlstatSync: typeof fs.lstatSync;\n\tstatSync: typeof fs.statSync;\n\treaddir: typeof fs.readdir;\n\treaddirSync: typeof fs.readdirSync;\n}\n\nconst settings = new fsWalk.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n"},{"text":"# Installation\n\n> `npm install --save @types/debug`\n\n# Summary\n\nThis package contains type definitions for debug (https://github.com/visionmedia/debug).\n\n# Details\n\nFiles were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/debug.\n\n## [index.d.ts](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/debug/index.d.ts)\n\n```ts\n// Type definitions for debug 4.1\n// Project: https://github.com/visionmedia/debug\n// Definitions by: Seon-Wook Park <https://github.com/swook>\n//                 Gal Talmor <https://github.com/galtalmor>\n//                 John McLaughlin <https://github.com/zamb3zi>\n//                 Brasten Sager <https://github.com/brasten>\n//                 Nicolas Penin <https://github.com/npenin>\n//                 Kristian Brünn <https://github.com/kristianmitk>\n//                 Caleb Gregory <https://github.com/calebgregory>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ndeclare var debug: debug.Debug & { debug: debug.Debug; default: debug.Debug };\n\nexport = debug;\nexport as namespace debug;\n\ndeclare namespace debug {\n    interface Debug {\n        (namespace: string): Debugger;\n        coerce: (val: any) => any;\n        disable: () => string;\n        enable: (namespaces: string) => void;\n        enabled: (namespaces: string) => boolean;\n        formatArgs: (this: Debugger, args: any[]) => void;\n        log: (...args: any[]) => any;\n        selectColor: (namespace: string) => string | number;\n        humanize: typeof import('ms');\n\n        names: RegExp[];\n        skips: RegExp[];\n\n        formatters: Formatters;\n    }\n\n    type IDebug = Debug;\n\n    interface Formatters {\n        [formatter: string]: (v: any) => string;\n    }\n\n    type IDebugger = Debugger;\n\n    interface Debugger {\n        (formatter: any, ...args: any[]): void;\n\n        color: string;\n        diff: number;\n        enabled: boolean;\n        log: (...args: any[]) => any;\n        namespace: string;\n        destroy: () => boolean;\n        extend: (namespace: string, delimiter?: string) => Debugger;\n    }\n}\n\n```\n\n### Additional Details\n\n*   Last updated: Sat, 24 Jul 2021 08:01:14 GMT\n*   Dependencies: [@types/ms](https://npmjs.com/package/@types/ms)\n*   Global values: `debug`\n\n# Credits\n\nThese definitions were written by [Seon-Wook Park](https://github.com/swook), [Gal Talmor](https://github.com/galtalmor), [John McLaughlin](https://github.com/zamb3zi), [Brasten Sager](https://github.com/brasten), [Nicolas Penin](https://github.com/npenin), [Kristian Brünn](https://github.com/kristianmitk), and [Caleb Gregory](https://github.com/calebgregory).\n"},{"text":"# Installation\n\n> `npm install --save @types/mdast`\n\n# Summary\n\nThis package contains type definitions for Mdast (https://github.com/syntax-tree/mdast).\n\n# Details\n\nFiles were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/mdast.\n\n### Additional Details\n\n*   Last updated: Mon, 23 Aug 2021 20:18:29 GMT\n*   Dependencies: [@types/unist](https://npmjs.com/package/@types/unist)\n*   Global values: none\n\n# Credits\n\nThese definitions were written by [Christian Murphy](https://github.com/ChristianMurphy), [Jun Lu](https://github.com/lujun2), [Remco Haszing](https://github.com/remcohaszing), and [Titus Wormer](https://github.com/wooorm).\n"},{"text":"# Installation\n\n> `npm install --save @types/ms`\n\n# Summary\n\nThis package contains type definitions for ms (https://github.com/zeit/ms).\n\n# Details\n\nFiles were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ms\n\nAdditional Details\n\n*   Last updated: Wed, 04 Sep 2019 20:48:21 GMT\n*   Dependencies: none\n*   Global values: none\n\n# Credits\n\nThese definitions were written by Zhiyuan Wang <https://github.com/danny8002>.\n"},{"text":"# Installation\n\n> `npm install --save @types/unist`\n\n# Summary\n\nThis package contains type definitions for Unist (https://github.com/syntax-tree/unist).\n\n# Details\n\nFiles were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/unist.\n\n### Additional Details\n\n*   Last updated: Thu, 15 Jul 2021 00:31:23 GMT\n*   Dependencies: none\n*   Global values: none\n\n# Credits\n\nThese definitions were written by [bizen241](https://github.com/bizen241), [Jun Lu](https://github.com/lujun2), [Hernan Rajchert](https://github.com/hrajchert), [Titus Wormer](https://github.com/wooorm), [Junyoung Choi](https://github.com/rokt33r), [Ben Moon](https://github.com/GuiltyDolphin), and [JounQin](https://github.com/JounQin).\n"}]